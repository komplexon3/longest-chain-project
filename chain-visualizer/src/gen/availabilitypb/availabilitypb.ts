/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: availabilitypb/availabilitypb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../contextstorepb/contextstorepb";
import * as dependency_2 from "./../dslpb/dslpb";
import * as dependency_3 from "./mscpb/mscpb";
import * as dependency_4 from "./../trantorpb/trantorpb";
import * as dependency_5 from "./../mir/codegen_extensions";
import * as pb_1 from "google-protobuf";
export namespace availabilitypb {
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7]];
        constructor(data?: any[] | ({} & (({
            request_cert?: RequestCert;
            new_cert?: never;
            verify_cert?: never;
            cert_verified?: never;
            request_transactions?: never;
            provide_transactions?: never;
            compute_cert?: never;
        } | {
            request_cert?: never;
            new_cert?: NewCert;
            verify_cert?: never;
            cert_verified?: never;
            request_transactions?: never;
            provide_transactions?: never;
            compute_cert?: never;
        } | {
            request_cert?: never;
            new_cert?: never;
            verify_cert?: VerifyCert;
            cert_verified?: never;
            request_transactions?: never;
            provide_transactions?: never;
            compute_cert?: never;
        } | {
            request_cert?: never;
            new_cert?: never;
            verify_cert?: never;
            cert_verified?: CertVerified;
            request_transactions?: never;
            provide_transactions?: never;
            compute_cert?: never;
        } | {
            request_cert?: never;
            new_cert?: never;
            verify_cert?: never;
            cert_verified?: never;
            request_transactions?: RequestTransactions;
            provide_transactions?: never;
            compute_cert?: never;
        } | {
            request_cert?: never;
            new_cert?: never;
            verify_cert?: never;
            cert_verified?: never;
            request_transactions?: never;
            provide_transactions?: ProvideTransactions;
            compute_cert?: never;
        } | {
            request_cert?: never;
            new_cert?: never;
            verify_cert?: never;
            cert_verified?: never;
            request_transactions?: never;
            provide_transactions?: never;
            compute_cert?: ComputeCert;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_cert" in data && data.request_cert != undefined) {
                    this.request_cert = data.request_cert;
                }
                if ("new_cert" in data && data.new_cert != undefined) {
                    this.new_cert = data.new_cert;
                }
                if ("verify_cert" in data && data.verify_cert != undefined) {
                    this.verify_cert = data.verify_cert;
                }
                if ("cert_verified" in data && data.cert_verified != undefined) {
                    this.cert_verified = data.cert_verified;
                }
                if ("request_transactions" in data && data.request_transactions != undefined) {
                    this.request_transactions = data.request_transactions;
                }
                if ("provide_transactions" in data && data.provide_transactions != undefined) {
                    this.provide_transactions = data.provide_transactions;
                }
                if ("compute_cert" in data && data.compute_cert != undefined) {
                    this.compute_cert = data.compute_cert;
                }
            }
        }
        get request_cert() {
            return pb_1.Message.getWrapperField(this, RequestCert, 1) as RequestCert;
        }
        set request_cert(value: RequestCert) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_request_cert() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get new_cert() {
            return pb_1.Message.getWrapperField(this, NewCert, 2) as NewCert;
        }
        set new_cert(value: NewCert) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_new_cert() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get verify_cert() {
            return pb_1.Message.getWrapperField(this, VerifyCert, 3) as VerifyCert;
        }
        set verify_cert(value: VerifyCert) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_verify_cert() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get cert_verified() {
            return pb_1.Message.getWrapperField(this, CertVerified, 4) as CertVerified;
        }
        set cert_verified(value: CertVerified) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_cert_verified() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get request_transactions() {
            return pb_1.Message.getWrapperField(this, RequestTransactions, 5) as RequestTransactions;
        }
        set request_transactions(value: RequestTransactions) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_request_transactions() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get provide_transactions() {
            return pb_1.Message.getWrapperField(this, ProvideTransactions, 6) as ProvideTransactions;
        }
        set provide_transactions(value: ProvideTransactions) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_provide_transactions() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get compute_cert() {
            return pb_1.Message.getWrapperField(this, ComputeCert, 7) as ComputeCert;
        }
        set compute_cert(value: ComputeCert) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_compute_cert() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "request_cert" | "new_cert" | "verify_cert" | "cert_verified" | "request_transactions" | "provide_transactions" | "compute_cert";
            } = {
                0: "none",
                1: "request_cert",
                2: "new_cert",
                3: "verify_cert",
                4: "cert_verified",
                5: "request_transactions",
                6: "provide_transactions",
                7: "compute_cert"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7])];
        }
        static fromObject(data: {
            request_cert?: ReturnType<typeof RequestCert.prototype.toObject>;
            new_cert?: ReturnType<typeof NewCert.prototype.toObject>;
            verify_cert?: ReturnType<typeof VerifyCert.prototype.toObject>;
            cert_verified?: ReturnType<typeof CertVerified.prototype.toObject>;
            request_transactions?: ReturnType<typeof RequestTransactions.prototype.toObject>;
            provide_transactions?: ReturnType<typeof ProvideTransactions.prototype.toObject>;
            compute_cert?: ReturnType<typeof ComputeCert.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.request_cert != null) {
                message.request_cert = RequestCert.fromObject(data.request_cert);
            }
            if (data.new_cert != null) {
                message.new_cert = NewCert.fromObject(data.new_cert);
            }
            if (data.verify_cert != null) {
                message.verify_cert = VerifyCert.fromObject(data.verify_cert);
            }
            if (data.cert_verified != null) {
                message.cert_verified = CertVerified.fromObject(data.cert_verified);
            }
            if (data.request_transactions != null) {
                message.request_transactions = RequestTransactions.fromObject(data.request_transactions);
            }
            if (data.provide_transactions != null) {
                message.provide_transactions = ProvideTransactions.fromObject(data.provide_transactions);
            }
            if (data.compute_cert != null) {
                message.compute_cert = ComputeCert.fromObject(data.compute_cert);
            }
            return message;
        }
        toObject() {
            const data: {
                request_cert?: ReturnType<typeof RequestCert.prototype.toObject>;
                new_cert?: ReturnType<typeof NewCert.prototype.toObject>;
                verify_cert?: ReturnType<typeof VerifyCert.prototype.toObject>;
                cert_verified?: ReturnType<typeof CertVerified.prototype.toObject>;
                request_transactions?: ReturnType<typeof RequestTransactions.prototype.toObject>;
                provide_transactions?: ReturnType<typeof ProvideTransactions.prototype.toObject>;
                compute_cert?: ReturnType<typeof ComputeCert.prototype.toObject>;
            } = {};
            if (this.request_cert != null) {
                data.request_cert = this.request_cert.toObject();
            }
            if (this.new_cert != null) {
                data.new_cert = this.new_cert.toObject();
            }
            if (this.verify_cert != null) {
                data.verify_cert = this.verify_cert.toObject();
            }
            if (this.cert_verified != null) {
                data.cert_verified = this.cert_verified.toObject();
            }
            if (this.request_transactions != null) {
                data.request_transactions = this.request_transactions.toObject();
            }
            if (this.provide_transactions != null) {
                data.provide_transactions = this.provide_transactions.toObject();
            }
            if (this.compute_cert != null) {
                data.compute_cert = this.compute_cert.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_request_cert)
                writer.writeMessage(1, this.request_cert, () => this.request_cert.serialize(writer));
            if (this.has_new_cert)
                writer.writeMessage(2, this.new_cert, () => this.new_cert.serialize(writer));
            if (this.has_verify_cert)
                writer.writeMessage(3, this.verify_cert, () => this.verify_cert.serialize(writer));
            if (this.has_cert_verified)
                writer.writeMessage(4, this.cert_verified, () => this.cert_verified.serialize(writer));
            if (this.has_request_transactions)
                writer.writeMessage(5, this.request_transactions, () => this.request_transactions.serialize(writer));
            if (this.has_provide_transactions)
                writer.writeMessage(6, this.provide_transactions, () => this.provide_transactions.serialize(writer));
            if (this.has_compute_cert)
                writer.writeMessage(7, this.compute_cert, () => this.compute_cert.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.request_cert, () => message.request_cert = RequestCert.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.new_cert, () => message.new_cert = NewCert.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.verify_cert, () => message.verify_cert = VerifyCert.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.cert_verified, () => message.cert_verified = CertVerified.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.request_transactions, () => message.request_transactions = RequestTransactions.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.provide_transactions, () => message.provide_transactions = ProvideTransactions.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.compute_cert, () => message.compute_cert = ComputeCert.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class RequestCert extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            origin?: RequestCertOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, RequestCertOrigin, 1) as RequestCertOrigin;
        }
        set origin(value: RequestCertOrigin) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            origin?: ReturnType<typeof RequestCertOrigin.prototype.toObject>;
        }): RequestCert {
            const message = new RequestCert({});
            if (data.origin != null) {
                message.origin = RequestCertOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                origin?: ReturnType<typeof RequestCertOrigin.prototype.toObject>;
            } = {};
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_origin)
                writer.writeMessage(1, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestCert {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestCert();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.origin, () => message.origin = RequestCertOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestCert {
            return RequestCert.deserialize(bytes);
        }
    }
    export class NewCert extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            cert?: Cert;
            origin?: RequestCertOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cert" in data && data.cert != undefined) {
                    this.cert = data.cert;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get cert() {
            return pb_1.Message.getWrapperField(this, Cert, 1) as Cert;
        }
        set cert(value: Cert) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_cert() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, RequestCertOrigin, 2) as RequestCertOrigin;
        }
        set origin(value: RequestCertOrigin) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            cert?: ReturnType<typeof Cert.prototype.toObject>;
            origin?: ReturnType<typeof RequestCertOrigin.prototype.toObject>;
        }): NewCert {
            const message = new NewCert({});
            if (data.cert != null) {
                message.cert = Cert.fromObject(data.cert);
            }
            if (data.origin != null) {
                message.origin = RequestCertOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                cert?: ReturnType<typeof Cert.prototype.toObject>;
                origin?: ReturnType<typeof RequestCertOrigin.prototype.toObject>;
            } = {};
            if (this.cert != null) {
                data.cert = this.cert.toObject();
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_cert)
                writer.writeMessage(1, this.cert, () => this.cert.serialize(writer));
            if (this.has_origin)
                writer.writeMessage(2, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewCert {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewCert();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.cert, () => message.cert = Cert.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.origin, () => message.origin = RequestCertOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewCert {
            return NewCert.deserialize(bytes);
        }
    }
    export class VerifyCert extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            cert?: Cert;
            origin?: VerifyCertOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cert" in data && data.cert != undefined) {
                    this.cert = data.cert;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get cert() {
            return pb_1.Message.getWrapperField(this, Cert, 1) as Cert;
        }
        set cert(value: Cert) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_cert() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, VerifyCertOrigin, 2) as VerifyCertOrigin;
        }
        set origin(value: VerifyCertOrigin) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            cert?: ReturnType<typeof Cert.prototype.toObject>;
            origin?: ReturnType<typeof VerifyCertOrigin.prototype.toObject>;
        }): VerifyCert {
            const message = new VerifyCert({});
            if (data.cert != null) {
                message.cert = Cert.fromObject(data.cert);
            }
            if (data.origin != null) {
                message.origin = VerifyCertOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                cert?: ReturnType<typeof Cert.prototype.toObject>;
                origin?: ReturnType<typeof VerifyCertOrigin.prototype.toObject>;
            } = {};
            if (this.cert != null) {
                data.cert = this.cert.toObject();
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_cert)
                writer.writeMessage(1, this.cert, () => this.cert.serialize(writer));
            if (this.has_origin)
                writer.writeMessage(2, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyCert {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyCert();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.cert, () => message.cert = Cert.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.origin, () => message.origin = VerifyCertOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyCert {
            return VerifyCert.deserialize(bytes);
        }
    }
    export class CertVerified extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            valid?: boolean;
            err?: string;
            origin?: VerifyCertOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("valid" in data && data.valid != undefined) {
                    this.valid = data.valid;
                }
                if ("err" in data && data.err != undefined) {
                    this.err = data.err;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get valid() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set valid(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get err() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set err(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, VerifyCertOrigin, 3) as VerifyCertOrigin;
        }
        set origin(value: VerifyCertOrigin) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            valid?: boolean;
            err?: string;
            origin?: ReturnType<typeof VerifyCertOrigin.prototype.toObject>;
        }): CertVerified {
            const message = new CertVerified({});
            if (data.valid != null) {
                message.valid = data.valid;
            }
            if (data.err != null) {
                message.err = data.err;
            }
            if (data.origin != null) {
                message.origin = VerifyCertOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                valid?: boolean;
                err?: string;
                origin?: ReturnType<typeof VerifyCertOrigin.prototype.toObject>;
            } = {};
            if (this.valid != null) {
                data.valid = this.valid;
            }
            if (this.err != null) {
                data.err = this.err;
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.valid != false)
                writer.writeBool(1, this.valid);
            if (this.err.length)
                writer.writeString(2, this.err);
            if (this.has_origin)
                writer.writeMessage(3, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CertVerified {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CertVerified();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.valid = reader.readBool();
                        break;
                    case 2:
                        message.err = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.origin, () => message.origin = VerifyCertOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CertVerified {
            return CertVerified.deserialize(bytes);
        }
    }
    export class RequestTransactions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            cert?: Cert;
            origin?: RequestTransactionsOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("cert" in data && data.cert != undefined) {
                    this.cert = data.cert;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get cert() {
            return pb_1.Message.getWrapperField(this, Cert, 1) as Cert;
        }
        set cert(value: Cert) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_cert() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, RequestTransactionsOrigin, 2) as RequestTransactionsOrigin;
        }
        set origin(value: RequestTransactionsOrigin) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            cert?: ReturnType<typeof Cert.prototype.toObject>;
            origin?: ReturnType<typeof RequestTransactionsOrigin.prototype.toObject>;
        }): RequestTransactions {
            const message = new RequestTransactions({});
            if (data.cert != null) {
                message.cert = Cert.fromObject(data.cert);
            }
            if (data.origin != null) {
                message.origin = RequestTransactionsOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                cert?: ReturnType<typeof Cert.prototype.toObject>;
                origin?: ReturnType<typeof RequestTransactionsOrigin.prototype.toObject>;
            } = {};
            if (this.cert != null) {
                data.cert = this.cert.toObject();
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_cert)
                writer.writeMessage(1, this.cert, () => this.cert.serialize(writer));
            if (this.has_origin)
                writer.writeMessage(2, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestTransactions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestTransactions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.cert, () => message.cert = Cert.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.origin, () => message.origin = RequestTransactionsOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestTransactions {
            return RequestTransactions.deserialize(bytes);
        }
    }
    export class ProvideTransactions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            txs?: dependency_4.trantorpb.Transaction[];
            origin?: RequestTransactionsOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("txs" in data && data.txs != undefined) {
                    this.txs = data.txs;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get txs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.trantorpb.Transaction, 1) as dependency_4.trantorpb.Transaction[];
        }
        set txs(value: dependency_4.trantorpb.Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, RequestTransactionsOrigin, 2) as RequestTransactionsOrigin;
        }
        set origin(value: RequestTransactionsOrigin) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            txs?: ReturnType<typeof dependency_4.trantorpb.Transaction.prototype.toObject>[];
            origin?: ReturnType<typeof RequestTransactionsOrigin.prototype.toObject>;
        }): ProvideTransactions {
            const message = new ProvideTransactions({});
            if (data.txs != null) {
                message.txs = data.txs.map(item => dependency_4.trantorpb.Transaction.fromObject(item));
            }
            if (data.origin != null) {
                message.origin = RequestTransactionsOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                txs?: ReturnType<typeof dependency_4.trantorpb.Transaction.prototype.toObject>[];
                origin?: ReturnType<typeof RequestTransactionsOrigin.prototype.toObject>;
            } = {};
            if (this.txs != null) {
                data.txs = this.txs.map((item: dependency_4.trantorpb.Transaction) => item.toObject());
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.txs.length)
                writer.writeRepeatedMessage(1, this.txs, (item: dependency_4.trantorpb.Transaction) => item.serialize(writer));
            if (this.has_origin)
                writer.writeMessage(2, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProvideTransactions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProvideTransactions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.txs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.trantorpb.Transaction.deserialize(reader), dependency_4.trantorpb.Transaction));
                        break;
                    case 2:
                        reader.readMessage(message.origin, () => message.origin = RequestTransactionsOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProvideTransactions {
            return ProvideTransactions.deserialize(bytes);
        }
    }
    export class RequestCertOrigin extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            module?: string;
        } & (({
            context_store?: dependency_1.contextstorepb.Origin;
            dsl?: never;
        } | {
            context_store?: never;
            dsl?: dependency_2.dslpb.Origin;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module" in data && data.module != undefined) {
                    this.module = data.module;
                }
                if ("context_store" in data && data.context_store != undefined) {
                    this.context_store = data.context_store;
                }
                if ("dsl" in data && data.dsl != undefined) {
                    this.dsl = data.dsl;
                }
            }
        }
        get module() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set module(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get context_store() {
            return pb_1.Message.getWrapperField(this, dependency_1.contextstorepb.Origin, 2) as dependency_1.contextstorepb.Origin;
        }
        set context_store(value: dependency_1.contextstorepb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_context_store() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dsl() {
            return pb_1.Message.getWrapperField(this, dependency_2.dslpb.Origin, 3) as dependency_2.dslpb.Origin;
        }
        set dsl(value: dependency_2.dslpb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_dsl() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "context_store" | "dsl";
            } = {
                0: "none",
                2: "context_store",
                3: "dsl"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            module?: string;
            context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
            dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
        }): RequestCertOrigin {
            const message = new RequestCertOrigin({});
            if (data.module != null) {
                message.module = data.module;
            }
            if (data.context_store != null) {
                message.context_store = dependency_1.contextstorepb.Origin.fromObject(data.context_store);
            }
            if (data.dsl != null) {
                message.dsl = dependency_2.dslpb.Origin.fromObject(data.dsl);
            }
            return message;
        }
        toObject() {
            const data: {
                module?: string;
                context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
                dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
            } = {};
            if (this.module != null) {
                data.module = this.module;
            }
            if (this.context_store != null) {
                data.context_store = this.context_store.toObject();
            }
            if (this.dsl != null) {
                data.dsl = this.dsl.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.module.length)
                writer.writeString(1, this.module);
            if (this.has_context_store)
                writer.writeMessage(2, this.context_store, () => this.context_store.serialize(writer));
            if (this.has_dsl)
                writer.writeMessage(3, this.dsl, () => this.dsl.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestCertOrigin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestCertOrigin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.module = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.context_store, () => message.context_store = dependency_1.contextstorepb.Origin.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.dsl, () => message.dsl = dependency_2.dslpb.Origin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestCertOrigin {
            return RequestCertOrigin.deserialize(bytes);
        }
    }
    export class RequestTransactionsOrigin extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            module?: string;
        } & (({
            context_store?: dependency_1.contextstorepb.Origin;
            dsl?: never;
        } | {
            context_store?: never;
            dsl?: dependency_2.dslpb.Origin;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module" in data && data.module != undefined) {
                    this.module = data.module;
                }
                if ("context_store" in data && data.context_store != undefined) {
                    this.context_store = data.context_store;
                }
                if ("dsl" in data && data.dsl != undefined) {
                    this.dsl = data.dsl;
                }
            }
        }
        get module() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set module(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get context_store() {
            return pb_1.Message.getWrapperField(this, dependency_1.contextstorepb.Origin, 2) as dependency_1.contextstorepb.Origin;
        }
        set context_store(value: dependency_1.contextstorepb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_context_store() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dsl() {
            return pb_1.Message.getWrapperField(this, dependency_2.dslpb.Origin, 3) as dependency_2.dslpb.Origin;
        }
        set dsl(value: dependency_2.dslpb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_dsl() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "context_store" | "dsl";
            } = {
                0: "none",
                2: "context_store",
                3: "dsl"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            module?: string;
            context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
            dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
        }): RequestTransactionsOrigin {
            const message = new RequestTransactionsOrigin({});
            if (data.module != null) {
                message.module = data.module;
            }
            if (data.context_store != null) {
                message.context_store = dependency_1.contextstorepb.Origin.fromObject(data.context_store);
            }
            if (data.dsl != null) {
                message.dsl = dependency_2.dslpb.Origin.fromObject(data.dsl);
            }
            return message;
        }
        toObject() {
            const data: {
                module?: string;
                context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
                dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
            } = {};
            if (this.module != null) {
                data.module = this.module;
            }
            if (this.context_store != null) {
                data.context_store = this.context_store.toObject();
            }
            if (this.dsl != null) {
                data.dsl = this.dsl.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.module.length)
                writer.writeString(1, this.module);
            if (this.has_context_store)
                writer.writeMessage(2, this.context_store, () => this.context_store.serialize(writer));
            if (this.has_dsl)
                writer.writeMessage(3, this.dsl, () => this.dsl.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestTransactionsOrigin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestTransactionsOrigin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.module = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.context_store, () => message.context_store = dependency_1.contextstorepb.Origin.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.dsl, () => message.dsl = dependency_2.dslpb.Origin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestTransactionsOrigin {
            return RequestTransactionsOrigin.deserialize(bytes);
        }
    }
    export class VerifyCertOrigin extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            module?: string;
        } & (({
            context_store?: dependency_1.contextstorepb.Origin;
            dsl?: never;
        } | {
            context_store?: never;
            dsl?: dependency_2.dslpb.Origin;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module" in data && data.module != undefined) {
                    this.module = data.module;
                }
                if ("context_store" in data && data.context_store != undefined) {
                    this.context_store = data.context_store;
                }
                if ("dsl" in data && data.dsl != undefined) {
                    this.dsl = data.dsl;
                }
            }
        }
        get module() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set module(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get context_store() {
            return pb_1.Message.getWrapperField(this, dependency_1.contextstorepb.Origin, 2) as dependency_1.contextstorepb.Origin;
        }
        set context_store(value: dependency_1.contextstorepb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_context_store() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dsl() {
            return pb_1.Message.getWrapperField(this, dependency_2.dslpb.Origin, 3) as dependency_2.dslpb.Origin;
        }
        set dsl(value: dependency_2.dslpb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_dsl() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "context_store" | "dsl";
            } = {
                0: "none",
                2: "context_store",
                3: "dsl"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            module?: string;
            context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
            dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
        }): VerifyCertOrigin {
            const message = new VerifyCertOrigin({});
            if (data.module != null) {
                message.module = data.module;
            }
            if (data.context_store != null) {
                message.context_store = dependency_1.contextstorepb.Origin.fromObject(data.context_store);
            }
            if (data.dsl != null) {
                message.dsl = dependency_2.dslpb.Origin.fromObject(data.dsl);
            }
            return message;
        }
        toObject() {
            const data: {
                module?: string;
                context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
                dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
            } = {};
            if (this.module != null) {
                data.module = this.module;
            }
            if (this.context_store != null) {
                data.context_store = this.context_store.toObject();
            }
            if (this.dsl != null) {
                data.dsl = this.dsl.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.module.length)
                writer.writeString(1, this.module);
            if (this.has_context_store)
                writer.writeMessage(2, this.context_store, () => this.context_store.serialize(writer));
            if (this.has_dsl)
                writer.writeMessage(3, this.dsl, () => this.dsl.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyCertOrigin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyCertOrigin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.module = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.context_store, () => message.context_store = dependency_1.contextstorepb.Origin.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.dsl, () => message.dsl = dependency_2.dslpb.Origin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyCertOrigin {
            return VerifyCertOrigin.deserialize(bytes);
        }
    }
    export class Cert extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            mscs?: dependency_3.availabilitypb.mscpb.Certs;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mscs" in data && data.mscs != undefined) {
                    this.mscs = data.mscs;
                }
            }
        }
        get mscs() {
            return pb_1.Message.getWrapperField(this, dependency_3.availabilitypb.mscpb.Certs, 1) as dependency_3.availabilitypb.mscpb.Certs;
        }
        set mscs(value: dependency_3.availabilitypb.mscpb.Certs) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_mscs() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "mscs";
            } = {
                0: "none",
                1: "mscs"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            mscs?: ReturnType<typeof dependency_3.availabilitypb.mscpb.Certs.prototype.toObject>;
        }): Cert {
            const message = new Cert({});
            if (data.mscs != null) {
                message.mscs = dependency_3.availabilitypb.mscpb.Certs.fromObject(data.mscs);
            }
            return message;
        }
        toObject() {
            const data: {
                mscs?: ReturnType<typeof dependency_3.availabilitypb.mscpb.Certs.prototype.toObject>;
            } = {};
            if (this.mscs != null) {
                data.mscs = this.mscs.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_mscs)
                writer.writeMessage(1, this.mscs, () => this.mscs.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Cert {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Cert();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.mscs, () => message.mscs = dependency_3.availabilitypb.mscpb.Certs.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Cert {
            return Cert.deserialize(bytes);
        }
    }
    export class ComputeCert extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ComputeCert {
            const message = new ComputeCert({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ComputeCert {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ComputeCert();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ComputeCert {
            return ComputeCert.deserialize(bytes);
        }
    }
}
