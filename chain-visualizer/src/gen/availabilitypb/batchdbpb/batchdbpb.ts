/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: availabilitypb/batchdbpb/batchdbpb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../contextstorepb/contextstorepb";
import * as dependency_2 from "./../../dslpb/dslpb";
import * as dependency_3 from "./../../trantorpb/trantorpb";
import * as dependency_4 from "./../../mir/codegen_extensions";
import * as pb_1 from "google-protobuf";
export namespace batchdbpb {
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5]];
        constructor(data?: any[] | ({} & (({
            lookup?: LookupBatch;
            lookup_response?: never;
            store?: never;
            stored?: never;
            garbage_collect?: never;
        } | {
            lookup?: never;
            lookup_response?: LookupBatchResponse;
            store?: never;
            stored?: never;
            garbage_collect?: never;
        } | {
            lookup?: never;
            lookup_response?: never;
            store?: StoreBatch;
            stored?: never;
            garbage_collect?: never;
        } | {
            lookup?: never;
            lookup_response?: never;
            store?: never;
            stored?: BatchStored;
            garbage_collect?: never;
        } | {
            lookup?: never;
            lookup_response?: never;
            store?: never;
            stored?: never;
            garbage_collect?: GarbageCollect;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("lookup" in data && data.lookup != undefined) {
                    this.lookup = data.lookup;
                }
                if ("lookup_response" in data && data.lookup_response != undefined) {
                    this.lookup_response = data.lookup_response;
                }
                if ("store" in data && data.store != undefined) {
                    this.store = data.store;
                }
                if ("stored" in data && data.stored != undefined) {
                    this.stored = data.stored;
                }
                if ("garbage_collect" in data && data.garbage_collect != undefined) {
                    this.garbage_collect = data.garbage_collect;
                }
            }
        }
        get lookup() {
            return pb_1.Message.getWrapperField(this, LookupBatch, 1) as LookupBatch;
        }
        set lookup(value: LookupBatch) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_lookup() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get lookup_response() {
            return pb_1.Message.getWrapperField(this, LookupBatchResponse, 2) as LookupBatchResponse;
        }
        set lookup_response(value: LookupBatchResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_lookup_response() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get store() {
            return pb_1.Message.getWrapperField(this, StoreBatch, 3) as StoreBatch;
        }
        set store(value: StoreBatch) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_store() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get stored() {
            return pb_1.Message.getWrapperField(this, BatchStored, 4) as BatchStored;
        }
        set stored(value: BatchStored) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_stored() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get garbage_collect() {
            return pb_1.Message.getWrapperField(this, GarbageCollect, 5) as GarbageCollect;
        }
        set garbage_collect(value: GarbageCollect) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_garbage_collect() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get Type() {
            const cases: {
                [index: number]: "none" | "lookup" | "lookup_response" | "store" | "stored" | "garbage_collect";
            } = {
                0: "none",
                1: "lookup",
                2: "lookup_response",
                3: "store",
                4: "stored",
                5: "garbage_collect"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5])];
        }
        static fromObject(data: {
            lookup?: ReturnType<typeof LookupBatch.prototype.toObject>;
            lookup_response?: ReturnType<typeof LookupBatchResponse.prototype.toObject>;
            store?: ReturnType<typeof StoreBatch.prototype.toObject>;
            stored?: ReturnType<typeof BatchStored.prototype.toObject>;
            garbage_collect?: ReturnType<typeof GarbageCollect.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.lookup != null) {
                message.lookup = LookupBatch.fromObject(data.lookup);
            }
            if (data.lookup_response != null) {
                message.lookup_response = LookupBatchResponse.fromObject(data.lookup_response);
            }
            if (data.store != null) {
                message.store = StoreBatch.fromObject(data.store);
            }
            if (data.stored != null) {
                message.stored = BatchStored.fromObject(data.stored);
            }
            if (data.garbage_collect != null) {
                message.garbage_collect = GarbageCollect.fromObject(data.garbage_collect);
            }
            return message;
        }
        toObject() {
            const data: {
                lookup?: ReturnType<typeof LookupBatch.prototype.toObject>;
                lookup_response?: ReturnType<typeof LookupBatchResponse.prototype.toObject>;
                store?: ReturnType<typeof StoreBatch.prototype.toObject>;
                stored?: ReturnType<typeof BatchStored.prototype.toObject>;
                garbage_collect?: ReturnType<typeof GarbageCollect.prototype.toObject>;
            } = {};
            if (this.lookup != null) {
                data.lookup = this.lookup.toObject();
            }
            if (this.lookup_response != null) {
                data.lookup_response = this.lookup_response.toObject();
            }
            if (this.store != null) {
                data.store = this.store.toObject();
            }
            if (this.stored != null) {
                data.stored = this.stored.toObject();
            }
            if (this.garbage_collect != null) {
                data.garbage_collect = this.garbage_collect.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_lookup)
                writer.writeMessage(1, this.lookup, () => this.lookup.serialize(writer));
            if (this.has_lookup_response)
                writer.writeMessage(2, this.lookup_response, () => this.lookup_response.serialize(writer));
            if (this.has_store)
                writer.writeMessage(3, this.store, () => this.store.serialize(writer));
            if (this.has_stored)
                writer.writeMessage(4, this.stored, () => this.stored.serialize(writer));
            if (this.has_garbage_collect)
                writer.writeMessage(5, this.garbage_collect, () => this.garbage_collect.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.lookup, () => message.lookup = LookupBatch.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.lookup_response, () => message.lookup_response = LookupBatchResponse.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.store, () => message.store = StoreBatch.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.stored, () => message.stored = BatchStored.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.garbage_collect, () => message.garbage_collect = GarbageCollect.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class LookupBatch extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch_id?: Uint8Array;
            origin?: LookupBatchOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch_id" in data && data.batch_id != undefined) {
                    this.batch_id = data.batch_id;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get batch_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set batch_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, LookupBatchOrigin, 2) as LookupBatchOrigin;
        }
        set origin(value: LookupBatchOrigin) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            batch_id?: Uint8Array;
            origin?: ReturnType<typeof LookupBatchOrigin.prototype.toObject>;
        }): LookupBatch {
            const message = new LookupBatch({});
            if (data.batch_id != null) {
                message.batch_id = data.batch_id;
            }
            if (data.origin != null) {
                message.origin = LookupBatchOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                batch_id?: Uint8Array;
                origin?: ReturnType<typeof LookupBatchOrigin.prototype.toObject>;
            } = {};
            if (this.batch_id != null) {
                data.batch_id = this.batch_id;
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.batch_id.length)
                writer.writeBytes(1, this.batch_id);
            if (this.has_origin)
                writer.writeMessage(2, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LookupBatch {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LookupBatch();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.batch_id = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.origin, () => message.origin = LookupBatchOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LookupBatch {
            return LookupBatch.deserialize(bytes);
        }
    }
    export class LookupBatchResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            found?: boolean;
            txs?: dependency_3.trantorpb.Transaction[];
            origin?: LookupBatchOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("found" in data && data.found != undefined) {
                    this.found = data.found;
                }
                if ("txs" in data && data.txs != undefined) {
                    this.txs = data.txs;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get found() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set found(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get txs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.trantorpb.Transaction, 2) as dependency_3.trantorpb.Transaction[];
        }
        set txs(value: dependency_3.trantorpb.Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, LookupBatchOrigin, 3) as LookupBatchOrigin;
        }
        set origin(value: LookupBatchOrigin) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            found?: boolean;
            txs?: ReturnType<typeof dependency_3.trantorpb.Transaction.prototype.toObject>[];
            origin?: ReturnType<typeof LookupBatchOrigin.prototype.toObject>;
        }): LookupBatchResponse {
            const message = new LookupBatchResponse({});
            if (data.found != null) {
                message.found = data.found;
            }
            if (data.txs != null) {
                message.txs = data.txs.map(item => dependency_3.trantorpb.Transaction.fromObject(item));
            }
            if (data.origin != null) {
                message.origin = LookupBatchOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                found?: boolean;
                txs?: ReturnType<typeof dependency_3.trantorpb.Transaction.prototype.toObject>[];
                origin?: ReturnType<typeof LookupBatchOrigin.prototype.toObject>;
            } = {};
            if (this.found != null) {
                data.found = this.found;
            }
            if (this.txs != null) {
                data.txs = this.txs.map((item: dependency_3.trantorpb.Transaction) => item.toObject());
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.found != false)
                writer.writeBool(1, this.found);
            if (this.txs.length)
                writer.writeRepeatedMessage(2, this.txs, (item: dependency_3.trantorpb.Transaction) => item.serialize(writer));
            if (this.has_origin)
                writer.writeMessage(3, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LookupBatchResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LookupBatchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.found = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.txs, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.trantorpb.Transaction.deserialize(reader), dependency_3.trantorpb.Transaction));
                        break;
                    case 3:
                        reader.readMessage(message.origin, () => message.origin = LookupBatchOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LookupBatchResponse {
            return LookupBatchResponse.deserialize(bytes);
        }
    }
    export class StoreBatch extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch_id?: Uint8Array;
            txs?: dependency_3.trantorpb.Transaction[];
            retention_index?: number;
            origin?: StoreBatchOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch_id" in data && data.batch_id != undefined) {
                    this.batch_id = data.batch_id;
                }
                if ("txs" in data && data.txs != undefined) {
                    this.txs = data.txs;
                }
                if ("retention_index" in data && data.retention_index != undefined) {
                    this.retention_index = data.retention_index;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get batch_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set batch_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get txs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.trantorpb.Transaction, 2) as dependency_3.trantorpb.Transaction[];
        }
        set txs(value: dependency_3.trantorpb.Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get retention_index() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set retention_index(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, StoreBatchOrigin, 4) as StoreBatchOrigin;
        }
        set origin(value: StoreBatchOrigin) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            batch_id?: Uint8Array;
            txs?: ReturnType<typeof dependency_3.trantorpb.Transaction.prototype.toObject>[];
            retention_index?: number;
            origin?: ReturnType<typeof StoreBatchOrigin.prototype.toObject>;
        }): StoreBatch {
            const message = new StoreBatch({});
            if (data.batch_id != null) {
                message.batch_id = data.batch_id;
            }
            if (data.txs != null) {
                message.txs = data.txs.map(item => dependency_3.trantorpb.Transaction.fromObject(item));
            }
            if (data.retention_index != null) {
                message.retention_index = data.retention_index;
            }
            if (data.origin != null) {
                message.origin = StoreBatchOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                batch_id?: Uint8Array;
                txs?: ReturnType<typeof dependency_3.trantorpb.Transaction.prototype.toObject>[];
                retention_index?: number;
                origin?: ReturnType<typeof StoreBatchOrigin.prototype.toObject>;
            } = {};
            if (this.batch_id != null) {
                data.batch_id = this.batch_id;
            }
            if (this.txs != null) {
                data.txs = this.txs.map((item: dependency_3.trantorpb.Transaction) => item.toObject());
            }
            if (this.retention_index != null) {
                data.retention_index = this.retention_index;
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.batch_id.length)
                writer.writeBytes(1, this.batch_id);
            if (this.txs.length)
                writer.writeRepeatedMessage(2, this.txs, (item: dependency_3.trantorpb.Transaction) => item.serialize(writer));
            if (this.retention_index != 0)
                writer.writeUint64(3, this.retention_index);
            if (this.has_origin)
                writer.writeMessage(4, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StoreBatch {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StoreBatch();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.batch_id = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.txs, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.trantorpb.Transaction.deserialize(reader), dependency_3.trantorpb.Transaction));
                        break;
                    case 3:
                        message.retention_index = reader.readUint64();
                        break;
                    case 4:
                        reader.readMessage(message.origin, () => message.origin = StoreBatchOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StoreBatch {
            return StoreBatch.deserialize(bytes);
        }
    }
    export class BatchStored extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            origin?: StoreBatchOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, StoreBatchOrigin, 1) as StoreBatchOrigin;
        }
        set origin(value: StoreBatchOrigin) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            origin?: ReturnType<typeof StoreBatchOrigin.prototype.toObject>;
        }): BatchStored {
            const message = new BatchStored({});
            if (data.origin != null) {
                message.origin = StoreBatchOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                origin?: ReturnType<typeof StoreBatchOrigin.prototype.toObject>;
            } = {};
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_origin)
                writer.writeMessage(1, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchStored {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchStored();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.origin, () => message.origin = StoreBatchOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchStored {
            return BatchStored.deserialize(bytes);
        }
    }
    export class GarbageCollect extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            retention_index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("retention_index" in data && data.retention_index != undefined) {
                    this.retention_index = data.retention_index;
                }
            }
        }
        get retention_index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set retention_index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            retention_index?: number;
        }): GarbageCollect {
            const message = new GarbageCollect({});
            if (data.retention_index != null) {
                message.retention_index = data.retention_index;
            }
            return message;
        }
        toObject() {
            const data: {
                retention_index?: number;
            } = {};
            if (this.retention_index != null) {
                data.retention_index = this.retention_index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.retention_index != 0)
                writer.writeUint64(1, this.retention_index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GarbageCollect {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GarbageCollect();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.retention_index = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GarbageCollect {
            return GarbageCollect.deserialize(bytes);
        }
    }
    export class LookupBatchOrigin extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            module?: string;
        } & (({
            context_store?: dependency_1.contextstorepb.Origin;
            dsl?: never;
        } | {
            context_store?: never;
            dsl?: dependency_2.dslpb.Origin;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module" in data && data.module != undefined) {
                    this.module = data.module;
                }
                if ("context_store" in data && data.context_store != undefined) {
                    this.context_store = data.context_store;
                }
                if ("dsl" in data && data.dsl != undefined) {
                    this.dsl = data.dsl;
                }
            }
        }
        get module() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set module(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get context_store() {
            return pb_1.Message.getWrapperField(this, dependency_1.contextstorepb.Origin, 2) as dependency_1.contextstorepb.Origin;
        }
        set context_store(value: dependency_1.contextstorepb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_context_store() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dsl() {
            return pb_1.Message.getWrapperField(this, dependency_2.dslpb.Origin, 3) as dependency_2.dslpb.Origin;
        }
        set dsl(value: dependency_2.dslpb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_dsl() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get Type() {
            const cases: {
                [index: number]: "none" | "context_store" | "dsl";
            } = {
                0: "none",
                2: "context_store",
                3: "dsl"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            module?: string;
            context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
            dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
        }): LookupBatchOrigin {
            const message = new LookupBatchOrigin({});
            if (data.module != null) {
                message.module = data.module;
            }
            if (data.context_store != null) {
                message.context_store = dependency_1.contextstorepb.Origin.fromObject(data.context_store);
            }
            if (data.dsl != null) {
                message.dsl = dependency_2.dslpb.Origin.fromObject(data.dsl);
            }
            return message;
        }
        toObject() {
            const data: {
                module?: string;
                context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
                dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
            } = {};
            if (this.module != null) {
                data.module = this.module;
            }
            if (this.context_store != null) {
                data.context_store = this.context_store.toObject();
            }
            if (this.dsl != null) {
                data.dsl = this.dsl.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.module.length)
                writer.writeString(1, this.module);
            if (this.has_context_store)
                writer.writeMessage(2, this.context_store, () => this.context_store.serialize(writer));
            if (this.has_dsl)
                writer.writeMessage(3, this.dsl, () => this.dsl.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LookupBatchOrigin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LookupBatchOrigin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.module = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.context_store, () => message.context_store = dependency_1.contextstorepb.Origin.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.dsl, () => message.dsl = dependency_2.dslpb.Origin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LookupBatchOrigin {
            return LookupBatchOrigin.deserialize(bytes);
        }
    }
    export class StoreBatchOrigin extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            module?: string;
        } & (({
            context_store?: dependency_1.contextstorepb.Origin;
            dsl?: never;
        } | {
            context_store?: never;
            dsl?: dependency_2.dslpb.Origin;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module" in data && data.module != undefined) {
                    this.module = data.module;
                }
                if ("context_store" in data && data.context_store != undefined) {
                    this.context_store = data.context_store;
                }
                if ("dsl" in data && data.dsl != undefined) {
                    this.dsl = data.dsl;
                }
            }
        }
        get module() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set module(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get context_store() {
            return pb_1.Message.getWrapperField(this, dependency_1.contextstorepb.Origin, 2) as dependency_1.contextstorepb.Origin;
        }
        set context_store(value: dependency_1.contextstorepb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_context_store() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dsl() {
            return pb_1.Message.getWrapperField(this, dependency_2.dslpb.Origin, 3) as dependency_2.dslpb.Origin;
        }
        set dsl(value: dependency_2.dslpb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_dsl() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get Type() {
            const cases: {
                [index: number]: "none" | "context_store" | "dsl";
            } = {
                0: "none",
                2: "context_store",
                3: "dsl"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            module?: string;
            context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
            dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
        }): StoreBatchOrigin {
            const message = new StoreBatchOrigin({});
            if (data.module != null) {
                message.module = data.module;
            }
            if (data.context_store != null) {
                message.context_store = dependency_1.contextstorepb.Origin.fromObject(data.context_store);
            }
            if (data.dsl != null) {
                message.dsl = dependency_2.dslpb.Origin.fromObject(data.dsl);
            }
            return message;
        }
        toObject() {
            const data: {
                module?: string;
                context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
                dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
            } = {};
            if (this.module != null) {
                data.module = this.module;
            }
            if (this.context_store != null) {
                data.context_store = this.context_store.toObject();
            }
            if (this.dsl != null) {
                data.dsl = this.dsl.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.module.length)
                writer.writeString(1, this.module);
            if (this.has_context_store)
                writer.writeMessage(2, this.context_store, () => this.context_store.serialize(writer));
            if (this.has_dsl)
                writer.writeMessage(3, this.dsl, () => this.dsl.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StoreBatchOrigin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StoreBatchOrigin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.module = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.context_store, () => message.context_store = dependency_1.contextstorepb.Origin.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.dsl, () => message.dsl = dependency_2.dslpb.Origin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StoreBatchOrigin {
            return StoreBatchOrigin.deserialize(bytes);
        }
    }
}
