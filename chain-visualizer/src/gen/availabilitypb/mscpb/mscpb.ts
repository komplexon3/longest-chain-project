/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: availabilitypb/mscpb/mscpb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../trantorpb/trantorpb";
import * as dependency_2 from "./../../net/codegen_extensions";
import * as dependency_3 from "./../../mir/codegen_extensions";
import * as pb_1 from "google-protobuf";
export namespace availabilitypb.mscpb {
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4]];
        constructor(data?: any[] | ({} & (({
            request_sig?: RequestSigMessage;
            sig?: never;
            request_batch?: never;
            provide_batch?: never;
        } | {
            request_sig?: never;
            sig?: SigMessage;
            request_batch?: never;
            provide_batch?: never;
        } | {
            request_sig?: never;
            sig?: never;
            request_batch?: RequestBatchMessage;
            provide_batch?: never;
        } | {
            request_sig?: never;
            sig?: never;
            request_batch?: never;
            provide_batch?: ProvideBatchMessage;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_sig" in data && data.request_sig != undefined) {
                    this.request_sig = data.request_sig;
                }
                if ("sig" in data && data.sig != undefined) {
                    this.sig = data.sig;
                }
                if ("request_batch" in data && data.request_batch != undefined) {
                    this.request_batch = data.request_batch;
                }
                if ("provide_batch" in data && data.provide_batch != undefined) {
                    this.provide_batch = data.provide_batch;
                }
            }
        }
        get request_sig() {
            return pb_1.Message.getWrapperField(this, RequestSigMessage, 1) as RequestSigMessage;
        }
        set request_sig(value: RequestSigMessage) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_request_sig() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get sig() {
            return pb_1.Message.getWrapperField(this, SigMessage, 2) as SigMessage;
        }
        set sig(value: SigMessage) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_sig() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get request_batch() {
            return pb_1.Message.getWrapperField(this, RequestBatchMessage, 3) as RequestBatchMessage;
        }
        set request_batch(value: RequestBatchMessage) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_request_batch() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get provide_batch() {
            return pb_1.Message.getWrapperField(this, ProvideBatchMessage, 4) as ProvideBatchMessage;
        }
        set provide_batch(value: ProvideBatchMessage) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_provide_batch() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "request_sig" | "sig" | "request_batch" | "provide_batch";
            } = {
                0: "none",
                1: "request_sig",
                2: "sig",
                3: "request_batch",
                4: "provide_batch"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4])];
        }
        static fromObject(data: {
            request_sig?: ReturnType<typeof RequestSigMessage.prototype.toObject>;
            sig?: ReturnType<typeof SigMessage.prototype.toObject>;
            request_batch?: ReturnType<typeof RequestBatchMessage.prototype.toObject>;
            provide_batch?: ReturnType<typeof ProvideBatchMessage.prototype.toObject>;
        }): Message {
            const message = new Message({});
            if (data.request_sig != null) {
                message.request_sig = RequestSigMessage.fromObject(data.request_sig);
            }
            if (data.sig != null) {
                message.sig = SigMessage.fromObject(data.sig);
            }
            if (data.request_batch != null) {
                message.request_batch = RequestBatchMessage.fromObject(data.request_batch);
            }
            if (data.provide_batch != null) {
                message.provide_batch = ProvideBatchMessage.fromObject(data.provide_batch);
            }
            return message;
        }
        toObject() {
            const data: {
                request_sig?: ReturnType<typeof RequestSigMessage.prototype.toObject>;
                sig?: ReturnType<typeof SigMessage.prototype.toObject>;
                request_batch?: ReturnType<typeof RequestBatchMessage.prototype.toObject>;
                provide_batch?: ReturnType<typeof ProvideBatchMessage.prototype.toObject>;
            } = {};
            if (this.request_sig != null) {
                data.request_sig = this.request_sig.toObject();
            }
            if (this.sig != null) {
                data.sig = this.sig.toObject();
            }
            if (this.request_batch != null) {
                data.request_batch = this.request_batch.toObject();
            }
            if (this.provide_batch != null) {
                data.provide_batch = this.provide_batch.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_request_sig)
                writer.writeMessage(1, this.request_sig, () => this.request_sig.serialize(writer));
            if (this.has_sig)
                writer.writeMessage(2, this.sig, () => this.sig.serialize(writer));
            if (this.has_request_batch)
                writer.writeMessage(3, this.request_batch, () => this.request_batch.serialize(writer));
            if (this.has_provide_batch)
                writer.writeMessage(4, this.provide_batch, () => this.provide_batch.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.request_sig, () => message.request_sig = RequestSigMessage.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.sig, () => message.sig = SigMessage.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.request_batch, () => message.request_batch = RequestBatchMessage.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.provide_batch, () => message.provide_batch = ProvideBatchMessage.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    export class RequestSigMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            txs?: dependency_1.trantorpb.Transaction[];
            req_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("txs" in data && data.txs != undefined) {
                    this.txs = data.txs;
                }
                if ("req_id" in data && data.req_id != undefined) {
                    this.req_id = data.req_id;
                }
            }
        }
        get txs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.trantorpb.Transaction, 1) as dependency_1.trantorpb.Transaction[];
        }
        set txs(value: dependency_1.trantorpb.Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get req_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set req_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            txs?: ReturnType<typeof dependency_1.trantorpb.Transaction.prototype.toObject>[];
            req_id?: number;
        }): RequestSigMessage {
            const message = new RequestSigMessage({});
            if (data.txs != null) {
                message.txs = data.txs.map(item => dependency_1.trantorpb.Transaction.fromObject(item));
            }
            if (data.req_id != null) {
                message.req_id = data.req_id;
            }
            return message;
        }
        toObject() {
            const data: {
                txs?: ReturnType<typeof dependency_1.trantorpb.Transaction.prototype.toObject>[];
                req_id?: number;
            } = {};
            if (this.txs != null) {
                data.txs = this.txs.map((item: dependency_1.trantorpb.Transaction) => item.toObject());
            }
            if (this.req_id != null) {
                data.req_id = this.req_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.txs.length)
                writer.writeRepeatedMessage(1, this.txs, (item: dependency_1.trantorpb.Transaction) => item.serialize(writer));
            if (this.req_id != 0)
                writer.writeUint64(2, this.req_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestSigMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestSigMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.txs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.trantorpb.Transaction.deserialize(reader), dependency_1.trantorpb.Transaction));
                        break;
                    case 2:
                        message.req_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestSigMessage {
            return RequestSigMessage.deserialize(bytes);
        }
    }
    export class SigMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signature?: Uint8Array;
            req_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
                if ("req_id" in data && data.req_id != undefined) {
                    this.req_id = data.req_id;
                }
            }
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get req_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set req_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            signature?: Uint8Array;
            req_id?: number;
        }): SigMessage {
            const message = new SigMessage({});
            if (data.signature != null) {
                message.signature = data.signature;
            }
            if (data.req_id != null) {
                message.req_id = data.req_id;
            }
            return message;
        }
        toObject() {
            const data: {
                signature?: Uint8Array;
                req_id?: number;
            } = {};
            if (this.signature != null) {
                data.signature = this.signature;
            }
            if (this.req_id != null) {
                data.req_id = this.req_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signature.length)
                writer.writeBytes(1, this.signature);
            if (this.req_id != 0)
                writer.writeUint64(2, this.req_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SigMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SigMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signature = reader.readBytes();
                        break;
                    case 2:
                        message.req_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SigMessage {
            return SigMessage.deserialize(bytes);
        }
    }
    export class RequestBatchMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch_id?: Uint8Array;
            req_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch_id" in data && data.batch_id != undefined) {
                    this.batch_id = data.batch_id;
                }
                if ("req_id" in data && data.req_id != undefined) {
                    this.req_id = data.req_id;
                }
            }
        }
        get batch_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set batch_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get req_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set req_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            batch_id?: Uint8Array;
            req_id?: number;
        }): RequestBatchMessage {
            const message = new RequestBatchMessage({});
            if (data.batch_id != null) {
                message.batch_id = data.batch_id;
            }
            if (data.req_id != null) {
                message.req_id = data.req_id;
            }
            return message;
        }
        toObject() {
            const data: {
                batch_id?: Uint8Array;
                req_id?: number;
            } = {};
            if (this.batch_id != null) {
                data.batch_id = this.batch_id;
            }
            if (this.req_id != null) {
                data.req_id = this.req_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.batch_id.length)
                writer.writeBytes(1, this.batch_id);
            if (this.req_id != 0)
                writer.writeUint64(2, this.req_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestBatchMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestBatchMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.batch_id = reader.readBytes();
                        break;
                    case 2:
                        message.req_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestBatchMessage {
            return RequestBatchMessage.deserialize(bytes);
        }
    }
    export class ProvideBatchMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            txs?: dependency_1.trantorpb.Transaction[];
            req_id?: number;
            batch_id?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("txs" in data && data.txs != undefined) {
                    this.txs = data.txs;
                }
                if ("req_id" in data && data.req_id != undefined) {
                    this.req_id = data.req_id;
                }
                if ("batch_id" in data && data.batch_id != undefined) {
                    this.batch_id = data.batch_id;
                }
            }
        }
        get txs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.trantorpb.Transaction, 1) as dependency_1.trantorpb.Transaction[];
        }
        set txs(value: dependency_1.trantorpb.Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get req_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set req_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get batch_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set batch_id(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            txs?: ReturnType<typeof dependency_1.trantorpb.Transaction.prototype.toObject>[];
            req_id?: number;
            batch_id?: Uint8Array;
        }): ProvideBatchMessage {
            const message = new ProvideBatchMessage({});
            if (data.txs != null) {
                message.txs = data.txs.map(item => dependency_1.trantorpb.Transaction.fromObject(item));
            }
            if (data.req_id != null) {
                message.req_id = data.req_id;
            }
            if (data.batch_id != null) {
                message.batch_id = data.batch_id;
            }
            return message;
        }
        toObject() {
            const data: {
                txs?: ReturnType<typeof dependency_1.trantorpb.Transaction.prototype.toObject>[];
                req_id?: number;
                batch_id?: Uint8Array;
            } = {};
            if (this.txs != null) {
                data.txs = this.txs.map((item: dependency_1.trantorpb.Transaction) => item.toObject());
            }
            if (this.req_id != null) {
                data.req_id = this.req_id;
            }
            if (this.batch_id != null) {
                data.batch_id = this.batch_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.txs.length)
                writer.writeRepeatedMessage(1, this.txs, (item: dependency_1.trantorpb.Transaction) => item.serialize(writer));
            if (this.req_id != 0)
                writer.writeUint64(2, this.req_id);
            if (this.batch_id.length)
                writer.writeBytes(3, this.batch_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProvideBatchMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProvideBatchMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.txs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.trantorpb.Transaction.deserialize(reader), dependency_1.trantorpb.Transaction));
                        break;
                    case 2:
                        message.req_id = reader.readUint64();
                        break;
                    case 3:
                        message.batch_id = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProvideBatchMessage {
            return ProvideBatchMessage.deserialize(bytes);
        }
    }
    export class Cert extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch_id?: Uint8Array;
            signers?: string[];
            signatures?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch_id" in data && data.batch_id != undefined) {
                    this.batch_id = data.batch_id;
                }
                if ("signers" in data && data.signers != undefined) {
                    this.signers = data.signers;
                }
                if ("signatures" in data && data.signatures != undefined) {
                    this.signatures = data.signatures;
                }
            }
        }
        get batch_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set batch_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get signers() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set signers(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get signatures() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as Uint8Array[];
        }
        set signatures(value: Uint8Array[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            batch_id?: Uint8Array;
            signers?: string[];
            signatures?: Uint8Array[];
        }): Cert {
            const message = new Cert({});
            if (data.batch_id != null) {
                message.batch_id = data.batch_id;
            }
            if (data.signers != null) {
                message.signers = data.signers;
            }
            if (data.signatures != null) {
                message.signatures = data.signatures;
            }
            return message;
        }
        toObject() {
            const data: {
                batch_id?: Uint8Array;
                signers?: string[];
                signatures?: Uint8Array[];
            } = {};
            if (this.batch_id != null) {
                data.batch_id = this.batch_id;
            }
            if (this.signers != null) {
                data.signers = this.signers;
            }
            if (this.signatures != null) {
                data.signatures = this.signatures;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.batch_id.length)
                writer.writeBytes(1, this.batch_id);
            if (this.signers.length)
                writer.writeRepeatedString(2, this.signers);
            if (this.signatures.length)
                writer.writeRepeatedBytes(3, this.signatures);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Cert {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Cert();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.batch_id = reader.readBytes();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Cert {
            return Cert.deserialize(bytes);
        }
    }
    export class Certs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            certs?: Cert[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("certs" in data && data.certs != undefined) {
                    this.certs = data.certs;
                }
            }
        }
        get certs() {
            return pb_1.Message.getRepeatedWrapperField(this, Cert, 1) as Cert[];
        }
        set certs(value: Cert[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            certs?: ReturnType<typeof Cert.prototype.toObject>[];
        }): Certs {
            const message = new Certs({});
            if (data.certs != null) {
                message.certs = data.certs.map(item => Cert.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                certs?: ReturnType<typeof Cert.prototype.toObject>[];
            } = {};
            if (this.certs != null) {
                data.certs = this.certs.map((item: Cert) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.certs.length)
                writer.writeRepeatedMessage(1, this.certs, (item: Cert) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Certs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Certs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.certs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Cert.deserialize(reader), Cert));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Certs {
            return Certs.deserialize(bytes);
        }
    }
    export class InstanceParams extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            epoch?: number;
            membership?: dependency_1.trantorpb.Membership;
            max_requests?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("epoch" in data && data.epoch != undefined) {
                    this.epoch = data.epoch;
                }
                if ("membership" in data && data.membership != undefined) {
                    this.membership = data.membership;
                }
                if ("max_requests" in data && data.max_requests != undefined) {
                    this.max_requests = data.max_requests;
                }
            }
        }
        get epoch() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set epoch(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get membership() {
            return pb_1.Message.getWrapperField(this, dependency_1.trantorpb.Membership, 2) as dependency_1.trantorpb.Membership;
        }
        set membership(value: dependency_1.trantorpb.Membership) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_membership() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get max_requests() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set max_requests(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            epoch?: number;
            membership?: ReturnType<typeof dependency_1.trantorpb.Membership.prototype.toObject>;
            max_requests?: number;
        }): InstanceParams {
            const message = new InstanceParams({});
            if (data.epoch != null) {
                message.epoch = data.epoch;
            }
            if (data.membership != null) {
                message.membership = dependency_1.trantorpb.Membership.fromObject(data.membership);
            }
            if (data.max_requests != null) {
                message.max_requests = data.max_requests;
            }
            return message;
        }
        toObject() {
            const data: {
                epoch?: number;
                membership?: ReturnType<typeof dependency_1.trantorpb.Membership.prototype.toObject>;
                max_requests?: number;
            } = {};
            if (this.epoch != null) {
                data.epoch = this.epoch;
            }
            if (this.membership != null) {
                data.membership = this.membership.toObject();
            }
            if (this.max_requests != null) {
                data.max_requests = this.max_requests;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.epoch != 0)
                writer.writeUint64(1, this.epoch);
            if (this.has_membership)
                writer.writeMessage(2, this.membership, () => this.membership.serialize(writer));
            if (this.max_requests != 0)
                writer.writeUint64(3, this.max_requests);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InstanceParams {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InstanceParams();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.epoch = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.membership, () => message.membership = dependency_1.trantorpb.Membership.deserialize(reader));
                        break;
                    case 3:
                        message.max_requests = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InstanceParams {
            return InstanceParams.deserialize(bytes);
        }
    }
}
