/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: batchfetcherpb/batchfetcherpb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../trantorpb/trantorpb";
import * as dependency_2 from "./../mir/codegen_extensions";
import * as pb_1 from "google-protobuf";
export namespace batchfetcherpb {
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            new_ordered_batch?: NewOrderedBatch;
            client_progress?: never;
        } | {
            new_ordered_batch?: never;
            client_progress?: dependency_1.trantorpb.ClientProgress;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("new_ordered_batch" in data && data.new_ordered_batch != undefined) {
                    this.new_ordered_batch = data.new_ordered_batch;
                }
                if ("client_progress" in data && data.client_progress != undefined) {
                    this.client_progress = data.client_progress;
                }
            }
        }
        get new_ordered_batch() {
            return pb_1.Message.getWrapperField(this, NewOrderedBatch, 1) as NewOrderedBatch;
        }
        set new_ordered_batch(value: NewOrderedBatch) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_new_ordered_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get client_progress() {
            return pb_1.Message.getWrapperField(this, dependency_1.trantorpb.ClientProgress, 2) as dependency_1.trantorpb.ClientProgress;
        }
        set client_progress(value: dependency_1.trantorpb.ClientProgress) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_client_progress() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get Type() {
            const cases: {
                [index: number]: "none" | "new_ordered_batch" | "client_progress";
            } = {
                0: "none",
                1: "new_ordered_batch",
                2: "client_progress"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            new_ordered_batch?: ReturnType<typeof NewOrderedBatch.prototype.toObject>;
            client_progress?: ReturnType<typeof dependency_1.trantorpb.ClientProgress.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.new_ordered_batch != null) {
                message.new_ordered_batch = NewOrderedBatch.fromObject(data.new_ordered_batch);
            }
            if (data.client_progress != null) {
                message.client_progress = dependency_1.trantorpb.ClientProgress.fromObject(data.client_progress);
            }
            return message;
        }
        toObject() {
            const data: {
                new_ordered_batch?: ReturnType<typeof NewOrderedBatch.prototype.toObject>;
                client_progress?: ReturnType<typeof dependency_1.trantorpb.ClientProgress.prototype.toObject>;
            } = {};
            if (this.new_ordered_batch != null) {
                data.new_ordered_batch = this.new_ordered_batch.toObject();
            }
            if (this.client_progress != null) {
                data.client_progress = this.client_progress.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_new_ordered_batch)
                writer.writeMessage(1, this.new_ordered_batch, () => this.new_ordered_batch.serialize(writer));
            if (this.has_client_progress)
                writer.writeMessage(2, this.client_progress, () => this.client_progress.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.new_ordered_batch, () => message.new_ordered_batch = NewOrderedBatch.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.client_progress, () => message.client_progress = dependency_1.trantorpb.ClientProgress.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class NewOrderedBatch extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            txs?: dependency_1.trantorpb.Transaction[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("txs" in data && data.txs != undefined) {
                    this.txs = data.txs;
                }
            }
        }
        get txs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.trantorpb.Transaction, 1) as dependency_1.trantorpb.Transaction[];
        }
        set txs(value: dependency_1.trantorpb.Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            txs?: ReturnType<typeof dependency_1.trantorpb.Transaction.prototype.toObject>[];
        }): NewOrderedBatch {
            const message = new NewOrderedBatch({});
            if (data.txs != null) {
                message.txs = data.txs.map(item => dependency_1.trantorpb.Transaction.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                txs?: ReturnType<typeof dependency_1.trantorpb.Transaction.prototype.toObject>[];
            } = {};
            if (this.txs != null) {
                data.txs = this.txs.map((item: dependency_1.trantorpb.Transaction) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.txs.length)
                writer.writeRepeatedMessage(1, this.txs, (item: dependency_1.trantorpb.Transaction) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewOrderedBatch {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewOrderedBatch();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.txs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.trantorpb.Transaction.deserialize(reader), dependency_1.trantorpb.Transaction));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewOrderedBatch {
            return NewOrderedBatch.deserialize(bytes);
        }
    }
}
