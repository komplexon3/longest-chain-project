/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: bcbpb/bcbpb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../mir/codegen_extensions";
import * as dependency_2 from "./../net/codegen_extensions";
import * as pb_1 from "google-protobuf";
export namespace bcbpb {
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            request?: BroadcastRequest;
            deliver?: never;
        } | {
            request?: never;
            deliver?: Deliver;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
                if ("deliver" in data && data.deliver != undefined) {
                    this.deliver = data.deliver;
                }
            }
        }
        get request() {
            return pb_1.Message.getWrapperField(this, BroadcastRequest, 1) as BroadcastRequest;
        }
        set request(value: BroadcastRequest) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get deliver() {
            return pb_1.Message.getWrapperField(this, Deliver, 2) as Deliver;
        }
        set deliver(value: Deliver) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_deliver() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "request" | "deliver";
            } = {
                0: "none",
                1: "request",
                2: "deliver"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            request?: ReturnType<typeof BroadcastRequest.prototype.toObject>;
            deliver?: ReturnType<typeof Deliver.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.request != null) {
                message.request = BroadcastRequest.fromObject(data.request);
            }
            if (data.deliver != null) {
                message.deliver = Deliver.fromObject(data.deliver);
            }
            return message;
        }
        toObject() {
            const data: {
                request?: ReturnType<typeof BroadcastRequest.prototype.toObject>;
                deliver?: ReturnType<typeof Deliver.prototype.toObject>;
            } = {};
            if (this.request != null) {
                data.request = this.request.toObject();
            }
            if (this.deliver != null) {
                data.deliver = this.deliver.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_request)
                writer.writeMessage(1, this.request, () => this.request.serialize(writer));
            if (this.has_deliver)
                writer.writeMessage(2, this.deliver, () => this.deliver.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.request, () => message.request = BroadcastRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.deliver, () => message.deliver = Deliver.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class BroadcastRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            data?: Uint8Array;
        }): BroadcastRequest {
            const message = new BroadcastRequest({});
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeBytes(1, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BroadcastRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BroadcastRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BroadcastRequest {
            return BroadcastRequest.deserialize(bytes);
        }
    }
    export class Deliver extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            data?: Uint8Array;
        }): Deliver {
            const message = new Deliver({});
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeBytes(1, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Deliver {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Deliver();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Deliver {
            return Deliver.deserialize(bytes);
        }
    }
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            start_message?: StartMessage;
            echo_message?: never;
            final_message?: never;
        } | {
            start_message?: never;
            echo_message?: EchoMessage;
            final_message?: never;
        } | {
            start_message?: never;
            echo_message?: never;
            final_message?: FinalMessage;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start_message" in data && data.start_message != undefined) {
                    this.start_message = data.start_message;
                }
                if ("echo_message" in data && data.echo_message != undefined) {
                    this.echo_message = data.echo_message;
                }
                if ("final_message" in data && data.final_message != undefined) {
                    this.final_message = data.final_message;
                }
            }
        }
        get start_message() {
            return pb_1.Message.getWrapperField(this, StartMessage, 1) as StartMessage;
        }
        set start_message(value: StartMessage) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_start_message() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get echo_message() {
            return pb_1.Message.getWrapperField(this, EchoMessage, 2) as EchoMessage;
        }
        set echo_message(value: EchoMessage) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_echo_message() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get final_message() {
            return pb_1.Message.getWrapperField(this, FinalMessage, 3) as FinalMessage;
        }
        set final_message(value: FinalMessage) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_final_message() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "start_message" | "echo_message" | "final_message";
            } = {
                0: "none",
                1: "start_message",
                2: "echo_message",
                3: "final_message"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            start_message?: ReturnType<typeof StartMessage.prototype.toObject>;
            echo_message?: ReturnType<typeof EchoMessage.prototype.toObject>;
            final_message?: ReturnType<typeof FinalMessage.prototype.toObject>;
        }): Message {
            const message = new Message({});
            if (data.start_message != null) {
                message.start_message = StartMessage.fromObject(data.start_message);
            }
            if (data.echo_message != null) {
                message.echo_message = EchoMessage.fromObject(data.echo_message);
            }
            if (data.final_message != null) {
                message.final_message = FinalMessage.fromObject(data.final_message);
            }
            return message;
        }
        toObject() {
            const data: {
                start_message?: ReturnType<typeof StartMessage.prototype.toObject>;
                echo_message?: ReturnType<typeof EchoMessage.prototype.toObject>;
                final_message?: ReturnType<typeof FinalMessage.prototype.toObject>;
            } = {};
            if (this.start_message != null) {
                data.start_message = this.start_message.toObject();
            }
            if (this.echo_message != null) {
                data.echo_message = this.echo_message.toObject();
            }
            if (this.final_message != null) {
                data.final_message = this.final_message.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_start_message)
                writer.writeMessage(1, this.start_message, () => this.start_message.serialize(writer));
            if (this.has_echo_message)
                writer.writeMessage(2, this.echo_message, () => this.echo_message.serialize(writer));
            if (this.has_final_message)
                writer.writeMessage(3, this.final_message, () => this.final_message.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.start_message, () => message.start_message = StartMessage.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.echo_message, () => message.echo_message = EchoMessage.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.final_message, () => message.final_message = FinalMessage.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    export class StartMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            data?: Uint8Array;
        }): StartMessage {
            const message = new StartMessage({});
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeBytes(1, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StartMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StartMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StartMessage {
            return StartMessage.deserialize(bytes);
        }
    }
    export class EchoMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signature?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            signature?: Uint8Array;
        }): EchoMessage {
            const message = new EchoMessage({});
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                signature?: Uint8Array;
            } = {};
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signature.length)
                writer.writeBytes(1, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EchoMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EchoMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signature = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EchoMessage {
            return EchoMessage.deserialize(bytes);
        }
    }
    export class FinalMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array;
            signers?: string[];
            signatures?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("signers" in data && data.signers != undefined) {
                    this.signers = data.signers;
                }
                if ("signatures" in data && data.signatures != undefined) {
                    this.signatures = data.signatures;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get signers() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set signers(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get signatures() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as Uint8Array[];
        }
        set signatures(value: Uint8Array[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            data?: Uint8Array;
            signers?: string[];
            signatures?: Uint8Array[];
        }): FinalMessage {
            const message = new FinalMessage({});
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.signers != null) {
                message.signers = data.signers;
            }
            if (data.signatures != null) {
                message.signatures = data.signatures;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
                signers?: string[];
                signatures?: Uint8Array[];
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.signers != null) {
                data.signers = this.signers;
            }
            if (this.signatures != null) {
                data.signatures = this.signatures;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeBytes(1, this.data);
            if (this.signers.length)
                writer.writeRepeatedString(2, this.signers);
            if (this.signatures.length)
                writer.writeRepeatedBytes(3, this.signatures);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FinalMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FinalMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FinalMessage {
            return FinalMessage.deserialize(bytes);
        }
    }
}
