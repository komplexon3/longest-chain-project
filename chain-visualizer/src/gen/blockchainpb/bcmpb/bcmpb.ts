/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: blockchainpb/bcmpb/bcmpb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../blockchainpb";
import * as dependency_2 from "./../../mir/codegen_extensions";
import * as pb_1 from "google-protobuf";
export namespace bcmpb {
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4]];
        constructor(data?: any[] | ({} & (({
            new_block?: NewBlock;
            new_chain?: never;
            get_block_request?: never;
            get_block_response?: never;
        } | {
            new_block?: never;
            new_chain?: NewChain;
            get_block_request?: never;
            get_block_response?: never;
        } | {
            new_block?: never;
            new_chain?: never;
            get_block_request?: GetBlockRequest;
            get_block_response?: never;
        } | {
            new_block?: never;
            new_chain?: never;
            get_block_request?: never;
            get_block_response?: GetBlockResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("new_block" in data && data.new_block != undefined) {
                    this.new_block = data.new_block;
                }
                if ("new_chain" in data && data.new_chain != undefined) {
                    this.new_chain = data.new_chain;
                }
                if ("get_block_request" in data && data.get_block_request != undefined) {
                    this.get_block_request = data.get_block_request;
                }
                if ("get_block_response" in data && data.get_block_response != undefined) {
                    this.get_block_response = data.get_block_response;
                }
            }
        }
        get new_block() {
            return pb_1.Message.getWrapperField(this, NewBlock, 1) as NewBlock;
        }
        set new_block(value: NewBlock) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_new_block() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get new_chain() {
            return pb_1.Message.getWrapperField(this, NewChain, 2) as NewChain;
        }
        set new_chain(value: NewChain) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_new_chain() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get get_block_request() {
            return pb_1.Message.getWrapperField(this, GetBlockRequest, 3) as GetBlockRequest;
        }
        set get_block_request(value: GetBlockRequest) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_get_block_request() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get get_block_response() {
            return pb_1.Message.getWrapperField(this, GetBlockResponse, 4) as GetBlockResponse;
        }
        set get_block_response(value: GetBlockResponse) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_get_block_response() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "new_block" | "new_chain" | "get_block_request" | "get_block_response";
            } = {
                0: "none",
                1: "new_block",
                2: "new_chain",
                3: "get_block_request",
                4: "get_block_response"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4])];
        }
        static fromObject(data: {
            new_block?: ReturnType<typeof NewBlock.prototype.toObject>;
            new_chain?: ReturnType<typeof NewChain.prototype.toObject>;
            get_block_request?: ReturnType<typeof GetBlockRequest.prototype.toObject>;
            get_block_response?: ReturnType<typeof GetBlockResponse.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.new_block != null) {
                message.new_block = NewBlock.fromObject(data.new_block);
            }
            if (data.new_chain != null) {
                message.new_chain = NewChain.fromObject(data.new_chain);
            }
            if (data.get_block_request != null) {
                message.get_block_request = GetBlockRequest.fromObject(data.get_block_request);
            }
            if (data.get_block_response != null) {
                message.get_block_response = GetBlockResponse.fromObject(data.get_block_response);
            }
            return message;
        }
        toObject() {
            const data: {
                new_block?: ReturnType<typeof NewBlock.prototype.toObject>;
                new_chain?: ReturnType<typeof NewChain.prototype.toObject>;
                get_block_request?: ReturnType<typeof GetBlockRequest.prototype.toObject>;
                get_block_response?: ReturnType<typeof GetBlockResponse.prototype.toObject>;
            } = {};
            if (this.new_block != null) {
                data.new_block = this.new_block.toObject();
            }
            if (this.new_chain != null) {
                data.new_chain = this.new_chain.toObject();
            }
            if (this.get_block_request != null) {
                data.get_block_request = this.get_block_request.toObject();
            }
            if (this.get_block_response != null) {
                data.get_block_response = this.get_block_response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_new_block)
                writer.writeMessage(1, this.new_block, () => this.new_block.serialize(writer));
            if (this.has_new_chain)
                writer.writeMessage(2, this.new_chain, () => this.new_chain.serialize(writer));
            if (this.has_get_block_request)
                writer.writeMessage(3, this.get_block_request, () => this.get_block_request.serialize(writer));
            if (this.has_get_block_response)
                writer.writeMessage(4, this.get_block_response, () => this.get_block_response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.new_block, () => message.new_block = NewBlock.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.new_chain, () => message.new_chain = NewChain.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.get_block_request, () => message.get_block_request = GetBlockRequest.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.get_block_response, () => message.get_block_response = GetBlockResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class NewBlock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block?: dependency_1.blockchainpb.Block;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_1.blockchainpb.Block, 1) as dependency_1.blockchainpb.Block;
        }
        set block(value: dependency_1.blockchainpb.Block) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            block?: ReturnType<typeof dependency_1.blockchainpb.Block.prototype.toObject>;
        }): NewBlock {
            const message = new NewBlock({});
            if (data.block != null) {
                message.block = dependency_1.blockchainpb.Block.fromObject(data.block);
            }
            return message;
        }
        toObject() {
            const data: {
                block?: ReturnType<typeof dependency_1.blockchainpb.Block.prototype.toObject>;
            } = {};
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_block)
                writer.writeMessage(1, this.block, () => this.block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewBlock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewBlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block, () => message.block = dependency_1.blockchainpb.Block.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewBlock {
            return NewBlock.deserialize(bytes);
        }
    }
    export class NewChain extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            blocks?: dependency_1.blockchainpb.Block[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("blocks" in data && data.blocks != undefined) {
                    this.blocks = data.blocks;
                }
            }
        }
        get blocks() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.blockchainpb.Block, 1) as dependency_1.blockchainpb.Block[];
        }
        set blocks(value: dependency_1.blockchainpb.Block[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            blocks?: ReturnType<typeof dependency_1.blockchainpb.Block.prototype.toObject>[];
        }): NewChain {
            const message = new NewChain({});
            if (data.blocks != null) {
                message.blocks = data.blocks.map(item => dependency_1.blockchainpb.Block.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                blocks?: ReturnType<typeof dependency_1.blockchainpb.Block.prototype.toObject>[];
            } = {};
            if (this.blocks != null) {
                data.blocks = this.blocks.map((item: dependency_1.blockchainpb.Block) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.blocks.length)
                writer.writeRepeatedMessage(1, this.blocks, (item: dependency_1.blockchainpb.Block) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewChain {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewChain();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.blocks, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.blockchainpb.Block.deserialize(reader), dependency_1.blockchainpb.Block));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewChain {
            return NewChain.deserialize(bytes);
        }
    }
    export class GetBlockRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_id?: number;
            source_module?: string;
            block_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("source_module" in data && data.source_module != undefined) {
                    this.source_module = data.source_module;
                }
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
            }
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get source_module() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set source_module(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get block_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set block_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            request_id?: number;
            source_module?: string;
            block_id?: number;
        }): GetBlockRequest {
            const message = new GetBlockRequest({});
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.source_module != null) {
                message.source_module = data.source_module;
            }
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            return message;
        }
        toObject() {
            const data: {
                request_id?: number;
                source_module?: string;
                block_id?: number;
            } = {};
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.source_module != null) {
                data.source_module = this.source_module;
            }
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_id != 0)
                writer.writeUint64(1, this.request_id);
            if (this.source_module.length)
                writer.writeString(2, this.source_module);
            if (this.block_id != 0)
                writer.writeUint64(3, this.block_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBlockRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBlockRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_id = reader.readUint64();
                        break;
                    case 2:
                        message.source_module = reader.readString();
                        break;
                    case 3:
                        message.block_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBlockRequest {
            return GetBlockRequest.deserialize(bytes);
        }
    }
    export class GetBlockResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_id?: number;
            found?: boolean;
            block?: dependency_1.blockchainpb.Block;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("found" in data && data.found != undefined) {
                    this.found = data.found;
                }
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get found() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set found(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_1.blockchainpb.Block, 3) as dependency_1.blockchainpb.Block;
        }
        set block(value: dependency_1.blockchainpb.Block) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            request_id?: number;
            found?: boolean;
            block?: ReturnType<typeof dependency_1.blockchainpb.Block.prototype.toObject>;
        }): GetBlockResponse {
            const message = new GetBlockResponse({});
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.found != null) {
                message.found = data.found;
            }
            if (data.block != null) {
                message.block = dependency_1.blockchainpb.Block.fromObject(data.block);
            }
            return message;
        }
        toObject() {
            const data: {
                request_id?: number;
                found?: boolean;
                block?: ReturnType<typeof dependency_1.blockchainpb.Block.prototype.toObject>;
            } = {};
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.found != null) {
                data.found = this.found;
            }
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_id != 0)
                writer.writeUint64(1, this.request_id);
            if (this.found != false)
                writer.writeBool(2, this.found);
            if (this.has_block)
                writer.writeMessage(3, this.block, () => this.block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBlockResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBlockResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_id = reader.readUint64();
                        break;
                    case 2:
                        message.found = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.block, () => message.block = dependency_1.blockchainpb.Block.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetBlockResponse {
            return GetBlockResponse.deserialize(bytes);
        }
    }
}
