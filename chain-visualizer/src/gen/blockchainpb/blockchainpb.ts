/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: blockchainpb/blockchainpb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./payloadpb/payloadpb";
import * as dependency_2 from "./statepb/statepb";
import * as pb_1 from "google-protobuf";
export namespace blockchainpb {
    export class Blocktree extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            blocks?: Block[];
            leaves?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("blocks" in data && data.blocks != undefined) {
                    this.blocks = data.blocks;
                }
                if ("leaves" in data && data.leaves != undefined) {
                    this.leaves = data.leaves;
                }
            }
        }
        get blocks() {
            return pb_1.Message.getRepeatedWrapperField(this, Block, 1) as Block[];
        }
        set blocks(value: Block[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get leaves() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set leaves(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            blocks?: ReturnType<typeof Block.prototype.toObject>[];
            leaves?: number[];
        }): Blocktree {
            const message = new Blocktree({});
            if (data.blocks != null) {
                message.blocks = data.blocks.map(item => Block.fromObject(item));
            }
            if (data.leaves != null) {
                message.leaves = data.leaves;
            }
            return message;
        }
        toObject() {
            const data: {
                blocks?: ReturnType<typeof Block.prototype.toObject>[];
                leaves?: number[];
            } = {};
            if (this.blocks != null) {
                data.blocks = this.blocks.map((item: Block) => item.toObject());
            }
            if (this.leaves != null) {
                data.leaves = this.leaves;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.blocks.length)
                writer.writeRepeatedMessage(1, this.blocks, (item: Block) => item.serialize(writer));
            if (this.leaves.length)
                writer.writePackedUint64(2, this.leaves);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Blocktree {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Blocktree();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.blocks, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Block.deserialize(reader), Block));
                        break;
                    case 2:
                        message.leaves = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Blocktree {
            return Blocktree.deserialize(bytes);
        }
    }
    export class Blockchain extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            blocks?: Block[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("blocks" in data && data.blocks != undefined) {
                    this.blocks = data.blocks;
                }
            }
        }
        get blocks() {
            return pb_1.Message.getRepeatedWrapperField(this, Block, 1) as Block[];
        }
        set blocks(value: Block[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            blocks?: ReturnType<typeof Block.prototype.toObject>[];
        }): Blockchain {
            const message = new Blockchain({});
            if (data.blocks != null) {
                message.blocks = data.blocks.map(item => Block.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                blocks?: ReturnType<typeof Block.prototype.toObject>[];
            } = {};
            if (this.blocks != null) {
                data.blocks = this.blocks.map((item: Block) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.blocks.length)
                writer.writeRepeatedMessage(1, this.blocks, (item: Block) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Blockchain {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Blockchain();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.blocks, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Block.deserialize(reader), Block));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Blockchain {
            return Blockchain.deserialize(bytes);
        }
    }
    export class Block extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block_id?: number;
            previous_block_id?: number;
            payload?: dependency_1.payloadpb.Payload;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
                if ("previous_block_id" in data && data.previous_block_id != undefined) {
                    this.previous_block_id = data.previous_block_id;
                }
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get block_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set block_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get previous_block_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set previous_block_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get payload() {
            return pb_1.Message.getWrapperField(this, dependency_1.payloadpb.Payload, 3) as dependency_1.payloadpb.Payload;
        }
        set payload(value: dependency_1.payloadpb.Payload) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_payload() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            block_id?: number;
            previous_block_id?: number;
            payload?: ReturnType<typeof dependency_1.payloadpb.Payload.prototype.toObject>;
            timestamp?: number;
        }): Block {
            const message = new Block({});
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            if (data.previous_block_id != null) {
                message.previous_block_id = data.previous_block_id;
            }
            if (data.payload != null) {
                message.payload = dependency_1.payloadpb.Payload.fromObject(data.payload);
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                block_id?: number;
                previous_block_id?: number;
                payload?: ReturnType<typeof dependency_1.payloadpb.Payload.prototype.toObject>;
                timestamp?: number;
            } = {};
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            if (this.previous_block_id != null) {
                data.previous_block_id = this.previous_block_id;
            }
            if (this.payload != null) {
                data.payload = this.payload.toObject();
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_id != 0)
                writer.writeUint64(1, this.block_id);
            if (this.previous_block_id != 0)
                writer.writeUint64(2, this.previous_block_id);
            if (this.has_payload)
                writer.writeMessage(3, this.payload, () => this.payload.serialize(writer));
            if (this.timestamp != 0)
                writer.writeInt64(4, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Block {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Block();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_id = reader.readUint64();
                        break;
                    case 2:
                        message.previous_block_id = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.payload, () => message.payload = dependency_1.payloadpb.Payload.deserialize(reader));
                        break;
                    case 4:
                        message.timestamp = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Block {
            return Block.deserialize(bytes);
        }
    }
    export class BlockInternal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block?: Block;
            state?: dependency_2.statepb.State;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
            }
        }
        get block() {
            return pb_1.Message.getWrapperField(this, Block, 1) as Block;
        }
        set block(value: Block) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get state() {
            return pb_1.Message.getWrapperField(this, dependency_2.statepb.State, 2) as dependency_2.statepb.State;
        }
        set state(value: dependency_2.statepb.State) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_state() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            block?: ReturnType<typeof Block.prototype.toObject>;
            state?: ReturnType<typeof dependency_2.statepb.State.prototype.toObject>;
        }): BlockInternal {
            const message = new BlockInternal({});
            if (data.block != null) {
                message.block = Block.fromObject(data.block);
            }
            if (data.state != null) {
                message.state = dependency_2.statepb.State.fromObject(data.state);
            }
            return message;
        }
        toObject() {
            const data: {
                block?: ReturnType<typeof Block.prototype.toObject>;
                state?: ReturnType<typeof dependency_2.statepb.State.prototype.toObject>;
            } = {};
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            if (this.state != null) {
                data.state = this.state.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_block)
                writer.writeMessage(1, this.block, () => this.block.serialize(writer));
            if (this.has_state)
                writer.writeMessage(2, this.state, () => this.state.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockInternal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockInternal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block, () => message.block = Block.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.state, () => message.state = dependency_2.statepb.State.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockInternal {
            return BlockInternal.deserialize(bytes);
        }
    }
}
