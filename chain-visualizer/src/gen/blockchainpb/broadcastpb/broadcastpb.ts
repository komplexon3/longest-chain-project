/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: blockchainpb/broadcastpb/broadcastpb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../blockchainpb";
import * as dependency_2 from "./../../mir/codegen_extensions";
import * as dependency_3 from "./../../net/codegen_extensions";
import * as pb_1 from "google-protobuf";
export namespace broadcastpb {
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            new_block?: NewBlock;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("new_block" in data && data.new_block != undefined) {
                    this.new_block = data.new_block;
                }
            }
        }
        get new_block() {
            return pb_1.Message.getWrapperField(this, NewBlock, 1) as NewBlock;
        }
        set new_block(value: NewBlock) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_new_block() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "new_block";
            } = {
                0: "none",
                1: "new_block"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            new_block?: ReturnType<typeof NewBlock.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.new_block != null) {
                message.new_block = NewBlock.fromObject(data.new_block);
            }
            return message;
        }
        toObject() {
            const data: {
                new_block?: ReturnType<typeof NewBlock.prototype.toObject>;
            } = {};
            if (this.new_block != null) {
                data.new_block = this.new_block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_new_block)
                writer.writeMessage(1, this.new_block, () => this.new_block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.new_block, () => message.new_block = NewBlock.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class NewBlock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block?: dependency_1.blockchainpb.Block;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_1.blockchainpb.Block, 1) as dependency_1.blockchainpb.Block;
        }
        set block(value: dependency_1.blockchainpb.Block) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            block?: ReturnType<typeof dependency_1.blockchainpb.Block.prototype.toObject>;
        }): NewBlock {
            const message = new NewBlock({});
            if (data.block != null) {
                message.block = dependency_1.blockchainpb.Block.fromObject(data.block);
            }
            return message;
        }
        toObject() {
            const data: {
                block?: ReturnType<typeof dependency_1.blockchainpb.Block.prototype.toObject>;
            } = {};
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_block)
                writer.writeMessage(1, this.block, () => this.block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewBlock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewBlock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block, () => message.block = dependency_1.blockchainpb.Block.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewBlock {
            return NewBlock.deserialize(bytes);
        }
    }
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            new_block?: NewBlockMessage;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("new_block" in data && data.new_block != undefined) {
                    this.new_block = data.new_block;
                }
            }
        }
        get new_block() {
            return pb_1.Message.getWrapperField(this, NewBlockMessage, 1) as NewBlockMessage;
        }
        set new_block(value: NewBlockMessage) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_new_block() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "new_block";
            } = {
                0: "none",
                1: "new_block"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            new_block?: ReturnType<typeof NewBlockMessage.prototype.toObject>;
        }): Message {
            const message = new Message({});
            if (data.new_block != null) {
                message.new_block = NewBlockMessage.fromObject(data.new_block);
            }
            return message;
        }
        toObject() {
            const data: {
                new_block?: ReturnType<typeof NewBlockMessage.prototype.toObject>;
            } = {};
            if (this.new_block != null) {
                data.new_block = this.new_block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_new_block)
                writer.writeMessage(1, this.new_block, () => this.new_block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.new_block, () => message.new_block = NewBlockMessage.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    export class NewBlockMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block?: dependency_1.blockchainpb.Block;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_1.blockchainpb.Block, 1) as dependency_1.blockchainpb.Block;
        }
        set block(value: dependency_1.blockchainpb.Block) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            block?: ReturnType<typeof dependency_1.blockchainpb.Block.prototype.toObject>;
        }): NewBlockMessage {
            const message = new NewBlockMessage({});
            if (data.block != null) {
                message.block = dependency_1.blockchainpb.Block.fromObject(data.block);
            }
            return message;
        }
        toObject() {
            const data: {
                block?: ReturnType<typeof dependency_1.blockchainpb.Block.prototype.toObject>;
            } = {};
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_block)
                writer.writeMessage(1, this.block, () => this.block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewBlockMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewBlockMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block, () => message.block = dependency_1.blockchainpb.Block.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewBlockMessage {
            return NewBlockMessage.deserialize(bytes);
        }
    }
}
