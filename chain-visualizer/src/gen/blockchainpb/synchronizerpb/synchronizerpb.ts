/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: blockchainpb/synchronizerpb/synchronizerpb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../blockchainpb";
import * as dependency_2 from "./../../mir/codegen_extensions";
import * as dependency_3 from "./../../net/codegen_extensions";
import * as pb_1 from "google-protobuf";
export namespace synchronizerpb {
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            sync_request?: SyncRequest;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sync_request" in data && data.sync_request != undefined) {
                    this.sync_request = data.sync_request;
                }
            }
        }
        get sync_request() {
            return pb_1.Message.getWrapperField(this, SyncRequest, 1) as SyncRequest;
        }
        set sync_request(value: SyncRequest) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_sync_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "sync_request";
            } = {
                0: "none",
                1: "sync_request"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            sync_request?: ReturnType<typeof SyncRequest.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.sync_request != null) {
                message.sync_request = SyncRequest.fromObject(data.sync_request);
            }
            return message;
        }
        toObject() {
            const data: {
                sync_request?: ReturnType<typeof SyncRequest.prototype.toObject>;
            } = {};
            if (this.sync_request != null) {
                data.sync_request = this.sync_request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_sync_request)
                writer.writeMessage(1, this.sync_request, () => this.sync_request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.sync_request, () => message.sync_request = SyncRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class SyncRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            orphan_block?: dependency_1.blockchainpb.Block;
            leave_ids?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("orphan_block" in data && data.orphan_block != undefined) {
                    this.orphan_block = data.orphan_block;
                }
                if ("leave_ids" in data && data.leave_ids != undefined) {
                    this.leave_ids = data.leave_ids;
                }
            }
        }
        get orphan_block() {
            return pb_1.Message.getWrapperField(this, dependency_1.blockchainpb.Block, 1) as dependency_1.blockchainpb.Block;
        }
        set orphan_block(value: dependency_1.blockchainpb.Block) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_orphan_block() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get leave_ids() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set leave_ids(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            orphan_block?: ReturnType<typeof dependency_1.blockchainpb.Block.prototype.toObject>;
            leave_ids?: number[];
        }): SyncRequest {
            const message = new SyncRequest({});
            if (data.orphan_block != null) {
                message.orphan_block = dependency_1.blockchainpb.Block.fromObject(data.orphan_block);
            }
            if (data.leave_ids != null) {
                message.leave_ids = data.leave_ids;
            }
            return message;
        }
        toObject() {
            const data: {
                orphan_block?: ReturnType<typeof dependency_1.blockchainpb.Block.prototype.toObject>;
                leave_ids?: number[];
            } = {};
            if (this.orphan_block != null) {
                data.orphan_block = this.orphan_block.toObject();
            }
            if (this.leave_ids != null) {
                data.leave_ids = this.leave_ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_orphan_block)
                writer.writeMessage(1, this.orphan_block, () => this.orphan_block.serialize(writer));
            if (this.leave_ids.length)
                writer.writePackedUint64(2, this.leave_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SyncRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.orphan_block, () => message.orphan_block = dependency_1.blockchainpb.Block.deserialize(reader));
                        break;
                    case 2:
                        message.leave_ids = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SyncRequest {
            return SyncRequest.deserialize(bytes);
        }
    }
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            block_request?: BlockRequest;
            block_response?: never;
        } | {
            block_request?: never;
            block_response?: BlockResponse;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_request" in data && data.block_request != undefined) {
                    this.block_request = data.block_request;
                }
                if ("block_response" in data && data.block_response != undefined) {
                    this.block_response = data.block_response;
                }
            }
        }
        get block_request() {
            return pb_1.Message.getWrapperField(this, BlockRequest, 1) as BlockRequest;
        }
        set block_request(value: BlockRequest) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_block_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get block_response() {
            return pb_1.Message.getWrapperField(this, BlockResponse, 2) as BlockResponse;
        }
        set block_response(value: BlockResponse) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_block_response() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "block_request" | "block_response";
            } = {
                0: "none",
                1: "block_request",
                2: "block_response"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            block_request?: ReturnType<typeof BlockRequest.prototype.toObject>;
            block_response?: ReturnType<typeof BlockResponse.prototype.toObject>;
        }): Message {
            const message = new Message({});
            if (data.block_request != null) {
                message.block_request = BlockRequest.fromObject(data.block_request);
            }
            if (data.block_response != null) {
                message.block_response = BlockResponse.fromObject(data.block_response);
            }
            return message;
        }
        toObject() {
            const data: {
                block_request?: ReturnType<typeof BlockRequest.prototype.toObject>;
                block_response?: ReturnType<typeof BlockResponse.prototype.toObject>;
            } = {};
            if (this.block_request != null) {
                data.block_request = this.block_request.toObject();
            }
            if (this.block_response != null) {
                data.block_response = this.block_response.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_block_request)
                writer.writeMessage(1, this.block_request, () => this.block_request.serialize(writer));
            if (this.has_block_response)
                writer.writeMessage(2, this.block_response, () => this.block_response.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.block_request, () => message.block_request = BlockRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.block_response, () => message.block_response = BlockResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    export class BlockRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_id?: number;
            block_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("block_id" in data && data.block_id != undefined) {
                    this.block_id = data.block_id;
                }
            }
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get block_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set block_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            request_id?: number;
            block_id?: number;
        }): BlockRequest {
            const message = new BlockRequest({});
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.block_id != null) {
                message.block_id = data.block_id;
            }
            return message;
        }
        toObject() {
            const data: {
                request_id?: number;
                block_id?: number;
            } = {};
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.block_id != null) {
                data.block_id = this.block_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_id != 0)
                writer.writeUint64(1, this.request_id);
            if (this.block_id != 0)
                writer.writeUint64(2, this.block_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_id = reader.readUint64();
                        break;
                    case 2:
                        message.block_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockRequest {
            return BlockRequest.deserialize(bytes);
        }
    }
    export class BlockResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_id?: number;
            found?: boolean;
            block?: dependency_1.blockchainpb.Block;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
                if ("found" in data && data.found != undefined) {
                    this.found = data.found;
                }
                if ("block" in data && data.block != undefined) {
                    this.block = data.block;
                }
            }
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set request_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get found() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set found(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get block() {
            return pb_1.Message.getWrapperField(this, dependency_1.blockchainpb.Block, 3) as dependency_1.blockchainpb.Block;
        }
        set block(value: dependency_1.blockchainpb.Block) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_block() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            request_id?: number;
            found?: boolean;
            block?: ReturnType<typeof dependency_1.blockchainpb.Block.prototype.toObject>;
        }): BlockResponse {
            const message = new BlockResponse({});
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            if (data.found != null) {
                message.found = data.found;
            }
            if (data.block != null) {
                message.block = dependency_1.blockchainpb.Block.fromObject(data.block);
            }
            return message;
        }
        toObject() {
            const data: {
                request_id?: number;
                found?: boolean;
                block?: ReturnType<typeof dependency_1.blockchainpb.Block.prototype.toObject>;
            } = {};
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            if (this.found != null) {
                data.found = this.found;
            }
            if (this.block != null) {
                data.block = this.block.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_id != 0)
                writer.writeUint64(1, this.request_id);
            if (this.found != false)
                writer.writeBool(2, this.found);
            if (this.has_block)
                writer.writeMessage(3, this.block, () => this.block.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_id = reader.readUint64();
                        break;
                    case 2:
                        message.found = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.block, () => message.block = dependency_1.blockchainpb.Block.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlockResponse {
            return BlockResponse.deserialize(bytes);
        }
    }
}
