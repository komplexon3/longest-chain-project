/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: blockchainpb/tpmpb/tpmpb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../mir/codegen_extensions";
import * as pb_1 from "google-protobuf";
export namespace tpmpb {
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            new_block_request?: NewBlockRequest;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("new_block_request" in data && data.new_block_request != undefined) {
                    this.new_block_request = data.new_block_request;
                }
            }
        }
        get new_block_request() {
            return pb_1.Message.getWrapperField(this, NewBlockRequest, 1) as NewBlockRequest;
        }
        set new_block_request(value: NewBlockRequest) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_new_block_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "new_block_request";
            } = {
                0: "none",
                1: "new_block_request"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            new_block_request?: ReturnType<typeof NewBlockRequest.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.new_block_request != null) {
                message.new_block_request = NewBlockRequest.fromObject(data.new_block_request);
            }
            return message;
        }
        toObject() {
            const data: {
                new_block_request?: ReturnType<typeof NewBlockRequest.prototype.toObject>;
            } = {};
            if (this.new_block_request != null) {
                data.new_block_request = this.new_block_request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_new_block_request)
                writer.writeMessage(1, this.new_block_request, () => this.new_block_request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.new_block_request, () => message.new_block_request = NewBlockRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class NewBlockRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            head_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("head_id" in data && data.head_id != undefined) {
                    this.head_id = data.head_id;
                }
            }
        }
        get head_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set head_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            head_id?: number;
        }): NewBlockRequest {
            const message = new NewBlockRequest({});
            if (data.head_id != null) {
                message.head_id = data.head_id;
            }
            return message;
        }
        toObject() {
            const data: {
                head_id?: number;
            } = {};
            if (this.head_id != null) {
                data.head_id = this.head_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.head_id != 0)
                writer.writeUint64(1, this.head_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewBlockRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewBlockRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.head_id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewBlockRequest {
            return NewBlockRequest.deserialize(bytes);
        }
    }
}
