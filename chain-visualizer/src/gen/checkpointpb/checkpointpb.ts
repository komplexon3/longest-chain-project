/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: checkpointpb/checkpointpb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../trantorpb/trantorpb";
import * as dependency_2 from "./../mir/codegen_extensions";
import * as dependency_3 from "./../net/codegen_extensions";
import * as pb_1 from "google-protobuf";
export namespace checkpointpb {
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            checkpoint?: Checkpoint;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("checkpoint" in data && data.checkpoint != undefined) {
                    this.checkpoint = data.checkpoint;
                }
            }
        }
        get checkpoint() {
            return pb_1.Message.getWrapperField(this, Checkpoint, 1) as Checkpoint;
        }
        set checkpoint(value: Checkpoint) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_checkpoint() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "checkpoint";
            } = {
                0: "none",
                1: "checkpoint"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            checkpoint?: ReturnType<typeof Checkpoint.prototype.toObject>;
        }): Message {
            const message = new Message({});
            if (data.checkpoint != null) {
                message.checkpoint = Checkpoint.fromObject(data.checkpoint);
            }
            return message;
        }
        toObject() {
            const data: {
                checkpoint?: ReturnType<typeof Checkpoint.prototype.toObject>;
            } = {};
            if (this.checkpoint != null) {
                data.checkpoint = this.checkpoint.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_checkpoint)
                writer.writeMessage(1, this.checkpoint, () => this.checkpoint.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.checkpoint, () => message.checkpoint = Checkpoint.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    export class Checkpoint extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            epoch?: number;
            sn?: number;
            snapshotHash?: Uint8Array;
            signature?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("epoch" in data && data.epoch != undefined) {
                    this.epoch = data.epoch;
                }
                if ("sn" in data && data.sn != undefined) {
                    this.sn = data.sn;
                }
                if ("snapshotHash" in data && data.snapshotHash != undefined) {
                    this.snapshotHash = data.snapshotHash;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get epoch() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set epoch(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get sn() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get snapshotHash() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set snapshotHash(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            epoch?: number;
            sn?: number;
            snapshotHash?: Uint8Array;
            signature?: Uint8Array;
        }): Checkpoint {
            const message = new Checkpoint({});
            if (data.epoch != null) {
                message.epoch = data.epoch;
            }
            if (data.sn != null) {
                message.sn = data.sn;
            }
            if (data.snapshotHash != null) {
                message.snapshotHash = data.snapshotHash;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                epoch?: number;
                sn?: number;
                snapshotHash?: Uint8Array;
                signature?: Uint8Array;
            } = {};
            if (this.epoch != null) {
                data.epoch = this.epoch;
            }
            if (this.sn != null) {
                data.sn = this.sn;
            }
            if (this.snapshotHash != null) {
                data.snapshotHash = this.snapshotHash;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.epoch != 0)
                writer.writeUint64(1, this.epoch);
            if (this.sn != 0)
                writer.writeUint64(2, this.sn);
            if (this.snapshotHash.length)
                writer.writeBytes(3, this.snapshotHash);
            if (this.signature.length)
                writer.writeBytes(4, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Checkpoint {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Checkpoint();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.epoch = reader.readUint64();
                        break;
                    case 2:
                        message.sn = reader.readUint64();
                        break;
                    case 3:
                        message.snapshotHash = reader.readBytes();
                        break;
                    case 4:
                        message.signature = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Checkpoint {
            return Checkpoint.deserialize(bytes);
        }
    }
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            epoch_config?: dependency_1.trantorpb.EpochConfig;
            stable_checkpoint?: never;
            epoch_progress?: never;
        } | {
            epoch_config?: never;
            stable_checkpoint?: StableCheckpoint;
            epoch_progress?: never;
        } | {
            epoch_config?: never;
            stable_checkpoint?: never;
            epoch_progress?: EpochProgress;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("epoch_config" in data && data.epoch_config != undefined) {
                    this.epoch_config = data.epoch_config;
                }
                if ("stable_checkpoint" in data && data.stable_checkpoint != undefined) {
                    this.stable_checkpoint = data.stable_checkpoint;
                }
                if ("epoch_progress" in data && data.epoch_progress != undefined) {
                    this.epoch_progress = data.epoch_progress;
                }
            }
        }
        get epoch_config() {
            return pb_1.Message.getWrapperField(this, dependency_1.trantorpb.EpochConfig, 1) as dependency_1.trantorpb.EpochConfig;
        }
        set epoch_config(value: dependency_1.trantorpb.EpochConfig) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_epoch_config() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get stable_checkpoint() {
            return pb_1.Message.getWrapperField(this, StableCheckpoint, 2) as StableCheckpoint;
        }
        set stable_checkpoint(value: StableCheckpoint) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_stable_checkpoint() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get epoch_progress() {
            return pb_1.Message.getWrapperField(this, EpochProgress, 3) as EpochProgress;
        }
        set epoch_progress(value: EpochProgress) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_epoch_progress() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "epoch_config" | "stable_checkpoint" | "epoch_progress";
            } = {
                0: "none",
                1: "epoch_config",
                2: "stable_checkpoint",
                3: "epoch_progress"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            epoch_config?: ReturnType<typeof dependency_1.trantorpb.EpochConfig.prototype.toObject>;
            stable_checkpoint?: ReturnType<typeof StableCheckpoint.prototype.toObject>;
            epoch_progress?: ReturnType<typeof EpochProgress.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.epoch_config != null) {
                message.epoch_config = dependency_1.trantorpb.EpochConfig.fromObject(data.epoch_config);
            }
            if (data.stable_checkpoint != null) {
                message.stable_checkpoint = StableCheckpoint.fromObject(data.stable_checkpoint);
            }
            if (data.epoch_progress != null) {
                message.epoch_progress = EpochProgress.fromObject(data.epoch_progress);
            }
            return message;
        }
        toObject() {
            const data: {
                epoch_config?: ReturnType<typeof dependency_1.trantorpb.EpochConfig.prototype.toObject>;
                stable_checkpoint?: ReturnType<typeof StableCheckpoint.prototype.toObject>;
                epoch_progress?: ReturnType<typeof EpochProgress.prototype.toObject>;
            } = {};
            if (this.epoch_config != null) {
                data.epoch_config = this.epoch_config.toObject();
            }
            if (this.stable_checkpoint != null) {
                data.stable_checkpoint = this.stable_checkpoint.toObject();
            }
            if (this.epoch_progress != null) {
                data.epoch_progress = this.epoch_progress.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_epoch_config)
                writer.writeMessage(1, this.epoch_config, () => this.epoch_config.serialize(writer));
            if (this.has_stable_checkpoint)
                writer.writeMessage(2, this.stable_checkpoint, () => this.stable_checkpoint.serialize(writer));
            if (this.has_epoch_progress)
                writer.writeMessage(3, this.epoch_progress, () => this.epoch_progress.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.epoch_config, () => message.epoch_config = dependency_1.trantorpb.EpochConfig.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.stable_checkpoint, () => message.stable_checkpoint = StableCheckpoint.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.epoch_progress, () => message.epoch_progress = EpochProgress.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class StableCheckpoint extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sn?: number;
            snapshot?: dependency_1.trantorpb.StateSnapshot;
            cert?: Map<string, Uint8Array>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sn" in data && data.sn != undefined) {
                    this.sn = data.sn;
                }
                if ("snapshot" in data && data.snapshot != undefined) {
                    this.snapshot = data.snapshot;
                }
                if ("cert" in data && data.cert != undefined) {
                    this.cert = data.cert;
                }
            }
            if (!this.cert)
                this.cert = new Map();
        }
        get sn() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get snapshot() {
            return pb_1.Message.getWrapperField(this, dependency_1.trantorpb.StateSnapshot, 2) as dependency_1.trantorpb.StateSnapshot;
        }
        set snapshot(value: dependency_1.trantorpb.StateSnapshot) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_snapshot() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get cert() {
            return pb_1.Message.getField(this, 3) as any as Map<string, Uint8Array>;
        }
        set cert(value: Map<string, Uint8Array>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        static fromObject(data: {
            sn?: number;
            snapshot?: ReturnType<typeof dependency_1.trantorpb.StateSnapshot.prototype.toObject>;
            cert?: {
                [key: string]: Uint8Array;
            };
        }): StableCheckpoint {
            const message = new StableCheckpoint({});
            if (data.sn != null) {
                message.sn = data.sn;
            }
            if (data.snapshot != null) {
                message.snapshot = dependency_1.trantorpb.StateSnapshot.fromObject(data.snapshot);
            }
            if (typeof data.cert == "object") {
                message.cert = new Map(Object.entries(data.cert));
            }
            return message;
        }
        toObject() {
            const data: {
                sn?: number;
                snapshot?: ReturnType<typeof dependency_1.trantorpb.StateSnapshot.prototype.toObject>;
                cert?: {
                    [key: string]: Uint8Array;
                };
            } = {};
            if (this.sn != null) {
                data.sn = this.sn;
            }
            if (this.snapshot != null) {
                data.snapshot = this.snapshot.toObject();
            }
            if (this.cert != null) {
                data.cert = (Object.fromEntries)(this.cert);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn != 0)
                writer.writeUint64(1, this.sn);
            if (this.has_snapshot)
                writer.writeMessage(2, this.snapshot, () => this.snapshot.serialize(writer));
            for (const [key, value] of this.cert) {
                writer.writeMessage(3, this.cert, () => {
                    writer.writeString(1, key);
                    writer.writeBytes(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StableCheckpoint {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StableCheckpoint();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.snapshot, () => message.snapshot = dependency_1.trantorpb.StateSnapshot.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.cert as any, reader, reader.readString, reader.readBytes));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StableCheckpoint {
            return StableCheckpoint.deserialize(bytes);
        }
    }
    export class EpochProgress extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            node_id?: string;
            epoch?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("node_id" in data && data.node_id != undefined) {
                    this.node_id = data.node_id;
                }
                if ("epoch" in data && data.epoch != undefined) {
                    this.epoch = data.epoch;
                }
            }
        }
        get node_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set node_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get epoch() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set epoch(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            node_id?: string;
            epoch?: number;
        }): EpochProgress {
            const message = new EpochProgress({});
            if (data.node_id != null) {
                message.node_id = data.node_id;
            }
            if (data.epoch != null) {
                message.epoch = data.epoch;
            }
            return message;
        }
        toObject() {
            const data: {
                node_id?: string;
                epoch?: number;
            } = {};
            if (this.node_id != null) {
                data.node_id = this.node_id;
            }
            if (this.epoch != null) {
                data.epoch = this.epoch;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.node_id.length)
                writer.writeString(1, this.node_id);
            if (this.epoch != 0)
                writer.writeUint64(2, this.epoch);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EpochProgress {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EpochProgress();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.node_id = reader.readString();
                        break;
                    case 2:
                        message.epoch = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EpochProgress {
            return EpochProgress.deserialize(bytes);
        }
    }
    export class InstanceParams extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            membership?: dependency_1.trantorpb.Membership;
            resend_period?: number;
            leader_policy_data?: Uint8Array;
            epoch_config?: dependency_1.trantorpb.EpochConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("membership" in data && data.membership != undefined) {
                    this.membership = data.membership;
                }
                if ("resend_period" in data && data.resend_period != undefined) {
                    this.resend_period = data.resend_period;
                }
                if ("leader_policy_data" in data && data.leader_policy_data != undefined) {
                    this.leader_policy_data = data.leader_policy_data;
                }
                if ("epoch_config" in data && data.epoch_config != undefined) {
                    this.epoch_config = data.epoch_config;
                }
            }
        }
        get membership() {
            return pb_1.Message.getWrapperField(this, dependency_1.trantorpb.Membership, 1) as dependency_1.trantorpb.Membership;
        }
        set membership(value: dependency_1.trantorpb.Membership) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_membership() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get resend_period() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set resend_period(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get leader_policy_data() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set leader_policy_data(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get epoch_config() {
            return pb_1.Message.getWrapperField(this, dependency_1.trantorpb.EpochConfig, 4) as dependency_1.trantorpb.EpochConfig;
        }
        set epoch_config(value: dependency_1.trantorpb.EpochConfig) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_epoch_config() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            membership?: ReturnType<typeof dependency_1.trantorpb.Membership.prototype.toObject>;
            resend_period?: number;
            leader_policy_data?: Uint8Array;
            epoch_config?: ReturnType<typeof dependency_1.trantorpb.EpochConfig.prototype.toObject>;
        }): InstanceParams {
            const message = new InstanceParams({});
            if (data.membership != null) {
                message.membership = dependency_1.trantorpb.Membership.fromObject(data.membership);
            }
            if (data.resend_period != null) {
                message.resend_period = data.resend_period;
            }
            if (data.leader_policy_data != null) {
                message.leader_policy_data = data.leader_policy_data;
            }
            if (data.epoch_config != null) {
                message.epoch_config = dependency_1.trantorpb.EpochConfig.fromObject(data.epoch_config);
            }
            return message;
        }
        toObject() {
            const data: {
                membership?: ReturnType<typeof dependency_1.trantorpb.Membership.prototype.toObject>;
                resend_period?: number;
                leader_policy_data?: Uint8Array;
                epoch_config?: ReturnType<typeof dependency_1.trantorpb.EpochConfig.prototype.toObject>;
            } = {};
            if (this.membership != null) {
                data.membership = this.membership.toObject();
            }
            if (this.resend_period != null) {
                data.resend_period = this.resend_period;
            }
            if (this.leader_policy_data != null) {
                data.leader_policy_data = this.leader_policy_data;
            }
            if (this.epoch_config != null) {
                data.epoch_config = this.epoch_config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_membership)
                writer.writeMessage(1, this.membership, () => this.membership.serialize(writer));
            if (this.resend_period != 0)
                writer.writeUint64(2, this.resend_period);
            if (this.leader_policy_data.length)
                writer.writeBytes(3, this.leader_policy_data);
            if (this.has_epoch_config)
                writer.writeMessage(4, this.epoch_config, () => this.epoch_config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InstanceParams {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InstanceParams();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.membership, () => message.membership = dependency_1.trantorpb.Membership.deserialize(reader));
                        break;
                    case 2:
                        message.resend_period = reader.readUint64();
                        break;
                    case 3:
                        message.leader_policy_data = reader.readBytes();
                        break;
                    case 4:
                        reader.readMessage(message.epoch_config, () => message.epoch_config = dependency_1.trantorpb.EpochConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InstanceParams {
            return InstanceParams.deserialize(bytes);
        }
    }
}
