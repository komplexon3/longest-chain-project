/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: eventpb/eventpb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../apppb/apppb";
import * as dependency_2 from "./../isspb/isspb";
import * as dependency_3 from "./../google/protobuf/wrappers";
import * as dependency_4 from "./../bcbpb/bcbpb";
import * as dependency_5 from "./../mempoolpb/mempoolpb";
import * as dependency_6 from "./../availabilitypb/availabilitypb";
import * as dependency_7 from "./../factorypb/factorypb";
import * as dependency_8 from "./../availabilitypb/batchdbpb/batchdbpb";
import * as dependency_9 from "./../batchfetcherpb/batchfetcherpb";
import * as dependency_10 from "./../threshcryptopb/threshcryptopb";
import * as dependency_11 from "./../pingpongpb/pingpongpb";
import * as dependency_12 from "./../checkpointpb/checkpointpb";
import * as dependency_13 from "./../checkpointpb/chkpvalidatorpb/chkpvalidatorpb";
import * as dependency_14 from "./../ordererpb/ordererpb";
import * as dependency_15 from "./../ordererpb/pprepvalidatorpb/pprepvalidatorpb";
import * as dependency_16 from "./../hasherpb/hasherpb";
import * as dependency_17 from "./../cryptopb/cryptopb";
import * as dependency_18 from "./../transportpb/transportpb";
import * as dependency_19 from "./../testerpb/testerpb";
import * as dependency_20 from "./../blockchainpb/bcmpb/bcmpb";
import * as dependency_21 from "./../blockchainpb/minerpb/minerpb";
import * as dependency_22 from "./../blockchainpb/tpmpb/tpmpb";
import * as dependency_23 from "./../blockchainpb/communicationpb/communicationpb";
import * as dependency_24 from "./../blockchainpb/synchronizerpb/synchronizerpb";
import * as dependency_25 from "./../blockchainpb/interceptorpb/interceptorpb";
import * as dependency_26 from "./../mir/codegen_extensions";
import * as pb_1 from "google-protobuf";
export namespace eventpb {
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 200, 201, 202, 203, 204, 205, 210, 301, 302, 303]];
        constructor(data?: any[] | ({
            dest_module?: string;
            next?: Event[];
        } & (({
            init?: Init;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: TimerEvent;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: dependency_16.hasherpb.Event;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: dependency_4.bcbpb.Event;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: dependency_5.mempoolpb.Event;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: dependency_6.availabilitypb.Event;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: dependency_8.batchdbpb.Event;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: dependency_9.batchfetcherpb.Event;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: dependency_10.threshcryptopb.Event;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: dependency_12.checkpointpb.Event;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: dependency_7.factorypb.Event;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: dependency_2.isspb.Event;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: dependency_14.ordererpb.Event;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: dependency_17.cryptopb.Event;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: dependency_1.apppb.Event;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: dependency_18.transportpb.Event;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: dependency_13.chkpvalidatorpb.Event;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: dependency_15.pprepvalidatorpb.Event;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: dependency_11.pingpongpb.Event;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: dependency_20.bcmpb.Event;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: dependency_21.minerpb.Event;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: dependency_22.tpmpb.Event;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: dependency_23.communicationpb.Event;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: dependency_24.synchronizerpb.Event;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: dependency_25.interceptorpb.Event;
            testingString?: never;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: dependency_3.google.protobuf.StringValue;
            testingUint?: never;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: dependency_3.google.protobuf.UInt64Value;
            tester?: never;
        } | {
            init?: never;
            timer?: never;
            hasher?: never;
            bcb?: never;
            mempool?: never;
            availability?: never;
            batch_db?: never;
            batch_fetcher?: never;
            thresh_crypto?: never;
            checkpoint?: never;
            factory?: never;
            iss?: never;
            orderer?: never;
            crypto?: never;
            app?: never;
            transport?: never;
            chkp_validator?: never;
            pprep_valiadtor?: never;
            ping_pong?: never;
            bcm?: never;
            miner?: never;
            tpm?: never;
            communication?: never;
            synchronizer?: never;
            bcinterceptor?: never;
            testingString?: never;
            testingUint?: never;
            tester?: dependency_19.testerpb.Tester;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [400], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("dest_module" in data && data.dest_module != undefined) {
                    this.dest_module = data.dest_module;
                }
                if ("init" in data && data.init != undefined) {
                    this.init = data.init;
                }
                if ("timer" in data && data.timer != undefined) {
                    this.timer = data.timer;
                }
                if ("hasher" in data && data.hasher != undefined) {
                    this.hasher = data.hasher;
                }
                if ("bcb" in data && data.bcb != undefined) {
                    this.bcb = data.bcb;
                }
                if ("mempool" in data && data.mempool != undefined) {
                    this.mempool = data.mempool;
                }
                if ("availability" in data && data.availability != undefined) {
                    this.availability = data.availability;
                }
                if ("batch_db" in data && data.batch_db != undefined) {
                    this.batch_db = data.batch_db;
                }
                if ("batch_fetcher" in data && data.batch_fetcher != undefined) {
                    this.batch_fetcher = data.batch_fetcher;
                }
                if ("thresh_crypto" in data && data.thresh_crypto != undefined) {
                    this.thresh_crypto = data.thresh_crypto;
                }
                if ("checkpoint" in data && data.checkpoint != undefined) {
                    this.checkpoint = data.checkpoint;
                }
                if ("factory" in data && data.factory != undefined) {
                    this.factory = data.factory;
                }
                if ("iss" in data && data.iss != undefined) {
                    this.iss = data.iss;
                }
                if ("orderer" in data && data.orderer != undefined) {
                    this.orderer = data.orderer;
                }
                if ("crypto" in data && data.crypto != undefined) {
                    this.crypto = data.crypto;
                }
                if ("app" in data && data.app != undefined) {
                    this.app = data.app;
                }
                if ("transport" in data && data.transport != undefined) {
                    this.transport = data.transport;
                }
                if ("chkp_validator" in data && data.chkp_validator != undefined) {
                    this.chkp_validator = data.chkp_validator;
                }
                if ("pprep_valiadtor" in data && data.pprep_valiadtor != undefined) {
                    this.pprep_valiadtor = data.pprep_valiadtor;
                }
                if ("ping_pong" in data && data.ping_pong != undefined) {
                    this.ping_pong = data.ping_pong;
                }
                if ("bcm" in data && data.bcm != undefined) {
                    this.bcm = data.bcm;
                }
                if ("miner" in data && data.miner != undefined) {
                    this.miner = data.miner;
                }
                if ("tpm" in data && data.tpm != undefined) {
                    this.tpm = data.tpm;
                }
                if ("communication" in data && data.communication != undefined) {
                    this.communication = data.communication;
                }
                if ("synchronizer" in data && data.synchronizer != undefined) {
                    this.synchronizer = data.synchronizer;
                }
                if ("bcinterceptor" in data && data.bcinterceptor != undefined) {
                    this.bcinterceptor = data.bcinterceptor;
                }
                if ("testingString" in data && data.testingString != undefined) {
                    this.testingString = data.testingString;
                }
                if ("testingUint" in data && data.testingUint != undefined) {
                    this.testingUint = data.testingUint;
                }
                if ("tester" in data && data.tester != undefined) {
                    this.tester = data.tester;
                }
                if ("next" in data && data.next != undefined) {
                    this.next = data.next;
                }
            }
        }
        get dest_module() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set dest_module(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get init() {
            return pb_1.Message.getWrapperField(this, Init, 2) as Init;
        }
        set init(value: Init) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_init() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get timer() {
            return pb_1.Message.getWrapperField(this, TimerEvent, 3) as TimerEvent;
        }
        set timer(value: TimerEvent) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_timer() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get hasher() {
            return pb_1.Message.getWrapperField(this, dependency_16.hasherpb.Event, 10) as dependency_16.hasherpb.Event;
        }
        set hasher(value: dependency_16.hasherpb.Event) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_hasher() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get bcb() {
            return pb_1.Message.getWrapperField(this, dependency_4.bcbpb.Event, 11) as dependency_4.bcbpb.Event;
        }
        set bcb(value: dependency_4.bcbpb.Event) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_bcb() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get mempool() {
            return pb_1.Message.getWrapperField(this, dependency_5.mempoolpb.Event, 12) as dependency_5.mempoolpb.Event;
        }
        set mempool(value: dependency_5.mempoolpb.Event) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_mempool() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get availability() {
            return pb_1.Message.getWrapperField(this, dependency_6.availabilitypb.Event, 13) as dependency_6.availabilitypb.Event;
        }
        set availability(value: dependency_6.availabilitypb.Event) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_availability() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get batch_db() {
            return pb_1.Message.getWrapperField(this, dependency_8.batchdbpb.Event, 14) as dependency_8.batchdbpb.Event;
        }
        set batch_db(value: dependency_8.batchdbpb.Event) {
            pb_1.Message.setOneofWrapperField(this, 14, this.#one_of_decls[0], value);
        }
        get has_batch_db() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get batch_fetcher() {
            return pb_1.Message.getWrapperField(this, dependency_9.batchfetcherpb.Event, 15) as dependency_9.batchfetcherpb.Event;
        }
        set batch_fetcher(value: dependency_9.batchfetcherpb.Event) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get has_batch_fetcher() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get thresh_crypto() {
            return pb_1.Message.getWrapperField(this, dependency_10.threshcryptopb.Event, 16) as dependency_10.threshcryptopb.Event;
        }
        set thresh_crypto(value: dependency_10.threshcryptopb.Event) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get has_thresh_crypto() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get checkpoint() {
            return pb_1.Message.getWrapperField(this, dependency_12.checkpointpb.Event, 17) as dependency_12.checkpointpb.Event;
        }
        set checkpoint(value: dependency_12.checkpointpb.Event) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get has_checkpoint() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get factory() {
            return pb_1.Message.getWrapperField(this, dependency_7.factorypb.Event, 18) as dependency_7.factorypb.Event;
        }
        set factory(value: dependency_7.factorypb.Event) {
            pb_1.Message.setOneofWrapperField(this, 18, this.#one_of_decls[0], value);
        }
        get has_factory() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get iss() {
            return pb_1.Message.getWrapperField(this, dependency_2.isspb.Event, 19) as dependency_2.isspb.Event;
        }
        set iss(value: dependency_2.isspb.Event) {
            pb_1.Message.setOneofWrapperField(this, 19, this.#one_of_decls[0], value);
        }
        get has_iss() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get orderer() {
            return pb_1.Message.getWrapperField(this, dependency_14.ordererpb.Event, 20) as dependency_14.ordererpb.Event;
        }
        set orderer(value: dependency_14.ordererpb.Event) {
            pb_1.Message.setOneofWrapperField(this, 20, this.#one_of_decls[0], value);
        }
        get has_orderer() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get crypto() {
            return pb_1.Message.getWrapperField(this, dependency_17.cryptopb.Event, 21) as dependency_17.cryptopb.Event;
        }
        set crypto(value: dependency_17.cryptopb.Event) {
            pb_1.Message.setOneofWrapperField(this, 21, this.#one_of_decls[0], value);
        }
        get has_crypto() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get app() {
            return pb_1.Message.getWrapperField(this, dependency_1.apppb.Event, 22) as dependency_1.apppb.Event;
        }
        set app(value: dependency_1.apppb.Event) {
            pb_1.Message.setOneofWrapperField(this, 22, this.#one_of_decls[0], value);
        }
        get has_app() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get transport() {
            return pb_1.Message.getWrapperField(this, dependency_18.transportpb.Event, 23) as dependency_18.transportpb.Event;
        }
        set transport(value: dependency_18.transportpb.Event) {
            pb_1.Message.setOneofWrapperField(this, 23, this.#one_of_decls[0], value);
        }
        get has_transport() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get chkp_validator() {
            return pb_1.Message.getWrapperField(this, dependency_13.chkpvalidatorpb.Event, 24) as dependency_13.chkpvalidatorpb.Event;
        }
        set chkp_validator(value: dependency_13.chkpvalidatorpb.Event) {
            pb_1.Message.setOneofWrapperField(this, 24, this.#one_of_decls[0], value);
        }
        get has_chkp_validator() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get pprep_valiadtor() {
            return pb_1.Message.getWrapperField(this, dependency_15.pprepvalidatorpb.Event, 25) as dependency_15.pprepvalidatorpb.Event;
        }
        set pprep_valiadtor(value: dependency_15.pprepvalidatorpb.Event) {
            pb_1.Message.setOneofWrapperField(this, 25, this.#one_of_decls[0], value);
        }
        get has_pprep_valiadtor() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get ping_pong() {
            return pb_1.Message.getWrapperField(this, dependency_11.pingpongpb.Event, 200) as dependency_11.pingpongpb.Event;
        }
        set ping_pong(value: dependency_11.pingpongpb.Event) {
            pb_1.Message.setOneofWrapperField(this, 200, this.#one_of_decls[0], value);
        }
        get has_ping_pong() {
            return pb_1.Message.getField(this, 200) != null;
        }
        get bcm() {
            return pb_1.Message.getWrapperField(this, dependency_20.bcmpb.Event, 201) as dependency_20.bcmpb.Event;
        }
        set bcm(value: dependency_20.bcmpb.Event) {
            pb_1.Message.setOneofWrapperField(this, 201, this.#one_of_decls[0], value);
        }
        get has_bcm() {
            return pb_1.Message.getField(this, 201) != null;
        }
        get miner() {
            return pb_1.Message.getWrapperField(this, dependency_21.minerpb.Event, 202) as dependency_21.minerpb.Event;
        }
        set miner(value: dependency_21.minerpb.Event) {
            pb_1.Message.setOneofWrapperField(this, 202, this.#one_of_decls[0], value);
        }
        get has_miner() {
            return pb_1.Message.getField(this, 202) != null;
        }
        get tpm() {
            return pb_1.Message.getWrapperField(this, dependency_22.tpmpb.Event, 203) as dependency_22.tpmpb.Event;
        }
        set tpm(value: dependency_22.tpmpb.Event) {
            pb_1.Message.setOneofWrapperField(this, 203, this.#one_of_decls[0], value);
        }
        get has_tpm() {
            return pb_1.Message.getField(this, 203) != null;
        }
        get communication() {
            return pb_1.Message.getWrapperField(this, dependency_23.communicationpb.Event, 204) as dependency_23.communicationpb.Event;
        }
        set communication(value: dependency_23.communicationpb.Event) {
            pb_1.Message.setOneofWrapperField(this, 204, this.#one_of_decls[0], value);
        }
        get has_communication() {
            return pb_1.Message.getField(this, 204) != null;
        }
        get synchronizer() {
            return pb_1.Message.getWrapperField(this, dependency_24.synchronizerpb.Event, 205) as dependency_24.synchronizerpb.Event;
        }
        set synchronizer(value: dependency_24.synchronizerpb.Event) {
            pb_1.Message.setOneofWrapperField(this, 205, this.#one_of_decls[0], value);
        }
        get has_synchronizer() {
            return pb_1.Message.getField(this, 205) != null;
        }
        get bcinterceptor() {
            return pb_1.Message.getWrapperField(this, dependency_25.interceptorpb.Event, 210) as dependency_25.interceptorpb.Event;
        }
        set bcinterceptor(value: dependency_25.interceptorpb.Event) {
            pb_1.Message.setOneofWrapperField(this, 210, this.#one_of_decls[0], value);
        }
        get has_bcinterceptor() {
            return pb_1.Message.getField(this, 210) != null;
        }
        get testingString() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.StringValue, 301) as dependency_3.google.protobuf.StringValue;
        }
        set testingString(value: dependency_3.google.protobuf.StringValue) {
            pb_1.Message.setOneofWrapperField(this, 301, this.#one_of_decls[0], value);
        }
        get has_testingString() {
            return pb_1.Message.getField(this, 301) != null;
        }
        get testingUint() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.UInt64Value, 302) as dependency_3.google.protobuf.UInt64Value;
        }
        set testingUint(value: dependency_3.google.protobuf.UInt64Value) {
            pb_1.Message.setOneofWrapperField(this, 302, this.#one_of_decls[0], value);
        }
        get has_testingUint() {
            return pb_1.Message.getField(this, 302) != null;
        }
        get tester() {
            return pb_1.Message.getWrapperField(this, dependency_19.testerpb.Tester, 303) as dependency_19.testerpb.Tester;
        }
        set tester(value: dependency_19.testerpb.Tester) {
            pb_1.Message.setOneofWrapperField(this, 303, this.#one_of_decls[0], value);
        }
        get has_tester() {
            return pb_1.Message.getField(this, 303) != null;
        }
        get next() {
            return pb_1.Message.getRepeatedWrapperField(this, Event, 400) as Event[];
        }
        set next(value: Event[]) {
            pb_1.Message.setRepeatedWrapperField(this, 400, value);
        }
        get type() {
            const cases: {
                [index: number]: "none" | "init" | "timer" | "hasher" | "bcb" | "mempool" | "availability" | "batch_db" | "batch_fetcher" | "thresh_crypto" | "checkpoint" | "factory" | "iss" | "orderer" | "crypto" | "app" | "transport" | "chkp_validator" | "pprep_valiadtor" | "ping_pong" | "bcm" | "miner" | "tpm" | "communication" | "synchronizer" | "bcinterceptor" | "testingString" | "testingUint" | "tester";
            } = {
                0: "none",
                2: "init",
                3: "timer",
                10: "hasher",
                11: "bcb",
                12: "mempool",
                13: "availability",
                14: "batch_db",
                15: "batch_fetcher",
                16: "thresh_crypto",
                17: "checkpoint",
                18: "factory",
                19: "iss",
                20: "orderer",
                21: "crypto",
                22: "app",
                23: "transport",
                24: "chkp_validator",
                25: "pprep_valiadtor",
                200: "ping_pong",
                201: "bcm",
                202: "miner",
                203: "tpm",
                204: "communication",
                205: "synchronizer",
                210: "bcinterceptor",
                301: "testingString",
                302: "testingUint",
                303: "tester"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 200, 201, 202, 203, 204, 205, 210, 301, 302, 303])];
        }
        static fromObject(data: {
            dest_module?: string;
            init?: ReturnType<typeof Init.prototype.toObject>;
            timer?: ReturnType<typeof TimerEvent.prototype.toObject>;
            hasher?: ReturnType<typeof dependency_16.hasherpb.Event.prototype.toObject>;
            bcb?: ReturnType<typeof dependency_4.bcbpb.Event.prototype.toObject>;
            mempool?: ReturnType<typeof dependency_5.mempoolpb.Event.prototype.toObject>;
            availability?: ReturnType<typeof dependency_6.availabilitypb.Event.prototype.toObject>;
            batch_db?: ReturnType<typeof dependency_8.batchdbpb.Event.prototype.toObject>;
            batch_fetcher?: ReturnType<typeof dependency_9.batchfetcherpb.Event.prototype.toObject>;
            thresh_crypto?: ReturnType<typeof dependency_10.threshcryptopb.Event.prototype.toObject>;
            checkpoint?: ReturnType<typeof dependency_12.checkpointpb.Event.prototype.toObject>;
            factory?: ReturnType<typeof dependency_7.factorypb.Event.prototype.toObject>;
            iss?: ReturnType<typeof dependency_2.isspb.Event.prototype.toObject>;
            orderer?: ReturnType<typeof dependency_14.ordererpb.Event.prototype.toObject>;
            crypto?: ReturnType<typeof dependency_17.cryptopb.Event.prototype.toObject>;
            app?: ReturnType<typeof dependency_1.apppb.Event.prototype.toObject>;
            transport?: ReturnType<typeof dependency_18.transportpb.Event.prototype.toObject>;
            chkp_validator?: ReturnType<typeof dependency_13.chkpvalidatorpb.Event.prototype.toObject>;
            pprep_valiadtor?: ReturnType<typeof dependency_15.pprepvalidatorpb.Event.prototype.toObject>;
            ping_pong?: ReturnType<typeof dependency_11.pingpongpb.Event.prototype.toObject>;
            bcm?: ReturnType<typeof dependency_20.bcmpb.Event.prototype.toObject>;
            miner?: ReturnType<typeof dependency_21.minerpb.Event.prototype.toObject>;
            tpm?: ReturnType<typeof dependency_22.tpmpb.Event.prototype.toObject>;
            communication?: ReturnType<typeof dependency_23.communicationpb.Event.prototype.toObject>;
            synchronizer?: ReturnType<typeof dependency_24.synchronizerpb.Event.prototype.toObject>;
            bcinterceptor?: ReturnType<typeof dependency_25.interceptorpb.Event.prototype.toObject>;
            testingString?: ReturnType<typeof dependency_3.google.protobuf.StringValue.prototype.toObject>;
            testingUint?: ReturnType<typeof dependency_3.google.protobuf.UInt64Value.prototype.toObject>;
            tester?: ReturnType<typeof dependency_19.testerpb.Tester.prototype.toObject>;
            next?: ReturnType<typeof Event.prototype.toObject>[];
        }): Event {
            const message = new Event({});
            if (data.dest_module != null) {
                message.dest_module = data.dest_module;
            }
            if (data.init != null) {
                message.init = Init.fromObject(data.init);
            }
            if (data.timer != null) {
                message.timer = TimerEvent.fromObject(data.timer);
            }
            if (data.hasher != null) {
                message.hasher = dependency_16.hasherpb.Event.fromObject(data.hasher);
            }
            if (data.bcb != null) {
                message.bcb = dependency_4.bcbpb.Event.fromObject(data.bcb);
            }
            if (data.mempool != null) {
                message.mempool = dependency_5.mempoolpb.Event.fromObject(data.mempool);
            }
            if (data.availability != null) {
                message.availability = dependency_6.availabilitypb.Event.fromObject(data.availability);
            }
            if (data.batch_db != null) {
                message.batch_db = dependency_8.batchdbpb.Event.fromObject(data.batch_db);
            }
            if (data.batch_fetcher != null) {
                message.batch_fetcher = dependency_9.batchfetcherpb.Event.fromObject(data.batch_fetcher);
            }
            if (data.thresh_crypto != null) {
                message.thresh_crypto = dependency_10.threshcryptopb.Event.fromObject(data.thresh_crypto);
            }
            if (data.checkpoint != null) {
                message.checkpoint = dependency_12.checkpointpb.Event.fromObject(data.checkpoint);
            }
            if (data.factory != null) {
                message.factory = dependency_7.factorypb.Event.fromObject(data.factory);
            }
            if (data.iss != null) {
                message.iss = dependency_2.isspb.Event.fromObject(data.iss);
            }
            if (data.orderer != null) {
                message.orderer = dependency_14.ordererpb.Event.fromObject(data.orderer);
            }
            if (data.crypto != null) {
                message.crypto = dependency_17.cryptopb.Event.fromObject(data.crypto);
            }
            if (data.app != null) {
                message.app = dependency_1.apppb.Event.fromObject(data.app);
            }
            if (data.transport != null) {
                message.transport = dependency_18.transportpb.Event.fromObject(data.transport);
            }
            if (data.chkp_validator != null) {
                message.chkp_validator = dependency_13.chkpvalidatorpb.Event.fromObject(data.chkp_validator);
            }
            if (data.pprep_valiadtor != null) {
                message.pprep_valiadtor = dependency_15.pprepvalidatorpb.Event.fromObject(data.pprep_valiadtor);
            }
            if (data.ping_pong != null) {
                message.ping_pong = dependency_11.pingpongpb.Event.fromObject(data.ping_pong);
            }
            if (data.bcm != null) {
                message.bcm = dependency_20.bcmpb.Event.fromObject(data.bcm);
            }
            if (data.miner != null) {
                message.miner = dependency_21.minerpb.Event.fromObject(data.miner);
            }
            if (data.tpm != null) {
                message.tpm = dependency_22.tpmpb.Event.fromObject(data.tpm);
            }
            if (data.communication != null) {
                message.communication = dependency_23.communicationpb.Event.fromObject(data.communication);
            }
            if (data.synchronizer != null) {
                message.synchronizer = dependency_24.synchronizerpb.Event.fromObject(data.synchronizer);
            }
            if (data.bcinterceptor != null) {
                message.bcinterceptor = dependency_25.interceptorpb.Event.fromObject(data.bcinterceptor);
            }
            if (data.testingString != null) {
                message.testingString = dependency_3.google.protobuf.StringValue.fromObject(data.testingString);
            }
            if (data.testingUint != null) {
                message.testingUint = dependency_3.google.protobuf.UInt64Value.fromObject(data.testingUint);
            }
            if (data.tester != null) {
                message.tester = dependency_19.testerpb.Tester.fromObject(data.tester);
            }
            if (data.next != null) {
                message.next = data.next.map(item => Event.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                dest_module?: string;
                init?: ReturnType<typeof Init.prototype.toObject>;
                timer?: ReturnType<typeof TimerEvent.prototype.toObject>;
                hasher?: ReturnType<typeof dependency_16.hasherpb.Event.prototype.toObject>;
                bcb?: ReturnType<typeof dependency_4.bcbpb.Event.prototype.toObject>;
                mempool?: ReturnType<typeof dependency_5.mempoolpb.Event.prototype.toObject>;
                availability?: ReturnType<typeof dependency_6.availabilitypb.Event.prototype.toObject>;
                batch_db?: ReturnType<typeof dependency_8.batchdbpb.Event.prototype.toObject>;
                batch_fetcher?: ReturnType<typeof dependency_9.batchfetcherpb.Event.prototype.toObject>;
                thresh_crypto?: ReturnType<typeof dependency_10.threshcryptopb.Event.prototype.toObject>;
                checkpoint?: ReturnType<typeof dependency_12.checkpointpb.Event.prototype.toObject>;
                factory?: ReturnType<typeof dependency_7.factorypb.Event.prototype.toObject>;
                iss?: ReturnType<typeof dependency_2.isspb.Event.prototype.toObject>;
                orderer?: ReturnType<typeof dependency_14.ordererpb.Event.prototype.toObject>;
                crypto?: ReturnType<typeof dependency_17.cryptopb.Event.prototype.toObject>;
                app?: ReturnType<typeof dependency_1.apppb.Event.prototype.toObject>;
                transport?: ReturnType<typeof dependency_18.transportpb.Event.prototype.toObject>;
                chkp_validator?: ReturnType<typeof dependency_13.chkpvalidatorpb.Event.prototype.toObject>;
                pprep_valiadtor?: ReturnType<typeof dependency_15.pprepvalidatorpb.Event.prototype.toObject>;
                ping_pong?: ReturnType<typeof dependency_11.pingpongpb.Event.prototype.toObject>;
                bcm?: ReturnType<typeof dependency_20.bcmpb.Event.prototype.toObject>;
                miner?: ReturnType<typeof dependency_21.minerpb.Event.prototype.toObject>;
                tpm?: ReturnType<typeof dependency_22.tpmpb.Event.prototype.toObject>;
                communication?: ReturnType<typeof dependency_23.communicationpb.Event.prototype.toObject>;
                synchronizer?: ReturnType<typeof dependency_24.synchronizerpb.Event.prototype.toObject>;
                bcinterceptor?: ReturnType<typeof dependency_25.interceptorpb.Event.prototype.toObject>;
                testingString?: ReturnType<typeof dependency_3.google.protobuf.StringValue.prototype.toObject>;
                testingUint?: ReturnType<typeof dependency_3.google.protobuf.UInt64Value.prototype.toObject>;
                tester?: ReturnType<typeof dependency_19.testerpb.Tester.prototype.toObject>;
                next?: ReturnType<typeof Event.prototype.toObject>[];
            } = {};
            if (this.dest_module != null) {
                data.dest_module = this.dest_module;
            }
            if (this.init != null) {
                data.init = this.init.toObject();
            }
            if (this.timer != null) {
                data.timer = this.timer.toObject();
            }
            if (this.hasher != null) {
                data.hasher = this.hasher.toObject();
            }
            if (this.bcb != null) {
                data.bcb = this.bcb.toObject();
            }
            if (this.mempool != null) {
                data.mempool = this.mempool.toObject();
            }
            if (this.availability != null) {
                data.availability = this.availability.toObject();
            }
            if (this.batch_db != null) {
                data.batch_db = this.batch_db.toObject();
            }
            if (this.batch_fetcher != null) {
                data.batch_fetcher = this.batch_fetcher.toObject();
            }
            if (this.thresh_crypto != null) {
                data.thresh_crypto = this.thresh_crypto.toObject();
            }
            if (this.checkpoint != null) {
                data.checkpoint = this.checkpoint.toObject();
            }
            if (this.factory != null) {
                data.factory = this.factory.toObject();
            }
            if (this.iss != null) {
                data.iss = this.iss.toObject();
            }
            if (this.orderer != null) {
                data.orderer = this.orderer.toObject();
            }
            if (this.crypto != null) {
                data.crypto = this.crypto.toObject();
            }
            if (this.app != null) {
                data.app = this.app.toObject();
            }
            if (this.transport != null) {
                data.transport = this.transport.toObject();
            }
            if (this.chkp_validator != null) {
                data.chkp_validator = this.chkp_validator.toObject();
            }
            if (this.pprep_valiadtor != null) {
                data.pprep_valiadtor = this.pprep_valiadtor.toObject();
            }
            if (this.ping_pong != null) {
                data.ping_pong = this.ping_pong.toObject();
            }
            if (this.bcm != null) {
                data.bcm = this.bcm.toObject();
            }
            if (this.miner != null) {
                data.miner = this.miner.toObject();
            }
            if (this.tpm != null) {
                data.tpm = this.tpm.toObject();
            }
            if (this.communication != null) {
                data.communication = this.communication.toObject();
            }
            if (this.synchronizer != null) {
                data.synchronizer = this.synchronizer.toObject();
            }
            if (this.bcinterceptor != null) {
                data.bcinterceptor = this.bcinterceptor.toObject();
            }
            if (this.testingString != null) {
                data.testingString = this.testingString.toObject();
            }
            if (this.testingUint != null) {
                data.testingUint = this.testingUint.toObject();
            }
            if (this.tester != null) {
                data.tester = this.tester.toObject();
            }
            if (this.next != null) {
                data.next = this.next.map((item: Event) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.dest_module.length)
                writer.writeString(1, this.dest_module);
            if (this.has_init)
                writer.writeMessage(2, this.init, () => this.init.serialize(writer));
            if (this.has_timer)
                writer.writeMessage(3, this.timer, () => this.timer.serialize(writer));
            if (this.has_hasher)
                writer.writeMessage(10, this.hasher, () => this.hasher.serialize(writer));
            if (this.has_bcb)
                writer.writeMessage(11, this.bcb, () => this.bcb.serialize(writer));
            if (this.has_mempool)
                writer.writeMessage(12, this.mempool, () => this.mempool.serialize(writer));
            if (this.has_availability)
                writer.writeMessage(13, this.availability, () => this.availability.serialize(writer));
            if (this.has_batch_db)
                writer.writeMessage(14, this.batch_db, () => this.batch_db.serialize(writer));
            if (this.has_batch_fetcher)
                writer.writeMessage(15, this.batch_fetcher, () => this.batch_fetcher.serialize(writer));
            if (this.has_thresh_crypto)
                writer.writeMessage(16, this.thresh_crypto, () => this.thresh_crypto.serialize(writer));
            if (this.has_checkpoint)
                writer.writeMessage(17, this.checkpoint, () => this.checkpoint.serialize(writer));
            if (this.has_factory)
                writer.writeMessage(18, this.factory, () => this.factory.serialize(writer));
            if (this.has_iss)
                writer.writeMessage(19, this.iss, () => this.iss.serialize(writer));
            if (this.has_orderer)
                writer.writeMessage(20, this.orderer, () => this.orderer.serialize(writer));
            if (this.has_crypto)
                writer.writeMessage(21, this.crypto, () => this.crypto.serialize(writer));
            if (this.has_app)
                writer.writeMessage(22, this.app, () => this.app.serialize(writer));
            if (this.has_transport)
                writer.writeMessage(23, this.transport, () => this.transport.serialize(writer));
            if (this.has_chkp_validator)
                writer.writeMessage(24, this.chkp_validator, () => this.chkp_validator.serialize(writer));
            if (this.has_pprep_valiadtor)
                writer.writeMessage(25, this.pprep_valiadtor, () => this.pprep_valiadtor.serialize(writer));
            if (this.has_ping_pong)
                writer.writeMessage(200, this.ping_pong, () => this.ping_pong.serialize(writer));
            if (this.has_bcm)
                writer.writeMessage(201, this.bcm, () => this.bcm.serialize(writer));
            if (this.has_miner)
                writer.writeMessage(202, this.miner, () => this.miner.serialize(writer));
            if (this.has_tpm)
                writer.writeMessage(203, this.tpm, () => this.tpm.serialize(writer));
            if (this.has_communication)
                writer.writeMessage(204, this.communication, () => this.communication.serialize(writer));
            if (this.has_synchronizer)
                writer.writeMessage(205, this.synchronizer, () => this.synchronizer.serialize(writer));
            if (this.has_bcinterceptor)
                writer.writeMessage(210, this.bcinterceptor, () => this.bcinterceptor.serialize(writer));
            if (this.has_testingString)
                writer.writeMessage(301, this.testingString, () => this.testingString.serialize(writer));
            if (this.has_testingUint)
                writer.writeMessage(302, this.testingUint, () => this.testingUint.serialize(writer));
            if (this.has_tester)
                writer.writeMessage(303, this.tester, () => this.tester.serialize(writer));
            if (this.next.length)
                writer.writeRepeatedMessage(400, this.next, (item: Event) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.dest_module = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.init, () => message.init = Init.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.timer, () => message.timer = TimerEvent.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.hasher, () => message.hasher = dependency_16.hasherpb.Event.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.bcb, () => message.bcb = dependency_4.bcbpb.Event.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.mempool, () => message.mempool = dependency_5.mempoolpb.Event.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.availability, () => message.availability = dependency_6.availabilitypb.Event.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.batch_db, () => message.batch_db = dependency_8.batchdbpb.Event.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.batch_fetcher, () => message.batch_fetcher = dependency_9.batchfetcherpb.Event.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.thresh_crypto, () => message.thresh_crypto = dependency_10.threshcryptopb.Event.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.checkpoint, () => message.checkpoint = dependency_12.checkpointpb.Event.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.factory, () => message.factory = dependency_7.factorypb.Event.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.iss, () => message.iss = dependency_2.isspb.Event.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.orderer, () => message.orderer = dependency_14.ordererpb.Event.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.crypto, () => message.crypto = dependency_17.cryptopb.Event.deserialize(reader));
                        break;
                    case 22:
                        reader.readMessage(message.app, () => message.app = dependency_1.apppb.Event.deserialize(reader));
                        break;
                    case 23:
                        reader.readMessage(message.transport, () => message.transport = dependency_18.transportpb.Event.deserialize(reader));
                        break;
                    case 24:
                        reader.readMessage(message.chkp_validator, () => message.chkp_validator = dependency_13.chkpvalidatorpb.Event.deserialize(reader));
                        break;
                    case 25:
                        reader.readMessage(message.pprep_valiadtor, () => message.pprep_valiadtor = dependency_15.pprepvalidatorpb.Event.deserialize(reader));
                        break;
                    case 200:
                        reader.readMessage(message.ping_pong, () => message.ping_pong = dependency_11.pingpongpb.Event.deserialize(reader));
                        break;
                    case 201:
                        reader.readMessage(message.bcm, () => message.bcm = dependency_20.bcmpb.Event.deserialize(reader));
                        break;
                    case 202:
                        reader.readMessage(message.miner, () => message.miner = dependency_21.minerpb.Event.deserialize(reader));
                        break;
                    case 203:
                        reader.readMessage(message.tpm, () => message.tpm = dependency_22.tpmpb.Event.deserialize(reader));
                        break;
                    case 204:
                        reader.readMessage(message.communication, () => message.communication = dependency_23.communicationpb.Event.deserialize(reader));
                        break;
                    case 205:
                        reader.readMessage(message.synchronizer, () => message.synchronizer = dependency_24.synchronizerpb.Event.deserialize(reader));
                        break;
                    case 210:
                        reader.readMessage(message.bcinterceptor, () => message.bcinterceptor = dependency_25.interceptorpb.Event.deserialize(reader));
                        break;
                    case 301:
                        reader.readMessage(message.testingString, () => message.testingString = dependency_3.google.protobuf.StringValue.deserialize(reader));
                        break;
                    case 302:
                        reader.readMessage(message.testingUint, () => message.testingUint = dependency_3.google.protobuf.UInt64Value.deserialize(reader));
                        break;
                    case 303:
                        reader.readMessage(message.tester, () => message.tester = dependency_19.testerpb.Tester.deserialize(reader));
                        break;
                    case 400:
                        reader.readMessage(message.next, () => pb_1.Message.addToRepeatedWrapperField(message, 400, Event.deserialize(reader), Event));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class Init extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Init {
            const message = new Init({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Init {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Init();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Init {
            return Init.deserialize(bytes);
        }
    }
    export class TimerEvent extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            delay?: TimerDelay;
            repeat?: never;
            garbage_collect?: never;
        } | {
            delay?: never;
            repeat?: TimerRepeat;
            garbage_collect?: never;
        } | {
            delay?: never;
            repeat?: never;
            garbage_collect?: TimerGarbageCollect;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("delay" in data && data.delay != undefined) {
                    this.delay = data.delay;
                }
                if ("repeat" in data && data.repeat != undefined) {
                    this.repeat = data.repeat;
                }
                if ("garbage_collect" in data && data.garbage_collect != undefined) {
                    this.garbage_collect = data.garbage_collect;
                }
            }
        }
        get delay() {
            return pb_1.Message.getWrapperField(this, TimerDelay, 1) as TimerDelay;
        }
        set delay(value: TimerDelay) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_delay() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get repeat() {
            return pb_1.Message.getWrapperField(this, TimerRepeat, 2) as TimerRepeat;
        }
        set repeat(value: TimerRepeat) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_repeat() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get garbage_collect() {
            return pb_1.Message.getWrapperField(this, TimerGarbageCollect, 3) as TimerGarbageCollect;
        }
        set garbage_collect(value: TimerGarbageCollect) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_garbage_collect() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get Type() {
            const cases: {
                [index: number]: "none" | "delay" | "repeat" | "garbage_collect";
            } = {
                0: "none",
                1: "delay",
                2: "repeat",
                3: "garbage_collect"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            delay?: ReturnType<typeof TimerDelay.prototype.toObject>;
            repeat?: ReturnType<typeof TimerRepeat.prototype.toObject>;
            garbage_collect?: ReturnType<typeof TimerGarbageCollect.prototype.toObject>;
        }): TimerEvent {
            const message = new TimerEvent({});
            if (data.delay != null) {
                message.delay = TimerDelay.fromObject(data.delay);
            }
            if (data.repeat != null) {
                message.repeat = TimerRepeat.fromObject(data.repeat);
            }
            if (data.garbage_collect != null) {
                message.garbage_collect = TimerGarbageCollect.fromObject(data.garbage_collect);
            }
            return message;
        }
        toObject() {
            const data: {
                delay?: ReturnType<typeof TimerDelay.prototype.toObject>;
                repeat?: ReturnType<typeof TimerRepeat.prototype.toObject>;
                garbage_collect?: ReturnType<typeof TimerGarbageCollect.prototype.toObject>;
            } = {};
            if (this.delay != null) {
                data.delay = this.delay.toObject();
            }
            if (this.repeat != null) {
                data.repeat = this.repeat.toObject();
            }
            if (this.garbage_collect != null) {
                data.garbage_collect = this.garbage_collect.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_delay)
                writer.writeMessage(1, this.delay, () => this.delay.serialize(writer));
            if (this.has_repeat)
                writer.writeMessage(2, this.repeat, () => this.repeat.serialize(writer));
            if (this.has_garbage_collect)
                writer.writeMessage(3, this.garbage_collect, () => this.garbage_collect.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TimerEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TimerEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.delay, () => message.delay = TimerDelay.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.repeat, () => message.repeat = TimerRepeat.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.garbage_collect, () => message.garbage_collect = TimerGarbageCollect.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TimerEvent {
            return TimerEvent.deserialize(bytes);
        }
    }
    export class TimerDelay extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            events_to_delay?: Event[];
            delay?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("events_to_delay" in data && data.events_to_delay != undefined) {
                    this.events_to_delay = data.events_to_delay;
                }
                if ("delay" in data && data.delay != undefined) {
                    this.delay = data.delay;
                }
            }
        }
        get events_to_delay() {
            return pb_1.Message.getRepeatedWrapperField(this, Event, 1) as Event[];
        }
        set events_to_delay(value: Event[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get delay() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set delay(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            events_to_delay?: ReturnType<typeof Event.prototype.toObject>[];
            delay?: number;
        }): TimerDelay {
            const message = new TimerDelay({});
            if (data.events_to_delay != null) {
                message.events_to_delay = data.events_to_delay.map(item => Event.fromObject(item));
            }
            if (data.delay != null) {
                message.delay = data.delay;
            }
            return message;
        }
        toObject() {
            const data: {
                events_to_delay?: ReturnType<typeof Event.prototype.toObject>[];
                delay?: number;
            } = {};
            if (this.events_to_delay != null) {
                data.events_to_delay = this.events_to_delay.map((item: Event) => item.toObject());
            }
            if (this.delay != null) {
                data.delay = this.delay;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.events_to_delay.length)
                writer.writeRepeatedMessage(1, this.events_to_delay, (item: Event) => item.serialize(writer));
            if (this.delay != 0)
                writer.writeUint64(2, this.delay);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TimerDelay {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TimerDelay();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.events_to_delay, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Event.deserialize(reader), Event));
                        break;
                    case 2:
                        message.delay = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TimerDelay {
            return TimerDelay.deserialize(bytes);
        }
    }
    export class TimerRepeat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            events_to_repeat?: Event[];
            delay?: number;
            retention_index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("events_to_repeat" in data && data.events_to_repeat != undefined) {
                    this.events_to_repeat = data.events_to_repeat;
                }
                if ("delay" in data && data.delay != undefined) {
                    this.delay = data.delay;
                }
                if ("retention_index" in data && data.retention_index != undefined) {
                    this.retention_index = data.retention_index;
                }
            }
        }
        get events_to_repeat() {
            return pb_1.Message.getRepeatedWrapperField(this, Event, 1) as Event[];
        }
        set events_to_repeat(value: Event[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get delay() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set delay(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get retention_index() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set retention_index(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            events_to_repeat?: ReturnType<typeof Event.prototype.toObject>[];
            delay?: number;
            retention_index?: number;
        }): TimerRepeat {
            const message = new TimerRepeat({});
            if (data.events_to_repeat != null) {
                message.events_to_repeat = data.events_to_repeat.map(item => Event.fromObject(item));
            }
            if (data.delay != null) {
                message.delay = data.delay;
            }
            if (data.retention_index != null) {
                message.retention_index = data.retention_index;
            }
            return message;
        }
        toObject() {
            const data: {
                events_to_repeat?: ReturnType<typeof Event.prototype.toObject>[];
                delay?: number;
                retention_index?: number;
            } = {};
            if (this.events_to_repeat != null) {
                data.events_to_repeat = this.events_to_repeat.map((item: Event) => item.toObject());
            }
            if (this.delay != null) {
                data.delay = this.delay;
            }
            if (this.retention_index != null) {
                data.retention_index = this.retention_index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.events_to_repeat.length)
                writer.writeRepeatedMessage(1, this.events_to_repeat, (item: Event) => item.serialize(writer));
            if (this.delay != 0)
                writer.writeUint64(2, this.delay);
            if (this.retention_index != 0)
                writer.writeUint64(3, this.retention_index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TimerRepeat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TimerRepeat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.events_to_repeat, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Event.deserialize(reader), Event));
                        break;
                    case 2:
                        message.delay = reader.readUint64();
                        break;
                    case 3:
                        message.retention_index = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TimerRepeat {
            return TimerRepeat.deserialize(bytes);
        }
    }
    export class TimerGarbageCollect extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            retention_index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("retention_index" in data && data.retention_index != undefined) {
                    this.retention_index = data.retention_index;
                }
            }
        }
        get retention_index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set retention_index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            retention_index?: number;
        }): TimerGarbageCollect {
            const message = new TimerGarbageCollect({});
            if (data.retention_index != null) {
                message.retention_index = data.retention_index;
            }
            return message;
        }
        toObject() {
            const data: {
                retention_index?: number;
            } = {};
            if (this.retention_index != null) {
                data.retention_index = this.retention_index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.retention_index != 0)
                writer.writeUint64(1, this.retention_index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TimerGarbageCollect {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TimerGarbageCollect();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.retention_index = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TimerGarbageCollect {
            return TimerGarbageCollect.deserialize(bytes);
        }
    }
}
