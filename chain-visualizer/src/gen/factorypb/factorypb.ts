/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: factorypb/factorypb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../availabilitypb/mscpb/mscpb";
import * as dependency_2 from "./../checkpointpb/checkpointpb";
import * as dependency_3 from "./../ordererpb/ordererpb";
import * as dependency_4 from "./../ordererpb/pprepvalidatorpb/pprepvalidatorpb";
import * as dependency_5 from "./../mir/codegen_extensions";
import * as pb_1 from "google-protobuf";
export namespace factorypb {
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            new_module?: NewModule;
            garbage_collect?: never;
        } | {
            new_module?: never;
            garbage_collect?: GarbageCollect;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("new_module" in data && data.new_module != undefined) {
                    this.new_module = data.new_module;
                }
                if ("garbage_collect" in data && data.garbage_collect != undefined) {
                    this.garbage_collect = data.garbage_collect;
                }
            }
        }
        get new_module() {
            return pb_1.Message.getWrapperField(this, NewModule, 1) as NewModule;
        }
        set new_module(value: NewModule) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_new_module() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get garbage_collect() {
            return pb_1.Message.getWrapperField(this, GarbageCollect, 2) as GarbageCollect;
        }
        set garbage_collect(value: GarbageCollect) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_garbage_collect() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "new_module" | "garbage_collect";
            } = {
                0: "none",
                1: "new_module",
                2: "garbage_collect"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            new_module?: ReturnType<typeof NewModule.prototype.toObject>;
            garbage_collect?: ReturnType<typeof GarbageCollect.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.new_module != null) {
                message.new_module = NewModule.fromObject(data.new_module);
            }
            if (data.garbage_collect != null) {
                message.garbage_collect = GarbageCollect.fromObject(data.garbage_collect);
            }
            return message;
        }
        toObject() {
            const data: {
                new_module?: ReturnType<typeof NewModule.prototype.toObject>;
                garbage_collect?: ReturnType<typeof GarbageCollect.prototype.toObject>;
            } = {};
            if (this.new_module != null) {
                data.new_module = this.new_module.toObject();
            }
            if (this.garbage_collect != null) {
                data.garbage_collect = this.garbage_collect.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_new_module)
                writer.writeMessage(1, this.new_module, () => this.new_module.serialize(writer));
            if (this.has_garbage_collect)
                writer.writeMessage(2, this.garbage_collect, () => this.garbage_collect.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.new_module, () => message.new_module = NewModule.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.garbage_collect, () => message.garbage_collect = GarbageCollect.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class NewModule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            module_id?: string;
            retention_index?: number;
            params?: GeneratorParams;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module_id" in data && data.module_id != undefined) {
                    this.module_id = data.module_id;
                }
                if ("retention_index" in data && data.retention_index != undefined) {
                    this.retention_index = data.retention_index;
                }
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
            }
        }
        get module_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set module_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get retention_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set retention_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get params() {
            return pb_1.Message.getWrapperField(this, GeneratorParams, 3) as GeneratorParams;
        }
        set params(value: GeneratorParams) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_params() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            module_id?: string;
            retention_index?: number;
            params?: ReturnType<typeof GeneratorParams.prototype.toObject>;
        }): NewModule {
            const message = new NewModule({});
            if (data.module_id != null) {
                message.module_id = data.module_id;
            }
            if (data.retention_index != null) {
                message.retention_index = data.retention_index;
            }
            if (data.params != null) {
                message.params = GeneratorParams.fromObject(data.params);
            }
            return message;
        }
        toObject() {
            const data: {
                module_id?: string;
                retention_index?: number;
                params?: ReturnType<typeof GeneratorParams.prototype.toObject>;
            } = {};
            if (this.module_id != null) {
                data.module_id = this.module_id;
            }
            if (this.retention_index != null) {
                data.retention_index = this.retention_index;
            }
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.module_id.length)
                writer.writeString(1, this.module_id);
            if (this.retention_index != 0)
                writer.writeUint64(2, this.retention_index);
            if (this.has_params)
                writer.writeMessage(3, this.params, () => this.params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewModule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewModule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.module_id = reader.readString();
                        break;
                    case 2:
                        message.retention_index = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.params, () => message.params = GeneratorParams.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewModule {
            return NewModule.deserialize(bytes);
        }
    }
    export class GarbageCollect extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            retention_index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("retention_index" in data && data.retention_index != undefined) {
                    this.retention_index = data.retention_index;
                }
            }
        }
        get retention_index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set retention_index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            retention_index?: number;
        }): GarbageCollect {
            const message = new GarbageCollect({});
            if (data.retention_index != null) {
                message.retention_index = data.retention_index;
            }
            return message;
        }
        toObject() {
            const data: {
                retention_index?: number;
            } = {};
            if (this.retention_index != null) {
                data.retention_index = this.retention_index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.retention_index != 0)
                writer.writeUint64(1, this.retention_index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GarbageCollect {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GarbageCollect();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.retention_index = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GarbageCollect {
            return GarbageCollect.deserialize(bytes);
        }
    }
    export class GeneratorParams extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5]];
        constructor(data?: any[] | ({} & (({
            multisig_collector?: dependency_1.availabilitypb.mscpb.InstanceParams;
            checkpoint?: never;
            echo_test_module?: never;
            pbft_module?: never;
            ppv_module?: never;
        } | {
            multisig_collector?: never;
            checkpoint?: dependency_2.checkpointpb.InstanceParams;
            echo_test_module?: never;
            pbft_module?: never;
            ppv_module?: never;
        } | {
            multisig_collector?: never;
            checkpoint?: never;
            echo_test_module?: EchoModuleParams;
            pbft_module?: never;
            ppv_module?: never;
        } | {
            multisig_collector?: never;
            checkpoint?: never;
            echo_test_module?: never;
            pbft_module?: dependency_3.ordererpb.PBFTModule;
            ppv_module?: never;
        } | {
            multisig_collector?: never;
            checkpoint?: never;
            echo_test_module?: never;
            pbft_module?: never;
            ppv_module?: dependency_4.pprepvalidatorpb.PPrepValidatorChkp;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("multisig_collector" in data && data.multisig_collector != undefined) {
                    this.multisig_collector = data.multisig_collector;
                }
                if ("checkpoint" in data && data.checkpoint != undefined) {
                    this.checkpoint = data.checkpoint;
                }
                if ("echo_test_module" in data && data.echo_test_module != undefined) {
                    this.echo_test_module = data.echo_test_module;
                }
                if ("pbft_module" in data && data.pbft_module != undefined) {
                    this.pbft_module = data.pbft_module;
                }
                if ("ppv_module" in data && data.ppv_module != undefined) {
                    this.ppv_module = data.ppv_module;
                }
            }
        }
        get multisig_collector() {
            return pb_1.Message.getWrapperField(this, dependency_1.availabilitypb.mscpb.InstanceParams, 1) as dependency_1.availabilitypb.mscpb.InstanceParams;
        }
        set multisig_collector(value: dependency_1.availabilitypb.mscpb.InstanceParams) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_multisig_collector() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get checkpoint() {
            return pb_1.Message.getWrapperField(this, dependency_2.checkpointpb.InstanceParams, 2) as dependency_2.checkpointpb.InstanceParams;
        }
        set checkpoint(value: dependency_2.checkpointpb.InstanceParams) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_checkpoint() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get echo_test_module() {
            return pb_1.Message.getWrapperField(this, EchoModuleParams, 3) as EchoModuleParams;
        }
        set echo_test_module(value: EchoModuleParams) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_echo_test_module() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get pbft_module() {
            return pb_1.Message.getWrapperField(this, dependency_3.ordererpb.PBFTModule, 4) as dependency_3.ordererpb.PBFTModule;
        }
        set pbft_module(value: dependency_3.ordererpb.PBFTModule) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_pbft_module() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ppv_module() {
            return pb_1.Message.getWrapperField(this, dependency_4.pprepvalidatorpb.PPrepValidatorChkp, 5) as dependency_4.pprepvalidatorpb.PPrepValidatorChkp;
        }
        set ppv_module(value: dependency_4.pprepvalidatorpb.PPrepValidatorChkp) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_ppv_module() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "multisig_collector" | "checkpoint" | "echo_test_module" | "pbft_module" | "ppv_module";
            } = {
                0: "none",
                1: "multisig_collector",
                2: "checkpoint",
                3: "echo_test_module",
                4: "pbft_module",
                5: "ppv_module"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5])];
        }
        static fromObject(data: {
            multisig_collector?: ReturnType<typeof dependency_1.availabilitypb.mscpb.InstanceParams.prototype.toObject>;
            checkpoint?: ReturnType<typeof dependency_2.checkpointpb.InstanceParams.prototype.toObject>;
            echo_test_module?: ReturnType<typeof EchoModuleParams.prototype.toObject>;
            pbft_module?: ReturnType<typeof dependency_3.ordererpb.PBFTModule.prototype.toObject>;
            ppv_module?: ReturnType<typeof dependency_4.pprepvalidatorpb.PPrepValidatorChkp.prototype.toObject>;
        }): GeneratorParams {
            const message = new GeneratorParams({});
            if (data.multisig_collector != null) {
                message.multisig_collector = dependency_1.availabilitypb.mscpb.InstanceParams.fromObject(data.multisig_collector);
            }
            if (data.checkpoint != null) {
                message.checkpoint = dependency_2.checkpointpb.InstanceParams.fromObject(data.checkpoint);
            }
            if (data.echo_test_module != null) {
                message.echo_test_module = EchoModuleParams.fromObject(data.echo_test_module);
            }
            if (data.pbft_module != null) {
                message.pbft_module = dependency_3.ordererpb.PBFTModule.fromObject(data.pbft_module);
            }
            if (data.ppv_module != null) {
                message.ppv_module = dependency_4.pprepvalidatorpb.PPrepValidatorChkp.fromObject(data.ppv_module);
            }
            return message;
        }
        toObject() {
            const data: {
                multisig_collector?: ReturnType<typeof dependency_1.availabilitypb.mscpb.InstanceParams.prototype.toObject>;
                checkpoint?: ReturnType<typeof dependency_2.checkpointpb.InstanceParams.prototype.toObject>;
                echo_test_module?: ReturnType<typeof EchoModuleParams.prototype.toObject>;
                pbft_module?: ReturnType<typeof dependency_3.ordererpb.PBFTModule.prototype.toObject>;
                ppv_module?: ReturnType<typeof dependency_4.pprepvalidatorpb.PPrepValidatorChkp.prototype.toObject>;
            } = {};
            if (this.multisig_collector != null) {
                data.multisig_collector = this.multisig_collector.toObject();
            }
            if (this.checkpoint != null) {
                data.checkpoint = this.checkpoint.toObject();
            }
            if (this.echo_test_module != null) {
                data.echo_test_module = this.echo_test_module.toObject();
            }
            if (this.pbft_module != null) {
                data.pbft_module = this.pbft_module.toObject();
            }
            if (this.ppv_module != null) {
                data.ppv_module = this.ppv_module.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_multisig_collector)
                writer.writeMessage(1, this.multisig_collector, () => this.multisig_collector.serialize(writer));
            if (this.has_checkpoint)
                writer.writeMessage(2, this.checkpoint, () => this.checkpoint.serialize(writer));
            if (this.has_echo_test_module)
                writer.writeMessage(3, this.echo_test_module, () => this.echo_test_module.serialize(writer));
            if (this.has_pbft_module)
                writer.writeMessage(4, this.pbft_module, () => this.pbft_module.serialize(writer));
            if (this.has_ppv_module)
                writer.writeMessage(5, this.ppv_module, () => this.ppv_module.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GeneratorParams {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GeneratorParams();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.multisig_collector, () => message.multisig_collector = dependency_1.availabilitypb.mscpb.InstanceParams.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.checkpoint, () => message.checkpoint = dependency_2.checkpointpb.InstanceParams.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.echo_test_module, () => message.echo_test_module = EchoModuleParams.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.pbft_module, () => message.pbft_module = dependency_3.ordererpb.PBFTModule.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.ppv_module, () => message.ppv_module = dependency_4.pprepvalidatorpb.PPrepValidatorChkp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GeneratorParams {
            return GeneratorParams.deserialize(bytes);
        }
    }
    export class EchoModuleParams extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            prefix?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("prefix" in data && data.prefix != undefined) {
                    this.prefix = data.prefix;
                }
            }
        }
        get prefix() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set prefix(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            prefix?: string;
        }): EchoModuleParams {
            const message = new EchoModuleParams({});
            if (data.prefix != null) {
                message.prefix = data.prefix;
            }
            return message;
        }
        toObject() {
            const data: {
                prefix?: string;
            } = {};
            if (this.prefix != null) {
                data.prefix = this.prefix;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.prefix.length)
                writer.writeString(1, this.prefix);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EchoModuleParams {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EchoModuleParams();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.prefix = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EchoModuleParams {
            return EchoModuleParams.deserialize(bytes);
        }
    }
}
