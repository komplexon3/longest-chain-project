/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: mempoolpb/mempoolpb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../contextstorepb/contextstorepb";
import * as dependency_2 from "./../dslpb/dslpb";
import * as dependency_3 from "./../mir/codegen_extensions";
import * as dependency_4 from "./../trantorpb/trantorpb";
import * as pb_1 from "google-protobuf";
export namespace mempoolpb {
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]];
        constructor(data?: any[] | ({} & (({
            request_batch?: RequestBatch;
            new_batch?: never;
            request_transactions?: never;
            transactions_response?: never;
            request_transaction_ids?: never;
            transaction_ids_response?: never;
            request_batch_id?: never;
            batch_id_response?: never;
            new_transactions?: never;
            batch_timeout?: never;
            new_epoch?: never;
        } | {
            request_batch?: never;
            new_batch?: NewBatch;
            request_transactions?: never;
            transactions_response?: never;
            request_transaction_ids?: never;
            transaction_ids_response?: never;
            request_batch_id?: never;
            batch_id_response?: never;
            new_transactions?: never;
            batch_timeout?: never;
            new_epoch?: never;
        } | {
            request_batch?: never;
            new_batch?: never;
            request_transactions?: RequestTransactions;
            transactions_response?: never;
            request_transaction_ids?: never;
            transaction_ids_response?: never;
            request_batch_id?: never;
            batch_id_response?: never;
            new_transactions?: never;
            batch_timeout?: never;
            new_epoch?: never;
        } | {
            request_batch?: never;
            new_batch?: never;
            request_transactions?: never;
            transactions_response?: TransactionsResponse;
            request_transaction_ids?: never;
            transaction_ids_response?: never;
            request_batch_id?: never;
            batch_id_response?: never;
            new_transactions?: never;
            batch_timeout?: never;
            new_epoch?: never;
        } | {
            request_batch?: never;
            new_batch?: never;
            request_transactions?: never;
            transactions_response?: never;
            request_transaction_ids?: RequestTransactionIDs;
            transaction_ids_response?: never;
            request_batch_id?: never;
            batch_id_response?: never;
            new_transactions?: never;
            batch_timeout?: never;
            new_epoch?: never;
        } | {
            request_batch?: never;
            new_batch?: never;
            request_transactions?: never;
            transactions_response?: never;
            request_transaction_ids?: never;
            transaction_ids_response?: TransactionIDsResponse;
            request_batch_id?: never;
            batch_id_response?: never;
            new_transactions?: never;
            batch_timeout?: never;
            new_epoch?: never;
        } | {
            request_batch?: never;
            new_batch?: never;
            request_transactions?: never;
            transactions_response?: never;
            request_transaction_ids?: never;
            transaction_ids_response?: never;
            request_batch_id?: RequestBatchID;
            batch_id_response?: never;
            new_transactions?: never;
            batch_timeout?: never;
            new_epoch?: never;
        } | {
            request_batch?: never;
            new_batch?: never;
            request_transactions?: never;
            transactions_response?: never;
            request_transaction_ids?: never;
            transaction_ids_response?: never;
            request_batch_id?: never;
            batch_id_response?: BatchIDResponse;
            new_transactions?: never;
            batch_timeout?: never;
            new_epoch?: never;
        } | {
            request_batch?: never;
            new_batch?: never;
            request_transactions?: never;
            transactions_response?: never;
            request_transaction_ids?: never;
            transaction_ids_response?: never;
            request_batch_id?: never;
            batch_id_response?: never;
            new_transactions?: NewTransactions;
            batch_timeout?: never;
            new_epoch?: never;
        } | {
            request_batch?: never;
            new_batch?: never;
            request_transactions?: never;
            transactions_response?: never;
            request_transaction_ids?: never;
            transaction_ids_response?: never;
            request_batch_id?: never;
            batch_id_response?: never;
            new_transactions?: never;
            batch_timeout?: BatchTimeout;
            new_epoch?: never;
        } | {
            request_batch?: never;
            new_batch?: never;
            request_transactions?: never;
            transactions_response?: never;
            request_transaction_ids?: never;
            transaction_ids_response?: never;
            request_batch_id?: never;
            batch_id_response?: never;
            new_transactions?: never;
            batch_timeout?: never;
            new_epoch?: NewEpoch;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_batch" in data && data.request_batch != undefined) {
                    this.request_batch = data.request_batch;
                }
                if ("new_batch" in data && data.new_batch != undefined) {
                    this.new_batch = data.new_batch;
                }
                if ("request_transactions" in data && data.request_transactions != undefined) {
                    this.request_transactions = data.request_transactions;
                }
                if ("transactions_response" in data && data.transactions_response != undefined) {
                    this.transactions_response = data.transactions_response;
                }
                if ("request_transaction_ids" in data && data.request_transaction_ids != undefined) {
                    this.request_transaction_ids = data.request_transaction_ids;
                }
                if ("transaction_ids_response" in data && data.transaction_ids_response != undefined) {
                    this.transaction_ids_response = data.transaction_ids_response;
                }
                if ("request_batch_id" in data && data.request_batch_id != undefined) {
                    this.request_batch_id = data.request_batch_id;
                }
                if ("batch_id_response" in data && data.batch_id_response != undefined) {
                    this.batch_id_response = data.batch_id_response;
                }
                if ("new_transactions" in data && data.new_transactions != undefined) {
                    this.new_transactions = data.new_transactions;
                }
                if ("batch_timeout" in data && data.batch_timeout != undefined) {
                    this.batch_timeout = data.batch_timeout;
                }
                if ("new_epoch" in data && data.new_epoch != undefined) {
                    this.new_epoch = data.new_epoch;
                }
            }
        }
        get request_batch() {
            return pb_1.Message.getWrapperField(this, RequestBatch, 1) as RequestBatch;
        }
        set request_batch(value: RequestBatch) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_request_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get new_batch() {
            return pb_1.Message.getWrapperField(this, NewBatch, 2) as NewBatch;
        }
        set new_batch(value: NewBatch) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_new_batch() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get request_transactions() {
            return pb_1.Message.getWrapperField(this, RequestTransactions, 3) as RequestTransactions;
        }
        set request_transactions(value: RequestTransactions) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_request_transactions() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get transactions_response() {
            return pb_1.Message.getWrapperField(this, TransactionsResponse, 4) as TransactionsResponse;
        }
        set transactions_response(value: TransactionsResponse) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_transactions_response() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get request_transaction_ids() {
            return pb_1.Message.getWrapperField(this, RequestTransactionIDs, 5) as RequestTransactionIDs;
        }
        set request_transaction_ids(value: RequestTransactionIDs) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_request_transaction_ids() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get transaction_ids_response() {
            return pb_1.Message.getWrapperField(this, TransactionIDsResponse, 6) as TransactionIDsResponse;
        }
        set transaction_ids_response(value: TransactionIDsResponse) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_transaction_ids_response() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get request_batch_id() {
            return pb_1.Message.getWrapperField(this, RequestBatchID, 7) as RequestBatchID;
        }
        set request_batch_id(value: RequestBatchID) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_request_batch_id() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get batch_id_response() {
            return pb_1.Message.getWrapperField(this, BatchIDResponse, 8) as BatchIDResponse;
        }
        set batch_id_response(value: BatchIDResponse) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_batch_id_response() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get new_transactions() {
            return pb_1.Message.getWrapperField(this, NewTransactions, 9) as NewTransactions;
        }
        set new_transactions(value: NewTransactions) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_new_transactions() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get batch_timeout() {
            return pb_1.Message.getWrapperField(this, BatchTimeout, 10) as BatchTimeout;
        }
        set batch_timeout(value: BatchTimeout) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_batch_timeout() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get new_epoch() {
            return pb_1.Message.getWrapperField(this, NewEpoch, 11) as NewEpoch;
        }
        set new_epoch(value: NewEpoch) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_new_epoch() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get Type() {
            const cases: {
                [index: number]: "none" | "request_batch" | "new_batch" | "request_transactions" | "transactions_response" | "request_transaction_ids" | "transaction_ids_response" | "request_batch_id" | "batch_id_response" | "new_transactions" | "batch_timeout" | "new_epoch";
            } = {
                0: "none",
                1: "request_batch",
                2: "new_batch",
                3: "request_transactions",
                4: "transactions_response",
                5: "request_transaction_ids",
                6: "transaction_ids_response",
                7: "request_batch_id",
                8: "batch_id_response",
                9: "new_transactions",
                10: "batch_timeout",
                11: "new_epoch"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])];
        }
        static fromObject(data: {
            request_batch?: ReturnType<typeof RequestBatch.prototype.toObject>;
            new_batch?: ReturnType<typeof NewBatch.prototype.toObject>;
            request_transactions?: ReturnType<typeof RequestTransactions.prototype.toObject>;
            transactions_response?: ReturnType<typeof TransactionsResponse.prototype.toObject>;
            request_transaction_ids?: ReturnType<typeof RequestTransactionIDs.prototype.toObject>;
            transaction_ids_response?: ReturnType<typeof TransactionIDsResponse.prototype.toObject>;
            request_batch_id?: ReturnType<typeof RequestBatchID.prototype.toObject>;
            batch_id_response?: ReturnType<typeof BatchIDResponse.prototype.toObject>;
            new_transactions?: ReturnType<typeof NewTransactions.prototype.toObject>;
            batch_timeout?: ReturnType<typeof BatchTimeout.prototype.toObject>;
            new_epoch?: ReturnType<typeof NewEpoch.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.request_batch != null) {
                message.request_batch = RequestBatch.fromObject(data.request_batch);
            }
            if (data.new_batch != null) {
                message.new_batch = NewBatch.fromObject(data.new_batch);
            }
            if (data.request_transactions != null) {
                message.request_transactions = RequestTransactions.fromObject(data.request_transactions);
            }
            if (data.transactions_response != null) {
                message.transactions_response = TransactionsResponse.fromObject(data.transactions_response);
            }
            if (data.request_transaction_ids != null) {
                message.request_transaction_ids = RequestTransactionIDs.fromObject(data.request_transaction_ids);
            }
            if (data.transaction_ids_response != null) {
                message.transaction_ids_response = TransactionIDsResponse.fromObject(data.transaction_ids_response);
            }
            if (data.request_batch_id != null) {
                message.request_batch_id = RequestBatchID.fromObject(data.request_batch_id);
            }
            if (data.batch_id_response != null) {
                message.batch_id_response = BatchIDResponse.fromObject(data.batch_id_response);
            }
            if (data.new_transactions != null) {
                message.new_transactions = NewTransactions.fromObject(data.new_transactions);
            }
            if (data.batch_timeout != null) {
                message.batch_timeout = BatchTimeout.fromObject(data.batch_timeout);
            }
            if (data.new_epoch != null) {
                message.new_epoch = NewEpoch.fromObject(data.new_epoch);
            }
            return message;
        }
        toObject() {
            const data: {
                request_batch?: ReturnType<typeof RequestBatch.prototype.toObject>;
                new_batch?: ReturnType<typeof NewBatch.prototype.toObject>;
                request_transactions?: ReturnType<typeof RequestTransactions.prototype.toObject>;
                transactions_response?: ReturnType<typeof TransactionsResponse.prototype.toObject>;
                request_transaction_ids?: ReturnType<typeof RequestTransactionIDs.prototype.toObject>;
                transaction_ids_response?: ReturnType<typeof TransactionIDsResponse.prototype.toObject>;
                request_batch_id?: ReturnType<typeof RequestBatchID.prototype.toObject>;
                batch_id_response?: ReturnType<typeof BatchIDResponse.prototype.toObject>;
                new_transactions?: ReturnType<typeof NewTransactions.prototype.toObject>;
                batch_timeout?: ReturnType<typeof BatchTimeout.prototype.toObject>;
                new_epoch?: ReturnType<typeof NewEpoch.prototype.toObject>;
            } = {};
            if (this.request_batch != null) {
                data.request_batch = this.request_batch.toObject();
            }
            if (this.new_batch != null) {
                data.new_batch = this.new_batch.toObject();
            }
            if (this.request_transactions != null) {
                data.request_transactions = this.request_transactions.toObject();
            }
            if (this.transactions_response != null) {
                data.transactions_response = this.transactions_response.toObject();
            }
            if (this.request_transaction_ids != null) {
                data.request_transaction_ids = this.request_transaction_ids.toObject();
            }
            if (this.transaction_ids_response != null) {
                data.transaction_ids_response = this.transaction_ids_response.toObject();
            }
            if (this.request_batch_id != null) {
                data.request_batch_id = this.request_batch_id.toObject();
            }
            if (this.batch_id_response != null) {
                data.batch_id_response = this.batch_id_response.toObject();
            }
            if (this.new_transactions != null) {
                data.new_transactions = this.new_transactions.toObject();
            }
            if (this.batch_timeout != null) {
                data.batch_timeout = this.batch_timeout.toObject();
            }
            if (this.new_epoch != null) {
                data.new_epoch = this.new_epoch.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_request_batch)
                writer.writeMessage(1, this.request_batch, () => this.request_batch.serialize(writer));
            if (this.has_new_batch)
                writer.writeMessage(2, this.new_batch, () => this.new_batch.serialize(writer));
            if (this.has_request_transactions)
                writer.writeMessage(3, this.request_transactions, () => this.request_transactions.serialize(writer));
            if (this.has_transactions_response)
                writer.writeMessage(4, this.transactions_response, () => this.transactions_response.serialize(writer));
            if (this.has_request_transaction_ids)
                writer.writeMessage(5, this.request_transaction_ids, () => this.request_transaction_ids.serialize(writer));
            if (this.has_transaction_ids_response)
                writer.writeMessage(6, this.transaction_ids_response, () => this.transaction_ids_response.serialize(writer));
            if (this.has_request_batch_id)
                writer.writeMessage(7, this.request_batch_id, () => this.request_batch_id.serialize(writer));
            if (this.has_batch_id_response)
                writer.writeMessage(8, this.batch_id_response, () => this.batch_id_response.serialize(writer));
            if (this.has_new_transactions)
                writer.writeMessage(9, this.new_transactions, () => this.new_transactions.serialize(writer));
            if (this.has_batch_timeout)
                writer.writeMessage(10, this.batch_timeout, () => this.batch_timeout.serialize(writer));
            if (this.has_new_epoch)
                writer.writeMessage(11, this.new_epoch, () => this.new_epoch.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.request_batch, () => message.request_batch = RequestBatch.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.new_batch, () => message.new_batch = NewBatch.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.request_transactions, () => message.request_transactions = RequestTransactions.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.transactions_response, () => message.transactions_response = TransactionsResponse.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.request_transaction_ids, () => message.request_transaction_ids = RequestTransactionIDs.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.transaction_ids_response, () => message.transaction_ids_response = TransactionIDsResponse.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.request_batch_id, () => message.request_batch_id = RequestBatchID.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.batch_id_response, () => message.batch_id_response = BatchIDResponse.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.new_transactions, () => message.new_transactions = NewTransactions.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.batch_timeout, () => message.batch_timeout = BatchTimeout.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.new_epoch, () => message.new_epoch = NewEpoch.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class NewEpoch extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            epoch_nr?: number;
            client_progress?: dependency_4.trantorpb.ClientProgress;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("epoch_nr" in data && data.epoch_nr != undefined) {
                    this.epoch_nr = data.epoch_nr;
                }
                if ("client_progress" in data && data.client_progress != undefined) {
                    this.client_progress = data.client_progress;
                }
            }
        }
        get epoch_nr() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set epoch_nr(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get client_progress() {
            return pb_1.Message.getWrapperField(this, dependency_4.trantorpb.ClientProgress, 2) as dependency_4.trantorpb.ClientProgress;
        }
        set client_progress(value: dependency_4.trantorpb.ClientProgress) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_client_progress() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            epoch_nr?: number;
            client_progress?: ReturnType<typeof dependency_4.trantorpb.ClientProgress.prototype.toObject>;
        }): NewEpoch {
            const message = new NewEpoch({});
            if (data.epoch_nr != null) {
                message.epoch_nr = data.epoch_nr;
            }
            if (data.client_progress != null) {
                message.client_progress = dependency_4.trantorpb.ClientProgress.fromObject(data.client_progress);
            }
            return message;
        }
        toObject() {
            const data: {
                epoch_nr?: number;
                client_progress?: ReturnType<typeof dependency_4.trantorpb.ClientProgress.prototype.toObject>;
            } = {};
            if (this.epoch_nr != null) {
                data.epoch_nr = this.epoch_nr;
            }
            if (this.client_progress != null) {
                data.client_progress = this.client_progress.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.epoch_nr != 0)
                writer.writeUint64(1, this.epoch_nr);
            if (this.has_client_progress)
                writer.writeMessage(2, this.client_progress, () => this.client_progress.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewEpoch {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewEpoch();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.epoch_nr = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.client_progress, () => message.client_progress = dependency_4.trantorpb.ClientProgress.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewEpoch {
            return NewEpoch.deserialize(bytes);
        }
    }
    export class NewTransactions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transactions?: dependency_4.trantorpb.Transaction[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transactions" in data && data.transactions != undefined) {
                    this.transactions = data.transactions;
                }
            }
        }
        get transactions() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.trantorpb.Transaction, 1) as dependency_4.trantorpb.Transaction[];
        }
        set transactions(value: dependency_4.trantorpb.Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            transactions?: ReturnType<typeof dependency_4.trantorpb.Transaction.prototype.toObject>[];
        }): NewTransactions {
            const message = new NewTransactions({});
            if (data.transactions != null) {
                message.transactions = data.transactions.map(item => dependency_4.trantorpb.Transaction.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                transactions?: ReturnType<typeof dependency_4.trantorpb.Transaction.prototype.toObject>[];
            } = {};
            if (this.transactions != null) {
                data.transactions = this.transactions.map((item: dependency_4.trantorpb.Transaction) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transactions.length)
                writer.writeRepeatedMessage(1, this.transactions, (item: dependency_4.trantorpb.Transaction) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewTransactions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewTransactions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transactions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.trantorpb.Transaction.deserialize(reader), dependency_4.trantorpb.Transaction));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewTransactions {
            return NewTransactions.deserialize(bytes);
        }
    }
    export class RequestBatch extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            epoch?: number;
            origin?: RequestBatchOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("epoch" in data && data.epoch != undefined) {
                    this.epoch = data.epoch;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get epoch() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set epoch(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, RequestBatchOrigin, 2) as RequestBatchOrigin;
        }
        set origin(value: RequestBatchOrigin) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            epoch?: number;
            origin?: ReturnType<typeof RequestBatchOrigin.prototype.toObject>;
        }): RequestBatch {
            const message = new RequestBatch({});
            if (data.epoch != null) {
                message.epoch = data.epoch;
            }
            if (data.origin != null) {
                message.origin = RequestBatchOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                epoch?: number;
                origin?: ReturnType<typeof RequestBatchOrigin.prototype.toObject>;
            } = {};
            if (this.epoch != null) {
                data.epoch = this.epoch;
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.epoch != 0)
                writer.writeUint64(1, this.epoch);
            if (this.has_origin)
                writer.writeMessage(2, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestBatch {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestBatch();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.epoch = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.origin, () => message.origin = RequestBatchOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestBatch {
            return RequestBatch.deserialize(bytes);
        }
    }
    export class NewBatch extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tx_ids?: Uint8Array[];
            txs?: dependency_4.trantorpb.Transaction[];
            origin?: RequestBatchOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tx_ids" in data && data.tx_ids != undefined) {
                    this.tx_ids = data.tx_ids;
                }
                if ("txs" in data && data.txs != undefined) {
                    this.txs = data.txs;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get tx_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set tx_ids(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get txs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.trantorpb.Transaction, 2) as dependency_4.trantorpb.Transaction[];
        }
        set txs(value: dependency_4.trantorpb.Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, RequestBatchOrigin, 3) as RequestBatchOrigin;
        }
        set origin(value: RequestBatchOrigin) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            tx_ids?: Uint8Array[];
            txs?: ReturnType<typeof dependency_4.trantorpb.Transaction.prototype.toObject>[];
            origin?: ReturnType<typeof RequestBatchOrigin.prototype.toObject>;
        }): NewBatch {
            const message = new NewBatch({});
            if (data.tx_ids != null) {
                message.tx_ids = data.tx_ids;
            }
            if (data.txs != null) {
                message.txs = data.txs.map(item => dependency_4.trantorpb.Transaction.fromObject(item));
            }
            if (data.origin != null) {
                message.origin = RequestBatchOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                tx_ids?: Uint8Array[];
                txs?: ReturnType<typeof dependency_4.trantorpb.Transaction.prototype.toObject>[];
                origin?: ReturnType<typeof RequestBatchOrigin.prototype.toObject>;
            } = {};
            if (this.tx_ids != null) {
                data.tx_ids = this.tx_ids;
            }
            if (this.txs != null) {
                data.txs = this.txs.map((item: dependency_4.trantorpb.Transaction) => item.toObject());
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tx_ids.length)
                writer.writeRepeatedBytes(1, this.tx_ids);
            if (this.txs.length)
                writer.writeRepeatedMessage(2, this.txs, (item: dependency_4.trantorpb.Transaction) => item.serialize(writer));
            if (this.has_origin)
                writer.writeMessage(3, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewBatch {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewBatch();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    case 2:
                        reader.readMessage(message.txs, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_4.trantorpb.Transaction.deserialize(reader), dependency_4.trantorpb.Transaction));
                        break;
                    case 3:
                        reader.readMessage(message.origin, () => message.origin = RequestBatchOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewBatch {
            return NewBatch.deserialize(bytes);
        }
    }
    export class RequestTransactions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tx_ids?: Uint8Array[];
            origin?: RequestTransactionsOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tx_ids" in data && data.tx_ids != undefined) {
                    this.tx_ids = data.tx_ids;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get tx_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set tx_ids(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, RequestTransactionsOrigin, 2) as RequestTransactionsOrigin;
        }
        set origin(value: RequestTransactionsOrigin) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            tx_ids?: Uint8Array[];
            origin?: ReturnType<typeof RequestTransactionsOrigin.prototype.toObject>;
        }): RequestTransactions {
            const message = new RequestTransactions({});
            if (data.tx_ids != null) {
                message.tx_ids = data.tx_ids;
            }
            if (data.origin != null) {
                message.origin = RequestTransactionsOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                tx_ids?: Uint8Array[];
                origin?: ReturnType<typeof RequestTransactionsOrigin.prototype.toObject>;
            } = {};
            if (this.tx_ids != null) {
                data.tx_ids = this.tx_ids;
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tx_ids.length)
                writer.writeRepeatedBytes(1, this.tx_ids);
            if (this.has_origin)
                writer.writeMessage(2, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestTransactions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestTransactions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    case 2:
                        reader.readMessage(message.origin, () => message.origin = RequestTransactionsOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestTransactions {
            return RequestTransactions.deserialize(bytes);
        }
    }
    export class TransactionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            found_ids?: Uint8Array[];
            found_txs?: dependency_4.trantorpb.Transaction[];
            missing_ids?: Uint8Array[];
            origin?: RequestTransactionsOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("found_ids" in data && data.found_ids != undefined) {
                    this.found_ids = data.found_ids;
                }
                if ("found_txs" in data && data.found_txs != undefined) {
                    this.found_txs = data.found_txs;
                }
                if ("missing_ids" in data && data.missing_ids != undefined) {
                    this.missing_ids = data.missing_ids;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get found_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set found_ids(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get found_txs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.trantorpb.Transaction, 2) as dependency_4.trantorpb.Transaction[];
        }
        set found_txs(value: dependency_4.trantorpb.Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get missing_ids() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as Uint8Array[];
        }
        set missing_ids(value: Uint8Array[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, RequestTransactionsOrigin, 4) as RequestTransactionsOrigin;
        }
        set origin(value: RequestTransactionsOrigin) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            found_ids?: Uint8Array[];
            found_txs?: ReturnType<typeof dependency_4.trantorpb.Transaction.prototype.toObject>[];
            missing_ids?: Uint8Array[];
            origin?: ReturnType<typeof RequestTransactionsOrigin.prototype.toObject>;
        }): TransactionsResponse {
            const message = new TransactionsResponse({});
            if (data.found_ids != null) {
                message.found_ids = data.found_ids;
            }
            if (data.found_txs != null) {
                message.found_txs = data.found_txs.map(item => dependency_4.trantorpb.Transaction.fromObject(item));
            }
            if (data.missing_ids != null) {
                message.missing_ids = data.missing_ids;
            }
            if (data.origin != null) {
                message.origin = RequestTransactionsOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                found_ids?: Uint8Array[];
                found_txs?: ReturnType<typeof dependency_4.trantorpb.Transaction.prototype.toObject>[];
                missing_ids?: Uint8Array[];
                origin?: ReturnType<typeof RequestTransactionsOrigin.prototype.toObject>;
            } = {};
            if (this.found_ids != null) {
                data.found_ids = this.found_ids;
            }
            if (this.found_txs != null) {
                data.found_txs = this.found_txs.map((item: dependency_4.trantorpb.Transaction) => item.toObject());
            }
            if (this.missing_ids != null) {
                data.missing_ids = this.missing_ids;
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.found_ids.length)
                writer.writeRepeatedBytes(1, this.found_ids);
            if (this.found_txs.length)
                writer.writeRepeatedMessage(2, this.found_txs, (item: dependency_4.trantorpb.Transaction) => item.serialize(writer));
            if (this.missing_ids.length)
                writer.writeRepeatedBytes(3, this.missing_ids);
            if (this.has_origin)
                writer.writeMessage(4, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    case 2:
                        reader.readMessage(message.found_txs, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_4.trantorpb.Transaction.deserialize(reader), dependency_4.trantorpb.Transaction));
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readBytes());
                        break;
                    case 4:
                        reader.readMessage(message.origin, () => message.origin = RequestTransactionsOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionsResponse {
            return TransactionsResponse.deserialize(bytes);
        }
    }
    export class RequestTransactionIDs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            txs?: dependency_4.trantorpb.Transaction[];
            origin?: RequestTransactionIDsOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("txs" in data && data.txs != undefined) {
                    this.txs = data.txs;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get txs() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.trantorpb.Transaction, 1) as dependency_4.trantorpb.Transaction[];
        }
        set txs(value: dependency_4.trantorpb.Transaction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, RequestTransactionIDsOrigin, 2) as RequestTransactionIDsOrigin;
        }
        set origin(value: RequestTransactionIDsOrigin) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            txs?: ReturnType<typeof dependency_4.trantorpb.Transaction.prototype.toObject>[];
            origin?: ReturnType<typeof RequestTransactionIDsOrigin.prototype.toObject>;
        }): RequestTransactionIDs {
            const message = new RequestTransactionIDs({});
            if (data.txs != null) {
                message.txs = data.txs.map(item => dependency_4.trantorpb.Transaction.fromObject(item));
            }
            if (data.origin != null) {
                message.origin = RequestTransactionIDsOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                txs?: ReturnType<typeof dependency_4.trantorpb.Transaction.prototype.toObject>[];
                origin?: ReturnType<typeof RequestTransactionIDsOrigin.prototype.toObject>;
            } = {};
            if (this.txs != null) {
                data.txs = this.txs.map((item: dependency_4.trantorpb.Transaction) => item.toObject());
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.txs.length)
                writer.writeRepeatedMessage(1, this.txs, (item: dependency_4.trantorpb.Transaction) => item.serialize(writer));
            if (this.has_origin)
                writer.writeMessage(2, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestTransactionIDs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestTransactionIDs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.txs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.trantorpb.Transaction.deserialize(reader), dependency_4.trantorpb.Transaction));
                        break;
                    case 2:
                        reader.readMessage(message.origin, () => message.origin = RequestTransactionIDsOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestTransactionIDs {
            return RequestTransactionIDs.deserialize(bytes);
        }
    }
    export class TransactionIDsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tx_ids?: Uint8Array[];
            origin?: RequestTransactionIDsOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tx_ids" in data && data.tx_ids != undefined) {
                    this.tx_ids = data.tx_ids;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get tx_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set tx_ids(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, RequestTransactionIDsOrigin, 2) as RequestTransactionIDsOrigin;
        }
        set origin(value: RequestTransactionIDsOrigin) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            tx_ids?: Uint8Array[];
            origin?: ReturnType<typeof RequestTransactionIDsOrigin.prototype.toObject>;
        }): TransactionIDsResponse {
            const message = new TransactionIDsResponse({});
            if (data.tx_ids != null) {
                message.tx_ids = data.tx_ids;
            }
            if (data.origin != null) {
                message.origin = RequestTransactionIDsOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                tx_ids?: Uint8Array[];
                origin?: ReturnType<typeof RequestTransactionIDsOrigin.prototype.toObject>;
            } = {};
            if (this.tx_ids != null) {
                data.tx_ids = this.tx_ids;
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tx_ids.length)
                writer.writeRepeatedBytes(1, this.tx_ids);
            if (this.has_origin)
                writer.writeMessage(2, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionIDsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionIDsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    case 2:
                        reader.readMessage(message.origin, () => message.origin = RequestTransactionIDsOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionIDsResponse {
            return TransactionIDsResponse.deserialize(bytes);
        }
    }
    export class RequestBatchID extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tx_ids?: Uint8Array[];
            origin?: RequestBatchIDOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tx_ids" in data && data.tx_ids != undefined) {
                    this.tx_ids = data.tx_ids;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get tx_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set tx_ids(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, RequestBatchIDOrigin, 2) as RequestBatchIDOrigin;
        }
        set origin(value: RequestBatchIDOrigin) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            tx_ids?: Uint8Array[];
            origin?: ReturnType<typeof RequestBatchIDOrigin.prototype.toObject>;
        }): RequestBatchID {
            const message = new RequestBatchID({});
            if (data.tx_ids != null) {
                message.tx_ids = data.tx_ids;
            }
            if (data.origin != null) {
                message.origin = RequestBatchIDOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                tx_ids?: Uint8Array[];
                origin?: ReturnType<typeof RequestBatchIDOrigin.prototype.toObject>;
            } = {};
            if (this.tx_ids != null) {
                data.tx_ids = this.tx_ids;
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tx_ids.length)
                writer.writeRepeatedBytes(1, this.tx_ids);
            if (this.has_origin)
                writer.writeMessage(2, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestBatchID {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestBatchID();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    case 2:
                        reader.readMessage(message.origin, () => message.origin = RequestBatchIDOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestBatchID {
            return RequestBatchID.deserialize(bytes);
        }
    }
    export class BatchIDResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch_id?: Uint8Array;
            origin?: RequestBatchIDOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch_id" in data && data.batch_id != undefined) {
                    this.batch_id = data.batch_id;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get batch_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set batch_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, RequestBatchIDOrigin, 2) as RequestBatchIDOrigin;
        }
        set origin(value: RequestBatchIDOrigin) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            batch_id?: Uint8Array;
            origin?: ReturnType<typeof RequestBatchIDOrigin.prototype.toObject>;
        }): BatchIDResponse {
            const message = new BatchIDResponse({});
            if (data.batch_id != null) {
                message.batch_id = data.batch_id;
            }
            if (data.origin != null) {
                message.origin = RequestBatchIDOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                batch_id?: Uint8Array;
                origin?: ReturnType<typeof RequestBatchIDOrigin.prototype.toObject>;
            } = {};
            if (this.batch_id != null) {
                data.batch_id = this.batch_id;
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.batch_id.length)
                writer.writeBytes(1, this.batch_id);
            if (this.has_origin)
                writer.writeMessage(2, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchIDResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchIDResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.batch_id = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.origin, () => message.origin = RequestBatchIDOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchIDResponse {
            return BatchIDResponse.deserialize(bytes);
        }
    }
    export class BatchTimeout extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batchReqID?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batchReqID" in data && data.batchReqID != undefined) {
                    this.batchReqID = data.batchReqID;
                }
            }
        }
        get batchReqID() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set batchReqID(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            batchReqID?: number;
        }): BatchTimeout {
            const message = new BatchTimeout({});
            if (data.batchReqID != null) {
                message.batchReqID = data.batchReqID;
            }
            return message;
        }
        toObject() {
            const data: {
                batchReqID?: number;
            } = {};
            if (this.batchReqID != null) {
                data.batchReqID = this.batchReqID;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.batchReqID != 0)
                writer.writeUint64(1, this.batchReqID);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchTimeout {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchTimeout();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.batchReqID = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchTimeout {
            return BatchTimeout.deserialize(bytes);
        }
    }
    export class RequestBatchOrigin extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            module?: string;
        } & (({
            context_store?: dependency_1.contextstorepb.Origin;
            dsl?: never;
        } | {
            context_store?: never;
            dsl?: dependency_2.dslpb.Origin;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module" in data && data.module != undefined) {
                    this.module = data.module;
                }
                if ("context_store" in data && data.context_store != undefined) {
                    this.context_store = data.context_store;
                }
                if ("dsl" in data && data.dsl != undefined) {
                    this.dsl = data.dsl;
                }
            }
        }
        get module() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set module(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get context_store() {
            return pb_1.Message.getWrapperField(this, dependency_1.contextstorepb.Origin, 2) as dependency_1.contextstorepb.Origin;
        }
        set context_store(value: dependency_1.contextstorepb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_context_store() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dsl() {
            return pb_1.Message.getWrapperField(this, dependency_2.dslpb.Origin, 3) as dependency_2.dslpb.Origin;
        }
        set dsl(value: dependency_2.dslpb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_dsl() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get Type() {
            const cases: {
                [index: number]: "none" | "context_store" | "dsl";
            } = {
                0: "none",
                2: "context_store",
                3: "dsl"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            module?: string;
            context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
            dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
        }): RequestBatchOrigin {
            const message = new RequestBatchOrigin({});
            if (data.module != null) {
                message.module = data.module;
            }
            if (data.context_store != null) {
                message.context_store = dependency_1.contextstorepb.Origin.fromObject(data.context_store);
            }
            if (data.dsl != null) {
                message.dsl = dependency_2.dslpb.Origin.fromObject(data.dsl);
            }
            return message;
        }
        toObject() {
            const data: {
                module?: string;
                context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
                dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
            } = {};
            if (this.module != null) {
                data.module = this.module;
            }
            if (this.context_store != null) {
                data.context_store = this.context_store.toObject();
            }
            if (this.dsl != null) {
                data.dsl = this.dsl.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.module.length)
                writer.writeString(1, this.module);
            if (this.has_context_store)
                writer.writeMessage(2, this.context_store, () => this.context_store.serialize(writer));
            if (this.has_dsl)
                writer.writeMessage(3, this.dsl, () => this.dsl.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestBatchOrigin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestBatchOrigin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.module = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.context_store, () => message.context_store = dependency_1.contextstorepb.Origin.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.dsl, () => message.dsl = dependency_2.dslpb.Origin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestBatchOrigin {
            return RequestBatchOrigin.deserialize(bytes);
        }
    }
    export class RequestTransactionsOrigin extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            module?: string;
        } & (({
            context_store?: dependency_1.contextstorepb.Origin;
            dsl?: never;
        } | {
            context_store?: never;
            dsl?: dependency_2.dslpb.Origin;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module" in data && data.module != undefined) {
                    this.module = data.module;
                }
                if ("context_store" in data && data.context_store != undefined) {
                    this.context_store = data.context_store;
                }
                if ("dsl" in data && data.dsl != undefined) {
                    this.dsl = data.dsl;
                }
            }
        }
        get module() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set module(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get context_store() {
            return pb_1.Message.getWrapperField(this, dependency_1.contextstorepb.Origin, 2) as dependency_1.contextstorepb.Origin;
        }
        set context_store(value: dependency_1.contextstorepb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_context_store() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dsl() {
            return pb_1.Message.getWrapperField(this, dependency_2.dslpb.Origin, 3) as dependency_2.dslpb.Origin;
        }
        set dsl(value: dependency_2.dslpb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_dsl() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get Type() {
            const cases: {
                [index: number]: "none" | "context_store" | "dsl";
            } = {
                0: "none",
                2: "context_store",
                3: "dsl"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            module?: string;
            context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
            dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
        }): RequestTransactionsOrigin {
            const message = new RequestTransactionsOrigin({});
            if (data.module != null) {
                message.module = data.module;
            }
            if (data.context_store != null) {
                message.context_store = dependency_1.contextstorepb.Origin.fromObject(data.context_store);
            }
            if (data.dsl != null) {
                message.dsl = dependency_2.dslpb.Origin.fromObject(data.dsl);
            }
            return message;
        }
        toObject() {
            const data: {
                module?: string;
                context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
                dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
            } = {};
            if (this.module != null) {
                data.module = this.module;
            }
            if (this.context_store != null) {
                data.context_store = this.context_store.toObject();
            }
            if (this.dsl != null) {
                data.dsl = this.dsl.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.module.length)
                writer.writeString(1, this.module);
            if (this.has_context_store)
                writer.writeMessage(2, this.context_store, () => this.context_store.serialize(writer));
            if (this.has_dsl)
                writer.writeMessage(3, this.dsl, () => this.dsl.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestTransactionsOrigin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestTransactionsOrigin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.module = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.context_store, () => message.context_store = dependency_1.contextstorepb.Origin.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.dsl, () => message.dsl = dependency_2.dslpb.Origin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestTransactionsOrigin {
            return RequestTransactionsOrigin.deserialize(bytes);
        }
    }
    export class RequestTransactionIDsOrigin extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            module?: string;
        } & (({
            context_store?: dependency_1.contextstorepb.Origin;
            dsl?: never;
        } | {
            context_store?: never;
            dsl?: dependency_2.dslpb.Origin;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module" in data && data.module != undefined) {
                    this.module = data.module;
                }
                if ("context_store" in data && data.context_store != undefined) {
                    this.context_store = data.context_store;
                }
                if ("dsl" in data && data.dsl != undefined) {
                    this.dsl = data.dsl;
                }
            }
        }
        get module() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set module(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get context_store() {
            return pb_1.Message.getWrapperField(this, dependency_1.contextstorepb.Origin, 2) as dependency_1.contextstorepb.Origin;
        }
        set context_store(value: dependency_1.contextstorepb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_context_store() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dsl() {
            return pb_1.Message.getWrapperField(this, dependency_2.dslpb.Origin, 3) as dependency_2.dslpb.Origin;
        }
        set dsl(value: dependency_2.dslpb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_dsl() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get Type() {
            const cases: {
                [index: number]: "none" | "context_store" | "dsl";
            } = {
                0: "none",
                2: "context_store",
                3: "dsl"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            module?: string;
            context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
            dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
        }): RequestTransactionIDsOrigin {
            const message = new RequestTransactionIDsOrigin({});
            if (data.module != null) {
                message.module = data.module;
            }
            if (data.context_store != null) {
                message.context_store = dependency_1.contextstorepb.Origin.fromObject(data.context_store);
            }
            if (data.dsl != null) {
                message.dsl = dependency_2.dslpb.Origin.fromObject(data.dsl);
            }
            return message;
        }
        toObject() {
            const data: {
                module?: string;
                context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
                dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
            } = {};
            if (this.module != null) {
                data.module = this.module;
            }
            if (this.context_store != null) {
                data.context_store = this.context_store.toObject();
            }
            if (this.dsl != null) {
                data.dsl = this.dsl.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.module.length)
                writer.writeString(1, this.module);
            if (this.has_context_store)
                writer.writeMessage(2, this.context_store, () => this.context_store.serialize(writer));
            if (this.has_dsl)
                writer.writeMessage(3, this.dsl, () => this.dsl.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestTransactionIDsOrigin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestTransactionIDsOrigin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.module = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.context_store, () => message.context_store = dependency_1.contextstorepb.Origin.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.dsl, () => message.dsl = dependency_2.dslpb.Origin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestTransactionIDsOrigin {
            return RequestTransactionIDsOrigin.deserialize(bytes);
        }
    }
    export class RequestBatchIDOrigin extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            module?: string;
        } & (({
            context_store?: dependency_1.contextstorepb.Origin;
            dsl?: never;
        } | {
            context_store?: never;
            dsl?: dependency_2.dslpb.Origin;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module" in data && data.module != undefined) {
                    this.module = data.module;
                }
                if ("context_store" in data && data.context_store != undefined) {
                    this.context_store = data.context_store;
                }
                if ("dsl" in data && data.dsl != undefined) {
                    this.dsl = data.dsl;
                }
            }
        }
        get module() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set module(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get context_store() {
            return pb_1.Message.getWrapperField(this, dependency_1.contextstorepb.Origin, 2) as dependency_1.contextstorepb.Origin;
        }
        set context_store(value: dependency_1.contextstorepb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_context_store() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dsl() {
            return pb_1.Message.getWrapperField(this, dependency_2.dslpb.Origin, 3) as dependency_2.dslpb.Origin;
        }
        set dsl(value: dependency_2.dslpb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_dsl() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get Type() {
            const cases: {
                [index: number]: "none" | "context_store" | "dsl";
            } = {
                0: "none",
                2: "context_store",
                3: "dsl"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            module?: string;
            context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
            dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
        }): RequestBatchIDOrigin {
            const message = new RequestBatchIDOrigin({});
            if (data.module != null) {
                message.module = data.module;
            }
            if (data.context_store != null) {
                message.context_store = dependency_1.contextstorepb.Origin.fromObject(data.context_store);
            }
            if (data.dsl != null) {
                message.dsl = dependency_2.dslpb.Origin.fromObject(data.dsl);
            }
            return message;
        }
        toObject() {
            const data: {
                module?: string;
                context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
                dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
            } = {};
            if (this.module != null) {
                data.module = this.module;
            }
            if (this.context_store != null) {
                data.context_store = this.context_store.toObject();
            }
            if (this.dsl != null) {
                data.dsl = this.dsl.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.module.length)
                writer.writeString(1, this.module);
            if (this.has_context_store)
                writer.writeMessage(2, this.context_store, () => this.context_store.serialize(writer));
            if (this.has_dsl)
                writer.writeMessage(3, this.dsl, () => this.dsl.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestBatchIDOrigin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestBatchIDOrigin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.module = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.context_store, () => message.context_store = dependency_1.contextstorepb.Origin.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.dsl, () => message.dsl = dependency_2.dslpb.Origin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RequestBatchIDOrigin {
            return RequestBatchIDOrigin.deserialize(bytes);
        }
    }
}
