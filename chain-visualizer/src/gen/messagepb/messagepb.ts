/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: messagepb/messagepb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../isspb/isspb";
import * as dependency_2 from "./../bcbpb/bcbpb";
import * as dependency_3 from "./../availabilitypb/mscpb/mscpb";
import * as dependency_4 from "./../pingpongpb/pingpongpb";
import * as dependency_5 from "./../checkpointpb/checkpointpb";
import * as dependency_6 from "./../ordererpb/ordererpb";
import * as dependency_7 from "./../blockchainpb/broadcastpb/broadcastpb";
import * as dependency_8 from "./../blockchainpb/synchronizerpb/synchronizerpb";
import * as dependency_9 from "./../mir/codegen_extensions";
import * as dependency_10 from "./../net/codegen_extensions";
import * as pb_1 from "google-protobuf";
export namespace messagepb {
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3, 4, 5, 6, 7, 8, 9]];
        constructor(data?: any[] | ({
            dest_module?: string;
        } & (({
            iss?: dependency_1.isspb.ISSMessage;
            bcb?: never;
            multisig_collector?: never;
            pingpong?: never;
            checkpoint?: never;
            orderer?: never;
            broadcast?: never;
            synchronizer?: never;
        } | {
            iss?: never;
            bcb?: dependency_2.bcbpb.Message;
            multisig_collector?: never;
            pingpong?: never;
            checkpoint?: never;
            orderer?: never;
            broadcast?: never;
            synchronizer?: never;
        } | {
            iss?: never;
            bcb?: never;
            multisig_collector?: dependency_3.availabilitypb.mscpb.Message;
            pingpong?: never;
            checkpoint?: never;
            orderer?: never;
            broadcast?: never;
            synchronizer?: never;
        } | {
            iss?: never;
            bcb?: never;
            multisig_collector?: never;
            pingpong?: dependency_4.pingpongpb.Message;
            checkpoint?: never;
            orderer?: never;
            broadcast?: never;
            synchronizer?: never;
        } | {
            iss?: never;
            bcb?: never;
            multisig_collector?: never;
            pingpong?: never;
            checkpoint?: dependency_5.checkpointpb.Message;
            orderer?: never;
            broadcast?: never;
            synchronizer?: never;
        } | {
            iss?: never;
            bcb?: never;
            multisig_collector?: never;
            pingpong?: never;
            checkpoint?: never;
            orderer?: dependency_6.ordererpb.Message;
            broadcast?: never;
            synchronizer?: never;
        } | {
            iss?: never;
            bcb?: never;
            multisig_collector?: never;
            pingpong?: never;
            checkpoint?: never;
            orderer?: never;
            broadcast?: dependency_7.broadcastpb.Message;
            synchronizer?: never;
        } | {
            iss?: never;
            bcb?: never;
            multisig_collector?: never;
            pingpong?: never;
            checkpoint?: never;
            orderer?: never;
            broadcast?: never;
            synchronizer?: dependency_8.synchronizerpb.Message;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("dest_module" in data && data.dest_module != undefined) {
                    this.dest_module = data.dest_module;
                }
                if ("iss" in data && data.iss != undefined) {
                    this.iss = data.iss;
                }
                if ("bcb" in data && data.bcb != undefined) {
                    this.bcb = data.bcb;
                }
                if ("multisig_collector" in data && data.multisig_collector != undefined) {
                    this.multisig_collector = data.multisig_collector;
                }
                if ("pingpong" in data && data.pingpong != undefined) {
                    this.pingpong = data.pingpong;
                }
                if ("checkpoint" in data && data.checkpoint != undefined) {
                    this.checkpoint = data.checkpoint;
                }
                if ("orderer" in data && data.orderer != undefined) {
                    this.orderer = data.orderer;
                }
                if ("broadcast" in data && data.broadcast != undefined) {
                    this.broadcast = data.broadcast;
                }
                if ("synchronizer" in data && data.synchronizer != undefined) {
                    this.synchronizer = data.synchronizer;
                }
            }
        }
        get dest_module() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set dest_module(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get iss() {
            return pb_1.Message.getWrapperField(this, dependency_1.isspb.ISSMessage, 2) as dependency_1.isspb.ISSMessage;
        }
        set iss(value: dependency_1.isspb.ISSMessage) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_iss() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get bcb() {
            return pb_1.Message.getWrapperField(this, dependency_2.bcbpb.Message, 3) as dependency_2.bcbpb.Message;
        }
        set bcb(value: dependency_2.bcbpb.Message) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_bcb() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get multisig_collector() {
            return pb_1.Message.getWrapperField(this, dependency_3.availabilitypb.mscpb.Message, 4) as dependency_3.availabilitypb.mscpb.Message;
        }
        set multisig_collector(value: dependency_3.availabilitypb.mscpb.Message) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_multisig_collector() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get pingpong() {
            return pb_1.Message.getWrapperField(this, dependency_4.pingpongpb.Message, 5) as dependency_4.pingpongpb.Message;
        }
        set pingpong(value: dependency_4.pingpongpb.Message) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_pingpong() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get checkpoint() {
            return pb_1.Message.getWrapperField(this, dependency_5.checkpointpb.Message, 6) as dependency_5.checkpointpb.Message;
        }
        set checkpoint(value: dependency_5.checkpointpb.Message) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_checkpoint() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get orderer() {
            return pb_1.Message.getWrapperField(this, dependency_6.ordererpb.Message, 7) as dependency_6.ordererpb.Message;
        }
        set orderer(value: dependency_6.ordererpb.Message) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_orderer() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get broadcast() {
            return pb_1.Message.getWrapperField(this, dependency_7.broadcastpb.Message, 8) as dependency_7.broadcastpb.Message;
        }
        set broadcast(value: dependency_7.broadcastpb.Message) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_broadcast() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get synchronizer() {
            return pb_1.Message.getWrapperField(this, dependency_8.synchronizerpb.Message, 9) as dependency_8.synchronizerpb.Message;
        }
        set synchronizer(value: dependency_8.synchronizerpb.Message) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_synchronizer() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "iss" | "bcb" | "multisig_collector" | "pingpong" | "checkpoint" | "orderer" | "broadcast" | "synchronizer";
            } = {
                0: "none",
                2: "iss",
                3: "bcb",
                4: "multisig_collector",
                5: "pingpong",
                6: "checkpoint",
                7: "orderer",
                8: "broadcast",
                9: "synchronizer"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4, 5, 6, 7, 8, 9])];
        }
        static fromObject(data: {
            dest_module?: string;
            iss?: ReturnType<typeof dependency_1.isspb.ISSMessage.prototype.toObject>;
            bcb?: ReturnType<typeof dependency_2.bcbpb.Message.prototype.toObject>;
            multisig_collector?: ReturnType<typeof dependency_3.availabilitypb.mscpb.Message.prototype.toObject>;
            pingpong?: ReturnType<typeof dependency_4.pingpongpb.Message.prototype.toObject>;
            checkpoint?: ReturnType<typeof dependency_5.checkpointpb.Message.prototype.toObject>;
            orderer?: ReturnType<typeof dependency_6.ordererpb.Message.prototype.toObject>;
            broadcast?: ReturnType<typeof dependency_7.broadcastpb.Message.prototype.toObject>;
            synchronizer?: ReturnType<typeof dependency_8.synchronizerpb.Message.prototype.toObject>;
        }): Message {
            const message = new Message({});
            if (data.dest_module != null) {
                message.dest_module = data.dest_module;
            }
            if (data.iss != null) {
                message.iss = dependency_1.isspb.ISSMessage.fromObject(data.iss);
            }
            if (data.bcb != null) {
                message.bcb = dependency_2.bcbpb.Message.fromObject(data.bcb);
            }
            if (data.multisig_collector != null) {
                message.multisig_collector = dependency_3.availabilitypb.mscpb.Message.fromObject(data.multisig_collector);
            }
            if (data.pingpong != null) {
                message.pingpong = dependency_4.pingpongpb.Message.fromObject(data.pingpong);
            }
            if (data.checkpoint != null) {
                message.checkpoint = dependency_5.checkpointpb.Message.fromObject(data.checkpoint);
            }
            if (data.orderer != null) {
                message.orderer = dependency_6.ordererpb.Message.fromObject(data.orderer);
            }
            if (data.broadcast != null) {
                message.broadcast = dependency_7.broadcastpb.Message.fromObject(data.broadcast);
            }
            if (data.synchronizer != null) {
                message.synchronizer = dependency_8.synchronizerpb.Message.fromObject(data.synchronizer);
            }
            return message;
        }
        toObject() {
            const data: {
                dest_module?: string;
                iss?: ReturnType<typeof dependency_1.isspb.ISSMessage.prototype.toObject>;
                bcb?: ReturnType<typeof dependency_2.bcbpb.Message.prototype.toObject>;
                multisig_collector?: ReturnType<typeof dependency_3.availabilitypb.mscpb.Message.prototype.toObject>;
                pingpong?: ReturnType<typeof dependency_4.pingpongpb.Message.prototype.toObject>;
                checkpoint?: ReturnType<typeof dependency_5.checkpointpb.Message.prototype.toObject>;
                orderer?: ReturnType<typeof dependency_6.ordererpb.Message.prototype.toObject>;
                broadcast?: ReturnType<typeof dependency_7.broadcastpb.Message.prototype.toObject>;
                synchronizer?: ReturnType<typeof dependency_8.synchronizerpb.Message.prototype.toObject>;
            } = {};
            if (this.dest_module != null) {
                data.dest_module = this.dest_module;
            }
            if (this.iss != null) {
                data.iss = this.iss.toObject();
            }
            if (this.bcb != null) {
                data.bcb = this.bcb.toObject();
            }
            if (this.multisig_collector != null) {
                data.multisig_collector = this.multisig_collector.toObject();
            }
            if (this.pingpong != null) {
                data.pingpong = this.pingpong.toObject();
            }
            if (this.checkpoint != null) {
                data.checkpoint = this.checkpoint.toObject();
            }
            if (this.orderer != null) {
                data.orderer = this.orderer.toObject();
            }
            if (this.broadcast != null) {
                data.broadcast = this.broadcast.toObject();
            }
            if (this.synchronizer != null) {
                data.synchronizer = this.synchronizer.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.dest_module.length)
                writer.writeString(1, this.dest_module);
            if (this.has_iss)
                writer.writeMessage(2, this.iss, () => this.iss.serialize(writer));
            if (this.has_bcb)
                writer.writeMessage(3, this.bcb, () => this.bcb.serialize(writer));
            if (this.has_multisig_collector)
                writer.writeMessage(4, this.multisig_collector, () => this.multisig_collector.serialize(writer));
            if (this.has_pingpong)
                writer.writeMessage(5, this.pingpong, () => this.pingpong.serialize(writer));
            if (this.has_checkpoint)
                writer.writeMessage(6, this.checkpoint, () => this.checkpoint.serialize(writer));
            if (this.has_orderer)
                writer.writeMessage(7, this.orderer, () => this.orderer.serialize(writer));
            if (this.has_broadcast)
                writer.writeMessage(8, this.broadcast, () => this.broadcast.serialize(writer));
            if (this.has_synchronizer)
                writer.writeMessage(9, this.synchronizer, () => this.synchronizer.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.dest_module = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.iss, () => message.iss = dependency_1.isspb.ISSMessage.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.bcb, () => message.bcb = dependency_2.bcbpb.Message.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.multisig_collector, () => message.multisig_collector = dependency_3.availabilitypb.mscpb.Message.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.pingpong, () => message.pingpong = dependency_4.pingpongpb.Message.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.checkpoint, () => message.checkpoint = dependency_5.checkpointpb.Message.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.orderer, () => message.orderer = dependency_6.ordererpb.Message.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.broadcast, () => message.broadcast = dependency_7.broadcastpb.Message.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.synchronizer, () => message.synchronizer = dependency_8.synchronizerpb.Message.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
}
