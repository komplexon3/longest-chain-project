/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: net/grpc/grpctransport.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../messagepb/messagepb";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace grpctransport {
    export class GrpcMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sender?: string;
            msg?: dependency_1.messagepb.Message;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
            }
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get msg() {
            return pb_1.Message.getWrapperField(this, dependency_1.messagepb.Message, 2) as dependency_1.messagepb.Message;
        }
        set msg(value: dependency_1.messagepb.Message) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_msg() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            sender?: string;
            msg?: ReturnType<typeof dependency_1.messagepb.Message.prototype.toObject>;
        }): GrpcMessage {
            const message = new GrpcMessage({});
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.msg != null) {
                message.msg = dependency_1.messagepb.Message.fromObject(data.msg);
            }
            return message;
        }
        toObject() {
            const data: {
                sender?: string;
                msg?: ReturnType<typeof dependency_1.messagepb.Message.prototype.toObject>;
            } = {};
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.msg != null) {
                data.msg = this.msg.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sender.length)
                writer.writeString(1, this.sender);
            if (this.has_msg)
                writer.writeMessage(2, this.msg, () => this.msg.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GrpcMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GrpcMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sender = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.msg, () => message.msg = dependency_1.messagepb.Message.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GrpcMessage {
            return GrpcMessage.deserialize(bytes);
        }
    }
    export class ByeBye extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ByeBye {
            const message = new ByeBye({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ByeBye {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ByeBye();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ByeBye {
            return ByeBye.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedGrpcTransportService {
        static definition = {
            Listen: {
                path: "/grpctransport.GrpcTransport/Listen",
                requestStream: true,
                responseStream: false,
                requestSerialize: (message: GrpcMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GrpcMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ByeBye) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ByeBye.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Listen(call: grpc_1.ServerReadableStream<GrpcMessage, ByeBye>, callback: grpc_1.sendUnaryData<ByeBye>): void;
    }
    export class GrpcTransportClient extends grpc_1.makeGenericClientConstructor(UnimplementedGrpcTransportService.definition, "GrpcTransport", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Listen: GrpWritableServiceInterface<GrpcMessage, ByeBye> = (metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ByeBye>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ByeBye>, callback?: grpc_1.requestCallback<ByeBye>): grpc_1.ClientWritableStream<GrpcMessage> => {
            return super.Listen(metadata, options, callback);
        };
    }
}
