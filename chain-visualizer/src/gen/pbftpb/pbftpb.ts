/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: pbftpb/pbftpb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../mir/codegen_extensions";
import * as dependency_2 from "./../net/codegen_extensions";
import * as pb_1 from "google-protobuf";
export namespace pbftpb {
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]];
        constructor(data?: any[] | ({} & (({
            preprepare?: Preprepare;
            prepare?: never;
            commit?: never;
            done?: never;
            catch_up_request?: never;
            catch_up_response?: never;
            signed_view_change?: never;
            preprepare_request?: never;
            missing_preprepare?: never;
            new_view?: never;
        } | {
            preprepare?: never;
            prepare?: Prepare;
            commit?: never;
            done?: never;
            catch_up_request?: never;
            catch_up_response?: never;
            signed_view_change?: never;
            preprepare_request?: never;
            missing_preprepare?: never;
            new_view?: never;
        } | {
            preprepare?: never;
            prepare?: never;
            commit?: Commit;
            done?: never;
            catch_up_request?: never;
            catch_up_response?: never;
            signed_view_change?: never;
            preprepare_request?: never;
            missing_preprepare?: never;
            new_view?: never;
        } | {
            preprepare?: never;
            prepare?: never;
            commit?: never;
            done?: Done;
            catch_up_request?: never;
            catch_up_response?: never;
            signed_view_change?: never;
            preprepare_request?: never;
            missing_preprepare?: never;
            new_view?: never;
        } | {
            preprepare?: never;
            prepare?: never;
            commit?: never;
            done?: never;
            catch_up_request?: CatchUpRequest;
            catch_up_response?: never;
            signed_view_change?: never;
            preprepare_request?: never;
            missing_preprepare?: never;
            new_view?: never;
        } | {
            preprepare?: never;
            prepare?: never;
            commit?: never;
            done?: never;
            catch_up_request?: never;
            catch_up_response?: CatchUpResponse;
            signed_view_change?: never;
            preprepare_request?: never;
            missing_preprepare?: never;
            new_view?: never;
        } | {
            preprepare?: never;
            prepare?: never;
            commit?: never;
            done?: never;
            catch_up_request?: never;
            catch_up_response?: never;
            signed_view_change?: SignedViewChange;
            preprepare_request?: never;
            missing_preprepare?: never;
            new_view?: never;
        } | {
            preprepare?: never;
            prepare?: never;
            commit?: never;
            done?: never;
            catch_up_request?: never;
            catch_up_response?: never;
            signed_view_change?: never;
            preprepare_request?: PreprepareRequest;
            missing_preprepare?: never;
            new_view?: never;
        } | {
            preprepare?: never;
            prepare?: never;
            commit?: never;
            done?: never;
            catch_up_request?: never;
            catch_up_response?: never;
            signed_view_change?: never;
            preprepare_request?: never;
            missing_preprepare?: MissingPreprepare;
            new_view?: never;
        } | {
            preprepare?: never;
            prepare?: never;
            commit?: never;
            done?: never;
            catch_up_request?: never;
            catch_up_response?: never;
            signed_view_change?: never;
            preprepare_request?: never;
            missing_preprepare?: never;
            new_view?: NewView;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("preprepare" in data && data.preprepare != undefined) {
                    this.preprepare = data.preprepare;
                }
                if ("prepare" in data && data.prepare != undefined) {
                    this.prepare = data.prepare;
                }
                if ("commit" in data && data.commit != undefined) {
                    this.commit = data.commit;
                }
                if ("done" in data && data.done != undefined) {
                    this.done = data.done;
                }
                if ("catch_up_request" in data && data.catch_up_request != undefined) {
                    this.catch_up_request = data.catch_up_request;
                }
                if ("catch_up_response" in data && data.catch_up_response != undefined) {
                    this.catch_up_response = data.catch_up_response;
                }
                if ("signed_view_change" in data && data.signed_view_change != undefined) {
                    this.signed_view_change = data.signed_view_change;
                }
                if ("preprepare_request" in data && data.preprepare_request != undefined) {
                    this.preprepare_request = data.preprepare_request;
                }
                if ("missing_preprepare" in data && data.missing_preprepare != undefined) {
                    this.missing_preprepare = data.missing_preprepare;
                }
                if ("new_view" in data && data.new_view != undefined) {
                    this.new_view = data.new_view;
                }
            }
        }
        get preprepare() {
            return pb_1.Message.getWrapperField(this, Preprepare, 1) as Preprepare;
        }
        set preprepare(value: Preprepare) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_preprepare() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get prepare() {
            return pb_1.Message.getWrapperField(this, Prepare, 2) as Prepare;
        }
        set prepare(value: Prepare) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_prepare() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get commit() {
            return pb_1.Message.getWrapperField(this, Commit, 3) as Commit;
        }
        set commit(value: Commit) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_commit() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get done() {
            return pb_1.Message.getWrapperField(this, Done, 4) as Done;
        }
        set done(value: Done) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_done() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get catch_up_request() {
            return pb_1.Message.getWrapperField(this, CatchUpRequest, 5) as CatchUpRequest;
        }
        set catch_up_request(value: CatchUpRequest) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_catch_up_request() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get catch_up_response() {
            return pb_1.Message.getWrapperField(this, CatchUpResponse, 6) as CatchUpResponse;
        }
        set catch_up_response(value: CatchUpResponse) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_catch_up_response() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get signed_view_change() {
            return pb_1.Message.getWrapperField(this, SignedViewChange, 7) as SignedViewChange;
        }
        set signed_view_change(value: SignedViewChange) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_signed_view_change() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get preprepare_request() {
            return pb_1.Message.getWrapperField(this, PreprepareRequest, 8) as PreprepareRequest;
        }
        set preprepare_request(value: PreprepareRequest) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_preprepare_request() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get missing_preprepare() {
            return pb_1.Message.getWrapperField(this, MissingPreprepare, 9) as MissingPreprepare;
        }
        set missing_preprepare(value: MissingPreprepare) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_missing_preprepare() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get new_view() {
            return pb_1.Message.getWrapperField(this, NewView, 10) as NewView;
        }
        set new_view(value: NewView) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_new_view() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "preprepare" | "prepare" | "commit" | "done" | "catch_up_request" | "catch_up_response" | "signed_view_change" | "preprepare_request" | "missing_preprepare" | "new_view";
            } = {
                0: "none",
                1: "preprepare",
                2: "prepare",
                3: "commit",
                4: "done",
                5: "catch_up_request",
                6: "catch_up_response",
                7: "signed_view_change",
                8: "preprepare_request",
                9: "missing_preprepare",
                10: "new_view"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])];
        }
        static fromObject(data: {
            preprepare?: ReturnType<typeof Preprepare.prototype.toObject>;
            prepare?: ReturnType<typeof Prepare.prototype.toObject>;
            commit?: ReturnType<typeof Commit.prototype.toObject>;
            done?: ReturnType<typeof Done.prototype.toObject>;
            catch_up_request?: ReturnType<typeof CatchUpRequest.prototype.toObject>;
            catch_up_response?: ReturnType<typeof CatchUpResponse.prototype.toObject>;
            signed_view_change?: ReturnType<typeof SignedViewChange.prototype.toObject>;
            preprepare_request?: ReturnType<typeof PreprepareRequest.prototype.toObject>;
            missing_preprepare?: ReturnType<typeof MissingPreprepare.prototype.toObject>;
            new_view?: ReturnType<typeof NewView.prototype.toObject>;
        }): Message {
            const message = new Message({});
            if (data.preprepare != null) {
                message.preprepare = Preprepare.fromObject(data.preprepare);
            }
            if (data.prepare != null) {
                message.prepare = Prepare.fromObject(data.prepare);
            }
            if (data.commit != null) {
                message.commit = Commit.fromObject(data.commit);
            }
            if (data.done != null) {
                message.done = Done.fromObject(data.done);
            }
            if (data.catch_up_request != null) {
                message.catch_up_request = CatchUpRequest.fromObject(data.catch_up_request);
            }
            if (data.catch_up_response != null) {
                message.catch_up_response = CatchUpResponse.fromObject(data.catch_up_response);
            }
            if (data.signed_view_change != null) {
                message.signed_view_change = SignedViewChange.fromObject(data.signed_view_change);
            }
            if (data.preprepare_request != null) {
                message.preprepare_request = PreprepareRequest.fromObject(data.preprepare_request);
            }
            if (data.missing_preprepare != null) {
                message.missing_preprepare = MissingPreprepare.fromObject(data.missing_preprepare);
            }
            if (data.new_view != null) {
                message.new_view = NewView.fromObject(data.new_view);
            }
            return message;
        }
        toObject() {
            const data: {
                preprepare?: ReturnType<typeof Preprepare.prototype.toObject>;
                prepare?: ReturnType<typeof Prepare.prototype.toObject>;
                commit?: ReturnType<typeof Commit.prototype.toObject>;
                done?: ReturnType<typeof Done.prototype.toObject>;
                catch_up_request?: ReturnType<typeof CatchUpRequest.prototype.toObject>;
                catch_up_response?: ReturnType<typeof CatchUpResponse.prototype.toObject>;
                signed_view_change?: ReturnType<typeof SignedViewChange.prototype.toObject>;
                preprepare_request?: ReturnType<typeof PreprepareRequest.prototype.toObject>;
                missing_preprepare?: ReturnType<typeof MissingPreprepare.prototype.toObject>;
                new_view?: ReturnType<typeof NewView.prototype.toObject>;
            } = {};
            if (this.preprepare != null) {
                data.preprepare = this.preprepare.toObject();
            }
            if (this.prepare != null) {
                data.prepare = this.prepare.toObject();
            }
            if (this.commit != null) {
                data.commit = this.commit.toObject();
            }
            if (this.done != null) {
                data.done = this.done.toObject();
            }
            if (this.catch_up_request != null) {
                data.catch_up_request = this.catch_up_request.toObject();
            }
            if (this.catch_up_response != null) {
                data.catch_up_response = this.catch_up_response.toObject();
            }
            if (this.signed_view_change != null) {
                data.signed_view_change = this.signed_view_change.toObject();
            }
            if (this.preprepare_request != null) {
                data.preprepare_request = this.preprepare_request.toObject();
            }
            if (this.missing_preprepare != null) {
                data.missing_preprepare = this.missing_preprepare.toObject();
            }
            if (this.new_view != null) {
                data.new_view = this.new_view.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_preprepare)
                writer.writeMessage(1, this.preprepare, () => this.preprepare.serialize(writer));
            if (this.has_prepare)
                writer.writeMessage(2, this.prepare, () => this.prepare.serialize(writer));
            if (this.has_commit)
                writer.writeMessage(3, this.commit, () => this.commit.serialize(writer));
            if (this.has_done)
                writer.writeMessage(4, this.done, () => this.done.serialize(writer));
            if (this.has_catch_up_request)
                writer.writeMessage(5, this.catch_up_request, () => this.catch_up_request.serialize(writer));
            if (this.has_catch_up_response)
                writer.writeMessage(6, this.catch_up_response, () => this.catch_up_response.serialize(writer));
            if (this.has_signed_view_change)
                writer.writeMessage(7, this.signed_view_change, () => this.signed_view_change.serialize(writer));
            if (this.has_preprepare_request)
                writer.writeMessage(8, this.preprepare_request, () => this.preprepare_request.serialize(writer));
            if (this.has_missing_preprepare)
                writer.writeMessage(9, this.missing_preprepare, () => this.missing_preprepare.serialize(writer));
            if (this.has_new_view)
                writer.writeMessage(10, this.new_view, () => this.new_view.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.preprepare, () => message.preprepare = Preprepare.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.prepare, () => message.prepare = Prepare.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.commit, () => message.commit = Commit.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.done, () => message.done = Done.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.catch_up_request, () => message.catch_up_request = CatchUpRequest.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.catch_up_response, () => message.catch_up_response = CatchUpResponse.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.signed_view_change, () => message.signed_view_change = SignedViewChange.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.preprepare_request, () => message.preprepare_request = PreprepareRequest.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.missing_preprepare, () => message.missing_preprepare = MissingPreprepare.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.new_view, () => message.new_view = NewView.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    export class Preprepare extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sn?: number;
            view?: number;
            data?: Uint8Array;
            aborted?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sn" in data && data.sn != undefined) {
                    this.sn = data.sn;
                }
                if ("view" in data && data.view != undefined) {
                    this.view = data.view;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("aborted" in data && data.aborted != undefined) {
                    this.aborted = data.aborted;
                }
            }
        }
        get sn() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get view() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set view(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get aborted() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set aborted(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            sn?: number;
            view?: number;
            data?: Uint8Array;
            aborted?: boolean;
        }): Preprepare {
            const message = new Preprepare({});
            if (data.sn != null) {
                message.sn = data.sn;
            }
            if (data.view != null) {
                message.view = data.view;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.aborted != null) {
                message.aborted = data.aborted;
            }
            return message;
        }
        toObject() {
            const data: {
                sn?: number;
                view?: number;
                data?: Uint8Array;
                aborted?: boolean;
            } = {};
            if (this.sn != null) {
                data.sn = this.sn;
            }
            if (this.view != null) {
                data.view = this.view;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.aborted != null) {
                data.aborted = this.aborted;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn != 0)
                writer.writeUint64(1, this.sn);
            if (this.view != 0)
                writer.writeUint64(2, this.view);
            if (this.data.length)
                writer.writeBytes(3, this.data);
            if (this.aborted != false)
                writer.writeBool(4, this.aborted);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Preprepare {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Preprepare();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readUint64();
                        break;
                    case 2:
                        message.view = reader.readUint64();
                        break;
                    case 3:
                        message.data = reader.readBytes();
                        break;
                    case 4:
                        message.aborted = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Preprepare {
            return Preprepare.deserialize(bytes);
        }
    }
    export class Prepare extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sn?: number;
            view?: number;
            digest?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sn" in data && data.sn != undefined) {
                    this.sn = data.sn;
                }
                if ("view" in data && data.view != undefined) {
                    this.view = data.view;
                }
                if ("digest" in data && data.digest != undefined) {
                    this.digest = data.digest;
                }
            }
        }
        get sn() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get view() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set view(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get digest() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set digest(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            sn?: number;
            view?: number;
            digest?: Uint8Array;
        }): Prepare {
            const message = new Prepare({});
            if (data.sn != null) {
                message.sn = data.sn;
            }
            if (data.view != null) {
                message.view = data.view;
            }
            if (data.digest != null) {
                message.digest = data.digest;
            }
            return message;
        }
        toObject() {
            const data: {
                sn?: number;
                view?: number;
                digest?: Uint8Array;
            } = {};
            if (this.sn != null) {
                data.sn = this.sn;
            }
            if (this.view != null) {
                data.view = this.view;
            }
            if (this.digest != null) {
                data.digest = this.digest;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn != 0)
                writer.writeUint64(1, this.sn);
            if (this.view != 0)
                writer.writeUint64(2, this.view);
            if (this.digest.length)
                writer.writeBytes(3, this.digest);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Prepare {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Prepare();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readUint64();
                        break;
                    case 2:
                        message.view = reader.readUint64();
                        break;
                    case 3:
                        message.digest = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Prepare {
            return Prepare.deserialize(bytes);
        }
    }
    export class Commit extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sn?: number;
            view?: number;
            digest?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sn" in data && data.sn != undefined) {
                    this.sn = data.sn;
                }
                if ("view" in data && data.view != undefined) {
                    this.view = data.view;
                }
                if ("digest" in data && data.digest != undefined) {
                    this.digest = data.digest;
                }
            }
        }
        get sn() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get view() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set view(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get digest() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set digest(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            sn?: number;
            view?: number;
            digest?: Uint8Array;
        }): Commit {
            const message = new Commit({});
            if (data.sn != null) {
                message.sn = data.sn;
            }
            if (data.view != null) {
                message.view = data.view;
            }
            if (data.digest != null) {
                message.digest = data.digest;
            }
            return message;
        }
        toObject() {
            const data: {
                sn?: number;
                view?: number;
                digest?: Uint8Array;
            } = {};
            if (this.sn != null) {
                data.sn = this.sn;
            }
            if (this.view != null) {
                data.view = this.view;
            }
            if (this.digest != null) {
                data.digest = this.digest;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn != 0)
                writer.writeUint64(1, this.sn);
            if (this.view != 0)
                writer.writeUint64(2, this.view);
            if (this.digest.length)
                writer.writeBytes(3, this.digest);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Commit {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Commit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readUint64();
                        break;
                    case 2:
                        message.view = reader.readUint64();
                        break;
                    case 3:
                        message.digest = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Commit {
            return Commit.deserialize(bytes);
        }
    }
    export class Done extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            digests?: Uint8Array[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("digests" in data && data.digests != undefined) {
                    this.digests = data.digests;
                }
            }
        }
        get digests() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set digests(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            digests?: Uint8Array[];
        }): Done {
            const message = new Done({});
            if (data.digests != null) {
                message.digests = data.digests;
            }
            return message;
        }
        toObject() {
            const data: {
                digests?: Uint8Array[];
            } = {};
            if (this.digests != null) {
                data.digests = this.digests;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.digests.length)
                writer.writeRepeatedBytes(1, this.digests);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Done {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Done();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Done {
            return Done.deserialize(bytes);
        }
    }
    export class CatchUpRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            digest?: Uint8Array;
            sn?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("digest" in data && data.digest != undefined) {
                    this.digest = data.digest;
                }
                if ("sn" in data && data.sn != undefined) {
                    this.sn = data.sn;
                }
            }
        }
        get digest() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set digest(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get sn() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            digest?: Uint8Array;
            sn?: number;
        }): CatchUpRequest {
            const message = new CatchUpRequest({});
            if (data.digest != null) {
                message.digest = data.digest;
            }
            if (data.sn != null) {
                message.sn = data.sn;
            }
            return message;
        }
        toObject() {
            const data: {
                digest?: Uint8Array;
                sn?: number;
            } = {};
            if (this.digest != null) {
                data.digest = this.digest;
            }
            if (this.sn != null) {
                data.sn = this.sn;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.digest.length)
                writer.writeBytes(1, this.digest);
            if (this.sn != 0)
                writer.writeUint64(2, this.sn);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CatchUpRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CatchUpRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.digest = reader.readBytes();
                        break;
                    case 2:
                        message.sn = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CatchUpRequest {
            return CatchUpRequest.deserialize(bytes);
        }
    }
    export class CatchUpResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            resp?: Preprepare;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("resp" in data && data.resp != undefined) {
                    this.resp = data.resp;
                }
            }
        }
        get resp() {
            return pb_1.Message.getWrapperField(this, Preprepare, 1) as Preprepare;
        }
        set resp(value: Preprepare) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_resp() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            resp?: ReturnType<typeof Preprepare.prototype.toObject>;
        }): CatchUpResponse {
            const message = new CatchUpResponse({});
            if (data.resp != null) {
                message.resp = Preprepare.fromObject(data.resp);
            }
            return message;
        }
        toObject() {
            const data: {
                resp?: ReturnType<typeof Preprepare.prototype.toObject>;
            } = {};
            if (this.resp != null) {
                data.resp = this.resp.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_resp)
                writer.writeMessage(1, this.resp, () => this.resp.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CatchUpResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CatchUpResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.resp, () => message.resp = Preprepare.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CatchUpResponse {
            return CatchUpResponse.deserialize(bytes);
        }
    }
    export class SignedViewChange extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            view_change?: ViewChange;
            signature?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("view_change" in data && data.view_change != undefined) {
                    this.view_change = data.view_change;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get view_change() {
            return pb_1.Message.getWrapperField(this, ViewChange, 1) as ViewChange;
        }
        set view_change(value: ViewChange) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_view_change() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            view_change?: ReturnType<typeof ViewChange.prototype.toObject>;
            signature?: Uint8Array;
        }): SignedViewChange {
            const message = new SignedViewChange({});
            if (data.view_change != null) {
                message.view_change = ViewChange.fromObject(data.view_change);
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                view_change?: ReturnType<typeof ViewChange.prototype.toObject>;
                signature?: Uint8Array;
            } = {};
            if (this.view_change != null) {
                data.view_change = this.view_change.toObject();
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_view_change)
                writer.writeMessage(1, this.view_change, () => this.view_change.serialize(writer));
            if (this.signature.length)
                writer.writeBytes(2, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignedViewChange {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignedViewChange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.view_change, () => message.view_change = ViewChange.deserialize(reader));
                        break;
                    case 2:
                        message.signature = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignedViewChange {
            return SignedViewChange.deserialize(bytes);
        }
    }
    export class PreprepareRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            digest?: Uint8Array;
            sn?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("digest" in data && data.digest != undefined) {
                    this.digest = data.digest;
                }
                if ("sn" in data && data.sn != undefined) {
                    this.sn = data.sn;
                }
            }
        }
        get digest() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set digest(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get sn() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            digest?: Uint8Array;
            sn?: number;
        }): PreprepareRequest {
            const message = new PreprepareRequest({});
            if (data.digest != null) {
                message.digest = data.digest;
            }
            if (data.sn != null) {
                message.sn = data.sn;
            }
            return message;
        }
        toObject() {
            const data: {
                digest?: Uint8Array;
                sn?: number;
            } = {};
            if (this.digest != null) {
                data.digest = this.digest;
            }
            if (this.sn != null) {
                data.sn = this.sn;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.digest.length)
                writer.writeBytes(1, this.digest);
            if (this.sn != 0)
                writer.writeUint64(2, this.sn);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PreprepareRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PreprepareRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.digest = reader.readBytes();
                        break;
                    case 2:
                        message.sn = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PreprepareRequest {
            return PreprepareRequest.deserialize(bytes);
        }
    }
    export class MissingPreprepare extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            preprepare?: Preprepare;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("preprepare" in data && data.preprepare != undefined) {
                    this.preprepare = data.preprepare;
                }
            }
        }
        get preprepare() {
            return pb_1.Message.getWrapperField(this, Preprepare, 1) as Preprepare;
        }
        set preprepare(value: Preprepare) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_preprepare() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            preprepare?: ReturnType<typeof Preprepare.prototype.toObject>;
        }): MissingPreprepare {
            const message = new MissingPreprepare({});
            if (data.preprepare != null) {
                message.preprepare = Preprepare.fromObject(data.preprepare);
            }
            return message;
        }
        toObject() {
            const data: {
                preprepare?: ReturnType<typeof Preprepare.prototype.toObject>;
            } = {};
            if (this.preprepare != null) {
                data.preprepare = this.preprepare.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_preprepare)
                writer.writeMessage(1, this.preprepare, () => this.preprepare.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MissingPreprepare {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MissingPreprepare();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.preprepare, () => message.preprepare = Preprepare.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MissingPreprepare {
            return MissingPreprepare.deserialize(bytes);
        }
    }
    export class NewView extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            view?: number;
            view_change_senders?: string[];
            signed_view_changes?: SignedViewChange[];
            preprepare_seq_nrs?: number[];
            preprepares?: Preprepare[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 2, 4, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("view" in data && data.view != undefined) {
                    this.view = data.view;
                }
                if ("view_change_senders" in data && data.view_change_senders != undefined) {
                    this.view_change_senders = data.view_change_senders;
                }
                if ("signed_view_changes" in data && data.signed_view_changes != undefined) {
                    this.signed_view_changes = data.signed_view_changes;
                }
                if ("preprepare_seq_nrs" in data && data.preprepare_seq_nrs != undefined) {
                    this.preprepare_seq_nrs = data.preprepare_seq_nrs;
                }
                if ("preprepares" in data && data.preprepares != undefined) {
                    this.preprepares = data.preprepares;
                }
            }
        }
        get view() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set view(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get view_change_senders() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set view_change_senders(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get signed_view_changes() {
            return pb_1.Message.getRepeatedWrapperField(this, SignedViewChange, 2) as SignedViewChange[];
        }
        set signed_view_changes(value: SignedViewChange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get preprepare_seq_nrs() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set preprepare_seq_nrs(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get preprepares() {
            return pb_1.Message.getRepeatedWrapperField(this, Preprepare, 5) as Preprepare[];
        }
        set preprepares(value: Preprepare[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data: {
            view?: number;
            view_change_senders?: string[];
            signed_view_changes?: ReturnType<typeof SignedViewChange.prototype.toObject>[];
            preprepare_seq_nrs?: number[];
            preprepares?: ReturnType<typeof Preprepare.prototype.toObject>[];
        }): NewView {
            const message = new NewView({});
            if (data.view != null) {
                message.view = data.view;
            }
            if (data.view_change_senders != null) {
                message.view_change_senders = data.view_change_senders;
            }
            if (data.signed_view_changes != null) {
                message.signed_view_changes = data.signed_view_changes.map(item => SignedViewChange.fromObject(item));
            }
            if (data.preprepare_seq_nrs != null) {
                message.preprepare_seq_nrs = data.preprepare_seq_nrs;
            }
            if (data.preprepares != null) {
                message.preprepares = data.preprepares.map(item => Preprepare.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                view?: number;
                view_change_senders?: string[];
                signed_view_changes?: ReturnType<typeof SignedViewChange.prototype.toObject>[];
                preprepare_seq_nrs?: number[];
                preprepares?: ReturnType<typeof Preprepare.prototype.toObject>[];
            } = {};
            if (this.view != null) {
                data.view = this.view;
            }
            if (this.view_change_senders != null) {
                data.view_change_senders = this.view_change_senders;
            }
            if (this.signed_view_changes != null) {
                data.signed_view_changes = this.signed_view_changes.map((item: SignedViewChange) => item.toObject());
            }
            if (this.preprepare_seq_nrs != null) {
                data.preprepare_seq_nrs = this.preprepare_seq_nrs;
            }
            if (this.preprepares != null) {
                data.preprepares = this.preprepares.map((item: Preprepare) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.view != 0)
                writer.writeUint64(1, this.view);
            if (this.view_change_senders.length)
                writer.writeRepeatedString(3, this.view_change_senders);
            if (this.signed_view_changes.length)
                writer.writeRepeatedMessage(2, this.signed_view_changes, (item: SignedViewChange) => item.serialize(writer));
            if (this.preprepare_seq_nrs.length)
                writer.writePackedUint64(4, this.preprepare_seq_nrs);
            if (this.preprepares.length)
                writer.writeRepeatedMessage(5, this.preprepares, (item: Preprepare) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewView {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewView();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.view = reader.readUint64();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 2:
                        reader.readMessage(message.signed_view_changes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, SignedViewChange.deserialize(reader), SignedViewChange));
                        break;
                    case 4:
                        message.preprepare_seq_nrs = reader.readPackedUint64();
                        break;
                    case 5:
                        reader.readMessage(message.preprepares, () => pb_1.Message.addToRepeatedWrapperField(message, 5, Preprepare.deserialize(reader), Preprepare));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewView {
            return NewView.deserialize(bytes);
        }
    }
    export class ViewChange extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            view?: number;
            p_set?: PSetEntry[];
            q_set?: QSetEntry[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("view" in data && data.view != undefined) {
                    this.view = data.view;
                }
                if ("p_set" in data && data.p_set != undefined) {
                    this.p_set = data.p_set;
                }
                if ("q_set" in data && data.q_set != undefined) {
                    this.q_set = data.q_set;
                }
            }
        }
        get view() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set view(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get p_set() {
            return pb_1.Message.getRepeatedWrapperField(this, PSetEntry, 2) as PSetEntry[];
        }
        set p_set(value: PSetEntry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get q_set() {
            return pb_1.Message.getRepeatedWrapperField(this, QSetEntry, 3) as QSetEntry[];
        }
        set q_set(value: QSetEntry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            view?: number;
            p_set?: ReturnType<typeof PSetEntry.prototype.toObject>[];
            q_set?: ReturnType<typeof QSetEntry.prototype.toObject>[];
        }): ViewChange {
            const message = new ViewChange({});
            if (data.view != null) {
                message.view = data.view;
            }
            if (data.p_set != null) {
                message.p_set = data.p_set.map(item => PSetEntry.fromObject(item));
            }
            if (data.q_set != null) {
                message.q_set = data.q_set.map(item => QSetEntry.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                view?: number;
                p_set?: ReturnType<typeof PSetEntry.prototype.toObject>[];
                q_set?: ReturnType<typeof QSetEntry.prototype.toObject>[];
            } = {};
            if (this.view != null) {
                data.view = this.view;
            }
            if (this.p_set != null) {
                data.p_set = this.p_set.map((item: PSetEntry) => item.toObject());
            }
            if (this.q_set != null) {
                data.q_set = this.q_set.map((item: QSetEntry) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.view != 0)
                writer.writeUint64(1, this.view);
            if (this.p_set.length)
                writer.writeRepeatedMessage(2, this.p_set, (item: PSetEntry) => item.serialize(writer));
            if (this.q_set.length)
                writer.writeRepeatedMessage(3, this.q_set, (item: QSetEntry) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ViewChange {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ViewChange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.view = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.p_set, () => pb_1.Message.addToRepeatedWrapperField(message, 2, PSetEntry.deserialize(reader), PSetEntry));
                        break;
                    case 3:
                        reader.readMessage(message.q_set, () => pb_1.Message.addToRepeatedWrapperField(message, 3, QSetEntry.deserialize(reader), QSetEntry));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ViewChange {
            return ViewChange.deserialize(bytes);
        }
    }
    export class PSetEntry extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sn?: number;
            view?: number;
            digest?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sn" in data && data.sn != undefined) {
                    this.sn = data.sn;
                }
                if ("view" in data && data.view != undefined) {
                    this.view = data.view;
                }
                if ("digest" in data && data.digest != undefined) {
                    this.digest = data.digest;
                }
            }
        }
        get sn() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get view() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set view(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get digest() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set digest(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            sn?: number;
            view?: number;
            digest?: Uint8Array;
        }): PSetEntry {
            const message = new PSetEntry({});
            if (data.sn != null) {
                message.sn = data.sn;
            }
            if (data.view != null) {
                message.view = data.view;
            }
            if (data.digest != null) {
                message.digest = data.digest;
            }
            return message;
        }
        toObject() {
            const data: {
                sn?: number;
                view?: number;
                digest?: Uint8Array;
            } = {};
            if (this.sn != null) {
                data.sn = this.sn;
            }
            if (this.view != null) {
                data.view = this.view;
            }
            if (this.digest != null) {
                data.digest = this.digest;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn != 0)
                writer.writeUint64(1, this.sn);
            if (this.view != 0)
                writer.writeUint64(2, this.view);
            if (this.digest.length)
                writer.writeBytes(3, this.digest);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PSetEntry {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PSetEntry();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readUint64();
                        break;
                    case 2:
                        message.view = reader.readUint64();
                        break;
                    case 3:
                        message.digest = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PSetEntry {
            return PSetEntry.deserialize(bytes);
        }
    }
    export class QSetEntry extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sn?: number;
            view?: number;
            digest?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sn" in data && data.sn != undefined) {
                    this.sn = data.sn;
                }
                if ("view" in data && data.view != undefined) {
                    this.view = data.view;
                }
                if ("digest" in data && data.digest != undefined) {
                    this.digest = data.digest;
                }
            }
        }
        get sn() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set sn(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get view() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set view(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get digest() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set digest(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            sn?: number;
            view?: number;
            digest?: Uint8Array;
        }): QSetEntry {
            const message = new QSetEntry({});
            if (data.sn != null) {
                message.sn = data.sn;
            }
            if (data.view != null) {
                message.view = data.view;
            }
            if (data.digest != null) {
                message.digest = data.digest;
            }
            return message;
        }
        toObject() {
            const data: {
                sn?: number;
                view?: number;
                digest?: Uint8Array;
            } = {};
            if (this.sn != null) {
                data.sn = this.sn;
            }
            if (this.view != null) {
                data.view = this.view;
            }
            if (this.digest != null) {
                data.digest = this.digest;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sn != 0)
                writer.writeUint64(1, this.sn);
            if (this.view != 0)
                writer.writeUint64(2, this.view);
            if (this.digest.length)
                writer.writeBytes(3, this.digest);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QSetEntry {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QSetEntry();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sn = reader.readUint64();
                        break;
                    case 2:
                        message.view = reader.readUint64();
                        break;
                    case 3:
                        message.digest = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QSetEntry {
            return QSetEntry.deserialize(bytes);
        }
    }
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            propose_timeout?: ProposeTimeout;
            view_change_sn_timeout?: never;
            view_change_seg_timeout?: never;
        } | {
            propose_timeout?: never;
            view_change_sn_timeout?: ViewChangeSNTimeout;
            view_change_seg_timeout?: never;
        } | {
            propose_timeout?: never;
            view_change_sn_timeout?: never;
            view_change_seg_timeout?: ViewChangeSegTimeout;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("propose_timeout" in data && data.propose_timeout != undefined) {
                    this.propose_timeout = data.propose_timeout;
                }
                if ("view_change_sn_timeout" in data && data.view_change_sn_timeout != undefined) {
                    this.view_change_sn_timeout = data.view_change_sn_timeout;
                }
                if ("view_change_seg_timeout" in data && data.view_change_seg_timeout != undefined) {
                    this.view_change_seg_timeout = data.view_change_seg_timeout;
                }
            }
        }
        get propose_timeout() {
            return pb_1.Message.getWrapperField(this, ProposeTimeout, 1) as ProposeTimeout;
        }
        set propose_timeout(value: ProposeTimeout) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_propose_timeout() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get view_change_sn_timeout() {
            return pb_1.Message.getWrapperField(this, ViewChangeSNTimeout, 2) as ViewChangeSNTimeout;
        }
        set view_change_sn_timeout(value: ViewChangeSNTimeout) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_view_change_sn_timeout() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get view_change_seg_timeout() {
            return pb_1.Message.getWrapperField(this, ViewChangeSegTimeout, 3) as ViewChangeSegTimeout;
        }
        set view_change_seg_timeout(value: ViewChangeSegTimeout) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_view_change_seg_timeout() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "propose_timeout" | "view_change_sn_timeout" | "view_change_seg_timeout";
            } = {
                0: "none",
                1: "propose_timeout",
                2: "view_change_sn_timeout",
                3: "view_change_seg_timeout"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            propose_timeout?: ReturnType<typeof ProposeTimeout.prototype.toObject>;
            view_change_sn_timeout?: ReturnType<typeof ViewChangeSNTimeout.prototype.toObject>;
            view_change_seg_timeout?: ReturnType<typeof ViewChangeSegTimeout.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.propose_timeout != null) {
                message.propose_timeout = ProposeTimeout.fromObject(data.propose_timeout);
            }
            if (data.view_change_sn_timeout != null) {
                message.view_change_sn_timeout = ViewChangeSNTimeout.fromObject(data.view_change_sn_timeout);
            }
            if (data.view_change_seg_timeout != null) {
                message.view_change_seg_timeout = ViewChangeSegTimeout.fromObject(data.view_change_seg_timeout);
            }
            return message;
        }
        toObject() {
            const data: {
                propose_timeout?: ReturnType<typeof ProposeTimeout.prototype.toObject>;
                view_change_sn_timeout?: ReturnType<typeof ViewChangeSNTimeout.prototype.toObject>;
                view_change_seg_timeout?: ReturnType<typeof ViewChangeSegTimeout.prototype.toObject>;
            } = {};
            if (this.propose_timeout != null) {
                data.propose_timeout = this.propose_timeout.toObject();
            }
            if (this.view_change_sn_timeout != null) {
                data.view_change_sn_timeout = this.view_change_sn_timeout.toObject();
            }
            if (this.view_change_seg_timeout != null) {
                data.view_change_seg_timeout = this.view_change_seg_timeout.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_propose_timeout)
                writer.writeMessage(1, this.propose_timeout, () => this.propose_timeout.serialize(writer));
            if (this.has_view_change_sn_timeout)
                writer.writeMessage(2, this.view_change_sn_timeout, () => this.view_change_sn_timeout.serialize(writer));
            if (this.has_view_change_seg_timeout)
                writer.writeMessage(3, this.view_change_seg_timeout, () => this.view_change_seg_timeout.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.propose_timeout, () => message.propose_timeout = ProposeTimeout.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.view_change_sn_timeout, () => message.view_change_sn_timeout = ViewChangeSNTimeout.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.view_change_seg_timeout, () => message.view_change_seg_timeout = ViewChangeSegTimeout.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class ProposeTimeout extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            propose_timeout?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("propose_timeout" in data && data.propose_timeout != undefined) {
                    this.propose_timeout = data.propose_timeout;
                }
            }
        }
        get propose_timeout() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set propose_timeout(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            propose_timeout?: number;
        }): ProposeTimeout {
            const message = new ProposeTimeout({});
            if (data.propose_timeout != null) {
                message.propose_timeout = data.propose_timeout;
            }
            return message;
        }
        toObject() {
            const data: {
                propose_timeout?: number;
            } = {};
            if (this.propose_timeout != null) {
                data.propose_timeout = this.propose_timeout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.propose_timeout != 0)
                writer.writeUint64(1, this.propose_timeout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProposeTimeout {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProposeTimeout();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.propose_timeout = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProposeTimeout {
            return ProposeTimeout.deserialize(bytes);
        }
    }
    export class ViewChangeSNTimeout extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            view?: number;
            numCommitted?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("view" in data && data.view != undefined) {
                    this.view = data.view;
                }
                if ("numCommitted" in data && data.numCommitted != undefined) {
                    this.numCommitted = data.numCommitted;
                }
            }
        }
        get view() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set view(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get numCommitted() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set numCommitted(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            view?: number;
            numCommitted?: number;
        }): ViewChangeSNTimeout {
            const message = new ViewChangeSNTimeout({});
            if (data.view != null) {
                message.view = data.view;
            }
            if (data.numCommitted != null) {
                message.numCommitted = data.numCommitted;
            }
            return message;
        }
        toObject() {
            const data: {
                view?: number;
                numCommitted?: number;
            } = {};
            if (this.view != null) {
                data.view = this.view;
            }
            if (this.numCommitted != null) {
                data.numCommitted = this.numCommitted;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.view != 0)
                writer.writeUint64(1, this.view);
            if (this.numCommitted != 0)
                writer.writeUint64(2, this.numCommitted);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ViewChangeSNTimeout {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ViewChangeSNTimeout();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.view = reader.readUint64();
                        break;
                    case 2:
                        message.numCommitted = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ViewChangeSNTimeout {
            return ViewChangeSNTimeout.deserialize(bytes);
        }
    }
    export class ViewChangeSegTimeout extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ViewChangeSegTimeout?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ViewChangeSegTimeout" in data && data.ViewChangeSegTimeout != undefined) {
                    this.ViewChangeSegTimeout = data.ViewChangeSegTimeout;
                }
            }
        }
        get ViewChangeSegTimeout() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set ViewChangeSegTimeout(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ViewChangeSegTimeout?: number;
        }): ViewChangeSegTimeout {
            const message = new ViewChangeSegTimeout({});
            if (data.ViewChangeSegTimeout != null) {
                message.ViewChangeSegTimeout = data.ViewChangeSegTimeout;
            }
            return message;
        }
        toObject() {
            const data: {
                ViewChangeSegTimeout?: number;
            } = {};
            if (this.ViewChangeSegTimeout != null) {
                data.ViewChangeSegTimeout = this.ViewChangeSegTimeout;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ViewChangeSegTimeout != 0)
                writer.writeUint64(1, this.ViewChangeSegTimeout);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ViewChangeSegTimeout {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ViewChangeSegTimeout();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ViewChangeSegTimeout = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ViewChangeSegTimeout {
            return ViewChangeSegTimeout.deserialize(bytes);
        }
    }
}
