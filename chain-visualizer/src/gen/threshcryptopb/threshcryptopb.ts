/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: threshcryptopb/threshcryptopb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../contextstorepb/contextstorepb";
import * as dependency_2 from "./../dslpb/dslpb";
import * as dependency_3 from "./../mir/codegen_extensions";
import * as pb_1 from "google-protobuf";
export namespace threshcryptopb {
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8]];
        constructor(data?: any[] | ({} & (({
            sign_share?: SignShare;
            sign_share_result?: never;
            verify_share?: never;
            verify_share_result?: never;
            verify_full?: never;
            verify_full_result?: never;
            recover?: never;
            recover_result?: never;
        } | {
            sign_share?: never;
            sign_share_result?: SignShareResult;
            verify_share?: never;
            verify_share_result?: never;
            verify_full?: never;
            verify_full_result?: never;
            recover?: never;
            recover_result?: never;
        } | {
            sign_share?: never;
            sign_share_result?: never;
            verify_share?: VerifyShare;
            verify_share_result?: never;
            verify_full?: never;
            verify_full_result?: never;
            recover?: never;
            recover_result?: never;
        } | {
            sign_share?: never;
            sign_share_result?: never;
            verify_share?: never;
            verify_share_result?: VerifyShareResult;
            verify_full?: never;
            verify_full_result?: never;
            recover?: never;
            recover_result?: never;
        } | {
            sign_share?: never;
            sign_share_result?: never;
            verify_share?: never;
            verify_share_result?: never;
            verify_full?: VerifyFull;
            verify_full_result?: never;
            recover?: never;
            recover_result?: never;
        } | {
            sign_share?: never;
            sign_share_result?: never;
            verify_share?: never;
            verify_share_result?: never;
            verify_full?: never;
            verify_full_result?: VerifyFullResult;
            recover?: never;
            recover_result?: never;
        } | {
            sign_share?: never;
            sign_share_result?: never;
            verify_share?: never;
            verify_share_result?: never;
            verify_full?: never;
            verify_full_result?: never;
            recover?: Recover;
            recover_result?: never;
        } | {
            sign_share?: never;
            sign_share_result?: never;
            verify_share?: never;
            verify_share_result?: never;
            verify_full?: never;
            verify_full_result?: never;
            recover?: never;
            recover_result?: RecoverResult;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sign_share" in data && data.sign_share != undefined) {
                    this.sign_share = data.sign_share;
                }
                if ("sign_share_result" in data && data.sign_share_result != undefined) {
                    this.sign_share_result = data.sign_share_result;
                }
                if ("verify_share" in data && data.verify_share != undefined) {
                    this.verify_share = data.verify_share;
                }
                if ("verify_share_result" in data && data.verify_share_result != undefined) {
                    this.verify_share_result = data.verify_share_result;
                }
                if ("verify_full" in data && data.verify_full != undefined) {
                    this.verify_full = data.verify_full;
                }
                if ("verify_full_result" in data && data.verify_full_result != undefined) {
                    this.verify_full_result = data.verify_full_result;
                }
                if ("recover" in data && data.recover != undefined) {
                    this.recover = data.recover;
                }
                if ("recover_result" in data && data.recover_result != undefined) {
                    this.recover_result = data.recover_result;
                }
            }
        }
        get sign_share() {
            return pb_1.Message.getWrapperField(this, SignShare, 1) as SignShare;
        }
        set sign_share(value: SignShare) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_sign_share() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get sign_share_result() {
            return pb_1.Message.getWrapperField(this, SignShareResult, 2) as SignShareResult;
        }
        set sign_share_result(value: SignShareResult) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_sign_share_result() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get verify_share() {
            return pb_1.Message.getWrapperField(this, VerifyShare, 3) as VerifyShare;
        }
        set verify_share(value: VerifyShare) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_verify_share() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get verify_share_result() {
            return pb_1.Message.getWrapperField(this, VerifyShareResult, 4) as VerifyShareResult;
        }
        set verify_share_result(value: VerifyShareResult) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_verify_share_result() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get verify_full() {
            return pb_1.Message.getWrapperField(this, VerifyFull, 5) as VerifyFull;
        }
        set verify_full(value: VerifyFull) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_verify_full() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get verify_full_result() {
            return pb_1.Message.getWrapperField(this, VerifyFullResult, 6) as VerifyFullResult;
        }
        set verify_full_result(value: VerifyFullResult) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_verify_full_result() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get recover() {
            return pb_1.Message.getWrapperField(this, Recover, 7) as Recover;
        }
        set recover(value: Recover) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_recover() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get recover_result() {
            return pb_1.Message.getWrapperField(this, RecoverResult, 8) as RecoverResult;
        }
        set recover_result(value: RecoverResult) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_recover_result() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "sign_share" | "sign_share_result" | "verify_share" | "verify_share_result" | "verify_full" | "verify_full_result" | "recover" | "recover_result";
            } = {
                0: "none",
                1: "sign_share",
                2: "sign_share_result",
                3: "verify_share",
                4: "verify_share_result",
                5: "verify_full",
                6: "verify_full_result",
                7: "recover",
                8: "recover_result"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8])];
        }
        static fromObject(data: {
            sign_share?: ReturnType<typeof SignShare.prototype.toObject>;
            sign_share_result?: ReturnType<typeof SignShareResult.prototype.toObject>;
            verify_share?: ReturnType<typeof VerifyShare.prototype.toObject>;
            verify_share_result?: ReturnType<typeof VerifyShareResult.prototype.toObject>;
            verify_full?: ReturnType<typeof VerifyFull.prototype.toObject>;
            verify_full_result?: ReturnType<typeof VerifyFullResult.prototype.toObject>;
            recover?: ReturnType<typeof Recover.prototype.toObject>;
            recover_result?: ReturnType<typeof RecoverResult.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.sign_share != null) {
                message.sign_share = SignShare.fromObject(data.sign_share);
            }
            if (data.sign_share_result != null) {
                message.sign_share_result = SignShareResult.fromObject(data.sign_share_result);
            }
            if (data.verify_share != null) {
                message.verify_share = VerifyShare.fromObject(data.verify_share);
            }
            if (data.verify_share_result != null) {
                message.verify_share_result = VerifyShareResult.fromObject(data.verify_share_result);
            }
            if (data.verify_full != null) {
                message.verify_full = VerifyFull.fromObject(data.verify_full);
            }
            if (data.verify_full_result != null) {
                message.verify_full_result = VerifyFullResult.fromObject(data.verify_full_result);
            }
            if (data.recover != null) {
                message.recover = Recover.fromObject(data.recover);
            }
            if (data.recover_result != null) {
                message.recover_result = RecoverResult.fromObject(data.recover_result);
            }
            return message;
        }
        toObject() {
            const data: {
                sign_share?: ReturnType<typeof SignShare.prototype.toObject>;
                sign_share_result?: ReturnType<typeof SignShareResult.prototype.toObject>;
                verify_share?: ReturnType<typeof VerifyShare.prototype.toObject>;
                verify_share_result?: ReturnType<typeof VerifyShareResult.prototype.toObject>;
                verify_full?: ReturnType<typeof VerifyFull.prototype.toObject>;
                verify_full_result?: ReturnType<typeof VerifyFullResult.prototype.toObject>;
                recover?: ReturnType<typeof Recover.prototype.toObject>;
                recover_result?: ReturnType<typeof RecoverResult.prototype.toObject>;
            } = {};
            if (this.sign_share != null) {
                data.sign_share = this.sign_share.toObject();
            }
            if (this.sign_share_result != null) {
                data.sign_share_result = this.sign_share_result.toObject();
            }
            if (this.verify_share != null) {
                data.verify_share = this.verify_share.toObject();
            }
            if (this.verify_share_result != null) {
                data.verify_share_result = this.verify_share_result.toObject();
            }
            if (this.verify_full != null) {
                data.verify_full = this.verify_full.toObject();
            }
            if (this.verify_full_result != null) {
                data.verify_full_result = this.verify_full_result.toObject();
            }
            if (this.recover != null) {
                data.recover = this.recover.toObject();
            }
            if (this.recover_result != null) {
                data.recover_result = this.recover_result.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_sign_share)
                writer.writeMessage(1, this.sign_share, () => this.sign_share.serialize(writer));
            if (this.has_sign_share_result)
                writer.writeMessage(2, this.sign_share_result, () => this.sign_share_result.serialize(writer));
            if (this.has_verify_share)
                writer.writeMessage(3, this.verify_share, () => this.verify_share.serialize(writer));
            if (this.has_verify_share_result)
                writer.writeMessage(4, this.verify_share_result, () => this.verify_share_result.serialize(writer));
            if (this.has_verify_full)
                writer.writeMessage(5, this.verify_full, () => this.verify_full.serialize(writer));
            if (this.has_verify_full_result)
                writer.writeMessage(6, this.verify_full_result, () => this.verify_full_result.serialize(writer));
            if (this.has_recover)
                writer.writeMessage(7, this.recover, () => this.recover.serialize(writer));
            if (this.has_recover_result)
                writer.writeMessage(8, this.recover_result, () => this.recover_result.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.sign_share, () => message.sign_share = SignShare.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.sign_share_result, () => message.sign_share_result = SignShareResult.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.verify_share, () => message.verify_share = VerifyShare.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.verify_share_result, () => message.verify_share_result = VerifyShareResult.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.verify_full, () => message.verify_full = VerifyFull.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.verify_full_result, () => message.verify_full_result = VerifyFullResult.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.recover, () => message.recover = Recover.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.recover_result, () => message.recover_result = RecoverResult.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class SignShare extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array[];
            origin?: SignShareOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set data(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, SignShareOrigin, 2) as SignShareOrigin;
        }
        set origin(value: SignShareOrigin) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            data?: Uint8Array[];
            origin?: ReturnType<typeof SignShareOrigin.prototype.toObject>;
        }): SignShare {
            const message = new SignShare({});
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.origin != null) {
                message.origin = SignShareOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array[];
                origin?: ReturnType<typeof SignShareOrigin.prototype.toObject>;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeRepeatedBytes(1, this.data);
            if (this.has_origin)
                writer.writeMessage(2, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignShare {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignShare();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    case 2:
                        reader.readMessage(message.origin, () => message.origin = SignShareOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignShare {
            return SignShare.deserialize(bytes);
        }
    }
    export class SignShareResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            signature_share?: Uint8Array;
            origin?: SignShareOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("signature_share" in data && data.signature_share != undefined) {
                    this.signature_share = data.signature_share;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get signature_share() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set signature_share(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, SignShareOrigin, 2) as SignShareOrigin;
        }
        set origin(value: SignShareOrigin) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            signature_share?: Uint8Array;
            origin?: ReturnType<typeof SignShareOrigin.prototype.toObject>;
        }): SignShareResult {
            const message = new SignShareResult({});
            if (data.signature_share != null) {
                message.signature_share = data.signature_share;
            }
            if (data.origin != null) {
                message.origin = SignShareOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                signature_share?: Uint8Array;
                origin?: ReturnType<typeof SignShareOrigin.prototype.toObject>;
            } = {};
            if (this.signature_share != null) {
                data.signature_share = this.signature_share;
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signature_share.length)
                writer.writeBytes(1, this.signature_share);
            if (this.has_origin)
                writer.writeMessage(2, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignShareResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignShareResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.signature_share = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.origin, () => message.origin = SignShareOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignShareResult {
            return SignShareResult.deserialize(bytes);
        }
    }
    export class SignShareOrigin extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            module?: string;
        } & (({
            context_store?: dependency_1.contextstorepb.Origin;
            dsl?: never;
        } | {
            context_store?: never;
            dsl?: dependency_2.dslpb.Origin;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module" in data && data.module != undefined) {
                    this.module = data.module;
                }
                if ("context_store" in data && data.context_store != undefined) {
                    this.context_store = data.context_store;
                }
                if ("dsl" in data && data.dsl != undefined) {
                    this.dsl = data.dsl;
                }
            }
        }
        get module() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set module(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get context_store() {
            return pb_1.Message.getWrapperField(this, dependency_1.contextstorepb.Origin, 2) as dependency_1.contextstorepb.Origin;
        }
        set context_store(value: dependency_1.contextstorepb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_context_store() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dsl() {
            return pb_1.Message.getWrapperField(this, dependency_2.dslpb.Origin, 3) as dependency_2.dslpb.Origin;
        }
        set dsl(value: dependency_2.dslpb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_dsl() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "context_store" | "dsl";
            } = {
                0: "none",
                2: "context_store",
                3: "dsl"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            module?: string;
            context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
            dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
        }): SignShareOrigin {
            const message = new SignShareOrigin({});
            if (data.module != null) {
                message.module = data.module;
            }
            if (data.context_store != null) {
                message.context_store = dependency_1.contextstorepb.Origin.fromObject(data.context_store);
            }
            if (data.dsl != null) {
                message.dsl = dependency_2.dslpb.Origin.fromObject(data.dsl);
            }
            return message;
        }
        toObject() {
            const data: {
                module?: string;
                context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
                dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
            } = {};
            if (this.module != null) {
                data.module = this.module;
            }
            if (this.context_store != null) {
                data.context_store = this.context_store.toObject();
            }
            if (this.dsl != null) {
                data.dsl = this.dsl.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.module.length)
                writer.writeString(1, this.module);
            if (this.has_context_store)
                writer.writeMessage(2, this.context_store, () => this.context_store.serialize(writer));
            if (this.has_dsl)
                writer.writeMessage(3, this.dsl, () => this.dsl.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignShareOrigin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignShareOrigin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.module = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.context_store, () => message.context_store = dependency_1.contextstorepb.Origin.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.dsl, () => message.dsl = dependency_2.dslpb.Origin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignShareOrigin {
            return SignShareOrigin.deserialize(bytes);
        }
    }
    export class VerifyShare extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array[];
            signature_share?: Uint8Array;
            node_id?: string;
            origin?: VerifyShareOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("signature_share" in data && data.signature_share != undefined) {
                    this.signature_share = data.signature_share;
                }
                if ("node_id" in data && data.node_id != undefined) {
                    this.node_id = data.node_id;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set data(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get signature_share() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set signature_share(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get node_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set node_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, VerifyShareOrigin, 4) as VerifyShareOrigin;
        }
        set origin(value: VerifyShareOrigin) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            data?: Uint8Array[];
            signature_share?: Uint8Array;
            node_id?: string;
            origin?: ReturnType<typeof VerifyShareOrigin.prototype.toObject>;
        }): VerifyShare {
            const message = new VerifyShare({});
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.signature_share != null) {
                message.signature_share = data.signature_share;
            }
            if (data.node_id != null) {
                message.node_id = data.node_id;
            }
            if (data.origin != null) {
                message.origin = VerifyShareOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array[];
                signature_share?: Uint8Array;
                node_id?: string;
                origin?: ReturnType<typeof VerifyShareOrigin.prototype.toObject>;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.signature_share != null) {
                data.signature_share = this.signature_share;
            }
            if (this.node_id != null) {
                data.node_id = this.node_id;
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeRepeatedBytes(1, this.data);
            if (this.signature_share.length)
                writer.writeBytes(2, this.signature_share);
            if (this.node_id.length)
                writer.writeString(3, this.node_id);
            if (this.has_origin)
                writer.writeMessage(4, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyShare {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyShare();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    case 2:
                        message.signature_share = reader.readBytes();
                        break;
                    case 3:
                        message.node_id = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.origin, () => message.origin = VerifyShareOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyShare {
            return VerifyShare.deserialize(bytes);
        }
    }
    export class VerifyShareResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ok?: boolean;
            error?: string;
            origin?: VerifyShareOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get ok() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set ok(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set error(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, VerifyShareOrigin, 3) as VerifyShareOrigin;
        }
        set origin(value: VerifyShareOrigin) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            ok?: boolean;
            error?: string;
            origin?: ReturnType<typeof VerifyShareOrigin.prototype.toObject>;
        }): VerifyShareResult {
            const message = new VerifyShareResult({});
            if (data.ok != null) {
                message.ok = data.ok;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            if (data.origin != null) {
                message.origin = VerifyShareOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: boolean;
                error?: string;
                origin?: ReturnType<typeof VerifyShareOrigin.prototype.toObject>;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ok != false)
                writer.writeBool(1, this.ok);
            if (this.error.length)
                writer.writeString(2, this.error);
            if (this.has_origin)
                writer.writeMessage(3, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyShareResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyShareResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ok = reader.readBool();
                        break;
                    case 2:
                        message.error = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.origin, () => message.origin = VerifyShareOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyShareResult {
            return VerifyShareResult.deserialize(bytes);
        }
    }
    export class VerifyShareOrigin extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            module?: string;
        } & (({
            context_store?: dependency_1.contextstorepb.Origin;
            dsl?: never;
        } | {
            context_store?: never;
            dsl?: dependency_2.dslpb.Origin;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module" in data && data.module != undefined) {
                    this.module = data.module;
                }
                if ("context_store" in data && data.context_store != undefined) {
                    this.context_store = data.context_store;
                }
                if ("dsl" in data && data.dsl != undefined) {
                    this.dsl = data.dsl;
                }
            }
        }
        get module() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set module(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get context_store() {
            return pb_1.Message.getWrapperField(this, dependency_1.contextstorepb.Origin, 2) as dependency_1.contextstorepb.Origin;
        }
        set context_store(value: dependency_1.contextstorepb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_context_store() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dsl() {
            return pb_1.Message.getWrapperField(this, dependency_2.dslpb.Origin, 3) as dependency_2.dslpb.Origin;
        }
        set dsl(value: dependency_2.dslpb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_dsl() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "context_store" | "dsl";
            } = {
                0: "none",
                2: "context_store",
                3: "dsl"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            module?: string;
            context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
            dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
        }): VerifyShareOrigin {
            const message = new VerifyShareOrigin({});
            if (data.module != null) {
                message.module = data.module;
            }
            if (data.context_store != null) {
                message.context_store = dependency_1.contextstorepb.Origin.fromObject(data.context_store);
            }
            if (data.dsl != null) {
                message.dsl = dependency_2.dslpb.Origin.fromObject(data.dsl);
            }
            return message;
        }
        toObject() {
            const data: {
                module?: string;
                context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
                dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
            } = {};
            if (this.module != null) {
                data.module = this.module;
            }
            if (this.context_store != null) {
                data.context_store = this.context_store.toObject();
            }
            if (this.dsl != null) {
                data.dsl = this.dsl.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.module.length)
                writer.writeString(1, this.module);
            if (this.has_context_store)
                writer.writeMessage(2, this.context_store, () => this.context_store.serialize(writer));
            if (this.has_dsl)
                writer.writeMessage(3, this.dsl, () => this.dsl.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyShareOrigin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyShareOrigin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.module = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.context_store, () => message.context_store = dependency_1.contextstorepb.Origin.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.dsl, () => message.dsl = dependency_2.dslpb.Origin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyShareOrigin {
            return VerifyShareOrigin.deserialize(bytes);
        }
    }
    export class VerifyFull extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array[];
            full_signature?: Uint8Array;
            origin?: VerifyFullOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("full_signature" in data && data.full_signature != undefined) {
                    this.full_signature = data.full_signature;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set data(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get full_signature() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set full_signature(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, VerifyFullOrigin, 3) as VerifyFullOrigin;
        }
        set origin(value: VerifyFullOrigin) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            data?: Uint8Array[];
            full_signature?: Uint8Array;
            origin?: ReturnType<typeof VerifyFullOrigin.prototype.toObject>;
        }): VerifyFull {
            const message = new VerifyFull({});
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.full_signature != null) {
                message.full_signature = data.full_signature;
            }
            if (data.origin != null) {
                message.origin = VerifyFullOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array[];
                full_signature?: Uint8Array;
                origin?: ReturnType<typeof VerifyFullOrigin.prototype.toObject>;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.full_signature != null) {
                data.full_signature = this.full_signature;
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeRepeatedBytes(1, this.data);
            if (this.full_signature.length)
                writer.writeBytes(2, this.full_signature);
            if (this.has_origin)
                writer.writeMessage(3, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyFull {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyFull();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    case 2:
                        message.full_signature = reader.readBytes();
                        break;
                    case 3:
                        reader.readMessage(message.origin, () => message.origin = VerifyFullOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyFull {
            return VerifyFull.deserialize(bytes);
        }
    }
    export class VerifyFullResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ok?: boolean;
            error?: string;
            origin?: VerifyFullOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get ok() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set ok(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set error(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, VerifyFullOrigin, 3) as VerifyFullOrigin;
        }
        set origin(value: VerifyFullOrigin) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            ok?: boolean;
            error?: string;
            origin?: ReturnType<typeof VerifyFullOrigin.prototype.toObject>;
        }): VerifyFullResult {
            const message = new VerifyFullResult({});
            if (data.ok != null) {
                message.ok = data.ok;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            if (data.origin != null) {
                message.origin = VerifyFullOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                ok?: boolean;
                error?: string;
                origin?: ReturnType<typeof VerifyFullOrigin.prototype.toObject>;
            } = {};
            if (this.ok != null) {
                data.ok = this.ok;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ok != false)
                writer.writeBool(1, this.ok);
            if (this.error.length)
                writer.writeString(2, this.error);
            if (this.has_origin)
                writer.writeMessage(3, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyFullResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyFullResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ok = reader.readBool();
                        break;
                    case 2:
                        message.error = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.origin, () => message.origin = VerifyFullOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyFullResult {
            return VerifyFullResult.deserialize(bytes);
        }
    }
    export class VerifyFullOrigin extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            module?: string;
        } & (({
            context_store?: dependency_1.contextstorepb.Origin;
            dsl?: never;
        } | {
            context_store?: never;
            dsl?: dependency_2.dslpb.Origin;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module" in data && data.module != undefined) {
                    this.module = data.module;
                }
                if ("context_store" in data && data.context_store != undefined) {
                    this.context_store = data.context_store;
                }
                if ("dsl" in data && data.dsl != undefined) {
                    this.dsl = data.dsl;
                }
            }
        }
        get module() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set module(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get context_store() {
            return pb_1.Message.getWrapperField(this, dependency_1.contextstorepb.Origin, 2) as dependency_1.contextstorepb.Origin;
        }
        set context_store(value: dependency_1.contextstorepb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_context_store() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dsl() {
            return pb_1.Message.getWrapperField(this, dependency_2.dslpb.Origin, 3) as dependency_2.dslpb.Origin;
        }
        set dsl(value: dependency_2.dslpb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_dsl() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "context_store" | "dsl";
            } = {
                0: "none",
                2: "context_store",
                3: "dsl"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            module?: string;
            context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
            dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
        }): VerifyFullOrigin {
            const message = new VerifyFullOrigin({});
            if (data.module != null) {
                message.module = data.module;
            }
            if (data.context_store != null) {
                message.context_store = dependency_1.contextstorepb.Origin.fromObject(data.context_store);
            }
            if (data.dsl != null) {
                message.dsl = dependency_2.dslpb.Origin.fromObject(data.dsl);
            }
            return message;
        }
        toObject() {
            const data: {
                module?: string;
                context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
                dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
            } = {};
            if (this.module != null) {
                data.module = this.module;
            }
            if (this.context_store != null) {
                data.context_store = this.context_store.toObject();
            }
            if (this.dsl != null) {
                data.dsl = this.dsl.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.module.length)
                writer.writeString(1, this.module);
            if (this.has_context_store)
                writer.writeMessage(2, this.context_store, () => this.context_store.serialize(writer));
            if (this.has_dsl)
                writer.writeMessage(3, this.dsl, () => this.dsl.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyFullOrigin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyFullOrigin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.module = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.context_store, () => message.context_store = dependency_1.contextstorepb.Origin.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.dsl, () => message.dsl = dependency_2.dslpb.Origin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyFullOrigin {
            return VerifyFullOrigin.deserialize(bytes);
        }
    }
    export class Recover extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array[];
            signature_shares?: Uint8Array[];
            origin?: RecoverOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("signature_shares" in data && data.signature_shares != undefined) {
                    this.signature_shares = data.signature_shares;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
        }
        set data(value: Uint8Array[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get signature_shares() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
        }
        set signature_shares(value: Uint8Array[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, RecoverOrigin, 3) as RecoverOrigin;
        }
        set origin(value: RecoverOrigin) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            data?: Uint8Array[];
            signature_shares?: Uint8Array[];
            origin?: ReturnType<typeof RecoverOrigin.prototype.toObject>;
        }): Recover {
            const message = new Recover({});
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.signature_shares != null) {
                message.signature_shares = data.signature_shares;
            }
            if (data.origin != null) {
                message.origin = RecoverOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array[];
                signature_shares?: Uint8Array[];
                origin?: ReturnType<typeof RecoverOrigin.prototype.toObject>;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.signature_shares != null) {
                data.signature_shares = this.signature_shares;
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeRepeatedBytes(1, this.data);
            if (this.signature_shares.length)
                writer.writeRepeatedBytes(2, this.signature_shares);
            if (this.has_origin)
                writer.writeMessage(3, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Recover {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Recover();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                        break;
                    case 3:
                        reader.readMessage(message.origin, () => message.origin = RecoverOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Recover {
            return Recover.deserialize(bytes);
        }
    }
    export class RecoverResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            full_signature?: Uint8Array;
            ok?: boolean;
            error?: string;
            origin?: RecoverOrigin;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("full_signature" in data && data.full_signature != undefined) {
                    this.full_signature = data.full_signature;
                }
                if ("ok" in data && data.ok != undefined) {
                    this.ok = data.ok;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
            }
        }
        get full_signature() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set full_signature(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get ok() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set ok(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set error(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get origin() {
            return pb_1.Message.getWrapperField(this, RecoverOrigin, 4) as RecoverOrigin;
        }
        set origin(value: RecoverOrigin) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_origin() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            full_signature?: Uint8Array;
            ok?: boolean;
            error?: string;
            origin?: ReturnType<typeof RecoverOrigin.prototype.toObject>;
        }): RecoverResult {
            const message = new RecoverResult({});
            if (data.full_signature != null) {
                message.full_signature = data.full_signature;
            }
            if (data.ok != null) {
                message.ok = data.ok;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            if (data.origin != null) {
                message.origin = RecoverOrigin.fromObject(data.origin);
            }
            return message;
        }
        toObject() {
            const data: {
                full_signature?: Uint8Array;
                ok?: boolean;
                error?: string;
                origin?: ReturnType<typeof RecoverOrigin.prototype.toObject>;
            } = {};
            if (this.full_signature != null) {
                data.full_signature = this.full_signature;
            }
            if (this.ok != null) {
                data.ok = this.ok;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            if (this.origin != null) {
                data.origin = this.origin.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.full_signature.length)
                writer.writeBytes(1, this.full_signature);
            if (this.ok != false)
                writer.writeBool(2, this.ok);
            if (this.error.length)
                writer.writeString(3, this.error);
            if (this.has_origin)
                writer.writeMessage(4, this.origin, () => this.origin.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RecoverResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RecoverResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.full_signature = reader.readBytes();
                        break;
                    case 2:
                        message.ok = reader.readBool();
                        break;
                    case 3:
                        message.error = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.origin, () => message.origin = RecoverOrigin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RecoverResult {
            return RecoverResult.deserialize(bytes);
        }
    }
    export class RecoverOrigin extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            module?: string;
        } & (({
            context_store?: dependency_1.contextstorepb.Origin;
            dsl?: never;
        } | {
            context_store?: never;
            dsl?: dependency_2.dslpb.Origin;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("module" in data && data.module != undefined) {
                    this.module = data.module;
                }
                if ("context_store" in data && data.context_store != undefined) {
                    this.context_store = data.context_store;
                }
                if ("dsl" in data && data.dsl != undefined) {
                    this.dsl = data.dsl;
                }
            }
        }
        get module() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set module(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get context_store() {
            return pb_1.Message.getWrapperField(this, dependency_1.contextstorepb.Origin, 2) as dependency_1.contextstorepb.Origin;
        }
        set context_store(value: dependency_1.contextstorepb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_context_store() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dsl() {
            return pb_1.Message.getWrapperField(this, dependency_2.dslpb.Origin, 3) as dependency_2.dslpb.Origin;
        }
        set dsl(value: dependency_2.dslpb.Origin) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_dsl() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get type() {
            const cases: {
                [index: number]: "none" | "context_store" | "dsl";
            } = {
                0: "none",
                2: "context_store",
                3: "dsl"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            module?: string;
            context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
            dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
        }): RecoverOrigin {
            const message = new RecoverOrigin({});
            if (data.module != null) {
                message.module = data.module;
            }
            if (data.context_store != null) {
                message.context_store = dependency_1.contextstorepb.Origin.fromObject(data.context_store);
            }
            if (data.dsl != null) {
                message.dsl = dependency_2.dslpb.Origin.fromObject(data.dsl);
            }
            return message;
        }
        toObject() {
            const data: {
                module?: string;
                context_store?: ReturnType<typeof dependency_1.contextstorepb.Origin.prototype.toObject>;
                dsl?: ReturnType<typeof dependency_2.dslpb.Origin.prototype.toObject>;
            } = {};
            if (this.module != null) {
                data.module = this.module;
            }
            if (this.context_store != null) {
                data.context_store = this.context_store.toObject();
            }
            if (this.dsl != null) {
                data.dsl = this.dsl.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.module.length)
                writer.writeString(1, this.module);
            if (this.has_context_store)
                writer.writeMessage(2, this.context_store, () => this.context_store.serialize(writer));
            if (this.has_dsl)
                writer.writeMessage(3, this.dsl, () => this.dsl.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RecoverOrigin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RecoverOrigin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.module = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.context_store, () => message.context_store = dependency_1.contextstorepb.Origin.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.dsl, () => message.dsl = dependency_2.dslpb.Origin.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RecoverOrigin {
            return RecoverOrigin.deserialize(bytes);
        }
    }
}
