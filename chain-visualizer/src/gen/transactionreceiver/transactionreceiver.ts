/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: transactionreceiver/transactionreceiver.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../trantorpb/trantorpb";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace receiver {
    export class ByeBye extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ByeBye {
            const message = new ByeBye({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ByeBye {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ByeBye();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ByeBye {
            return ByeBye.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTransactionReceiverService {
        static definition = {
            Listen: {
                path: "/receiver.TransactionReceiver/Listen",
                requestStream: true,
                responseStream: false,
                requestSerialize: (message: dependency_1.trantorpb.Transaction) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.trantorpb.Transaction.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ByeBye) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ByeBye.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Listen(call: grpc_1.ServerReadableStream<dependency_1.trantorpb.Transaction, ByeBye>, callback: grpc_1.sendUnaryData<ByeBye>): void;
    }
    export class TransactionReceiverClient extends grpc_1.makeGenericClientConstructor(UnimplementedTransactionReceiverService.definition, "TransactionReceiver", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Listen: GrpWritableServiceInterface<dependency_1.trantorpb.Transaction, ByeBye> = (metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ByeBye>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ByeBye>, callback?: grpc_1.requestCallback<ByeBye>): grpc_1.ClientWritableStream<dependency_1.trantorpb.Transaction> => {
            return super.Listen(metadata, options, callback);
        };
    }
}
