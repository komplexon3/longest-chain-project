/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: transportpb/transportpb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../messagepb/messagepb";
import * as dependency_2 from "./../mir/codegen_extensions";
import * as pb_1 from "google-protobuf";
export namespace transportpb {
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            send_message?: SendMessage;
            message_received?: never;
        } | {
            send_message?: never;
            message_received?: MessageReceived;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("send_message" in data && data.send_message != undefined) {
                    this.send_message = data.send_message;
                }
                if ("message_received" in data && data.message_received != undefined) {
                    this.message_received = data.message_received;
                }
            }
        }
        get send_message() {
            return pb_1.Message.getWrapperField(this, SendMessage, 1) as SendMessage;
        }
        set send_message(value: SendMessage) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_send_message() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get message_received() {
            return pb_1.Message.getWrapperField(this, MessageReceived, 2) as MessageReceived;
        }
        set message_received(value: MessageReceived) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_message_received() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get Type() {
            const cases: {
                [index: number]: "none" | "send_message" | "message_received";
            } = {
                0: "none",
                1: "send_message",
                2: "message_received"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            send_message?: ReturnType<typeof SendMessage.prototype.toObject>;
            message_received?: ReturnType<typeof MessageReceived.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.send_message != null) {
                message.send_message = SendMessage.fromObject(data.send_message);
            }
            if (data.message_received != null) {
                message.message_received = MessageReceived.fromObject(data.message_received);
            }
            return message;
        }
        toObject() {
            const data: {
                send_message?: ReturnType<typeof SendMessage.prototype.toObject>;
                message_received?: ReturnType<typeof MessageReceived.prototype.toObject>;
            } = {};
            if (this.send_message != null) {
                data.send_message = this.send_message.toObject();
            }
            if (this.message_received != null) {
                data.message_received = this.message_received.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_send_message)
                writer.writeMessage(1, this.send_message, () => this.send_message.serialize(writer));
            if (this.has_message_received)
                writer.writeMessage(2, this.message_received, () => this.message_received.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.send_message, () => message.send_message = SendMessage.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.message_received, () => message.message_received = MessageReceived.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class SendMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            msg?: dependency_1.messagepb.Message;
            destinations?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
                if ("destinations" in data && data.destinations != undefined) {
                    this.destinations = data.destinations;
                }
            }
        }
        get msg() {
            return pb_1.Message.getWrapperField(this, dependency_1.messagepb.Message, 1) as dependency_1.messagepb.Message;
        }
        set msg(value: dependency_1.messagepb.Message) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_msg() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get destinations() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set destinations(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            msg?: ReturnType<typeof dependency_1.messagepb.Message.prototype.toObject>;
            destinations?: string[];
        }): SendMessage {
            const message = new SendMessage({});
            if (data.msg != null) {
                message.msg = dependency_1.messagepb.Message.fromObject(data.msg);
            }
            if (data.destinations != null) {
                message.destinations = data.destinations;
            }
            return message;
        }
        toObject() {
            const data: {
                msg?: ReturnType<typeof dependency_1.messagepb.Message.prototype.toObject>;
                destinations?: string[];
            } = {};
            if (this.msg != null) {
                data.msg = this.msg.toObject();
            }
            if (this.destinations != null) {
                data.destinations = this.destinations;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_msg)
                writer.writeMessage(1, this.msg, () => this.msg.serialize(writer));
            if (this.destinations.length)
                writer.writeRepeatedString(2, this.destinations);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.msg, () => message.msg = dependency_1.messagepb.Message.deserialize(reader));
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendMessage {
            return SendMessage.deserialize(bytes);
        }
    }
    export class MessageReceived extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            from?: string;
            msg?: dependency_1.messagepb.Message;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
            }
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set from(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get msg() {
            return pb_1.Message.getWrapperField(this, dependency_1.messagepb.Message, 2) as dependency_1.messagepb.Message;
        }
        set msg(value: dependency_1.messagepb.Message) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_msg() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            from?: string;
            msg?: ReturnType<typeof dependency_1.messagepb.Message.prototype.toObject>;
        }): MessageReceived {
            const message = new MessageReceived({});
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.msg != null) {
                message.msg = dependency_1.messagepb.Message.fromObject(data.msg);
            }
            return message;
        }
        toObject() {
            const data: {
                from?: string;
                msg?: ReturnType<typeof dependency_1.messagepb.Message.prototype.toObject>;
            } = {};
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.msg != null) {
                data.msg = this.msg.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.from.length)
                writer.writeString(1, this.from);
            if (this.has_msg)
                writer.writeMessage(2, this.msg, () => this.msg.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageReceived {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageReceived();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.from = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.msg, () => message.msg = dependency_1.messagepb.Message.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MessageReceived {
            return MessageReceived.deserialize(bytes);
        }
    }
}
