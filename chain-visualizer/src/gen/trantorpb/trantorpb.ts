/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.24.4
 * source: trantorpb/trantorpb.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../mir/codegen_extensions";
import * as pb_1 from "google-protobuf";
export namespace trantorpb {
    export class Transaction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            client_id?: string;
            tx_no?: number;
            type?: number;
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client_id" in data && data.client_id != undefined) {
                    this.client_id = data.client_id;
                }
                if ("tx_no" in data && data.tx_no != undefined) {
                    this.tx_no = data.tx_no;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get client_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set client_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tx_no() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set tx_no(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set type(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            client_id?: string;
            tx_no?: number;
            type?: number;
            data?: Uint8Array;
        }): Transaction {
            const message = new Transaction({});
            if (data.client_id != null) {
                message.client_id = data.client_id;
            }
            if (data.tx_no != null) {
                message.tx_no = data.tx_no;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                client_id?: string;
                tx_no?: number;
                type?: number;
                data?: Uint8Array;
            } = {};
            if (this.client_id != null) {
                data.client_id = this.client_id;
            }
            if (this.tx_no != null) {
                data.tx_no = this.tx_no;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.client_id.length)
                writer.writeString(1, this.client_id);
            if (this.tx_no != 0)
                writer.writeUint64(2, this.tx_no);
            if (this.type != 0)
                writer.writeUint64(3, this.type);
            if (this.data.length)
                writer.writeBytes(4, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Transaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Transaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.client_id = reader.readString();
                        break;
                    case 2:
                        message.tx_no = reader.readUint64();
                        break;
                    case 3:
                        message.type = reader.readUint64();
                        break;
                    case 4:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Transaction {
            return Transaction.deserialize(bytes);
        }
    }
    export class StateSnapshot extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            app_data?: Uint8Array;
            epoch_data?: EpochData;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("app_data" in data && data.app_data != undefined) {
                    this.app_data = data.app_data;
                }
                if ("epoch_data" in data && data.epoch_data != undefined) {
                    this.epoch_data = data.epoch_data;
                }
            }
        }
        get app_data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set app_data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get epoch_data() {
            return pb_1.Message.getWrapperField(this, EpochData, 2) as EpochData;
        }
        set epoch_data(value: EpochData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_epoch_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            app_data?: Uint8Array;
            epoch_data?: ReturnType<typeof EpochData.prototype.toObject>;
        }): StateSnapshot {
            const message = new StateSnapshot({});
            if (data.app_data != null) {
                message.app_data = data.app_data;
            }
            if (data.epoch_data != null) {
                message.epoch_data = EpochData.fromObject(data.epoch_data);
            }
            return message;
        }
        toObject() {
            const data: {
                app_data?: Uint8Array;
                epoch_data?: ReturnType<typeof EpochData.prototype.toObject>;
            } = {};
            if (this.app_data != null) {
                data.app_data = this.app_data;
            }
            if (this.epoch_data != null) {
                data.epoch_data = this.epoch_data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.app_data.length)
                writer.writeBytes(1, this.app_data);
            if (this.has_epoch_data)
                writer.writeMessage(2, this.epoch_data, () => this.epoch_data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StateSnapshot {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StateSnapshot();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.app_data = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.epoch_data, () => message.epoch_data = EpochData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StateSnapshot {
            return StateSnapshot.deserialize(bytes);
        }
    }
    export class EpochData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            epoch_config?: EpochConfig;
            client_progress?: ClientProgress;
            leader_policy?: Uint8Array;
            previous_membership?: Membership;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("epoch_config" in data && data.epoch_config != undefined) {
                    this.epoch_config = data.epoch_config;
                }
                if ("client_progress" in data && data.client_progress != undefined) {
                    this.client_progress = data.client_progress;
                }
                if ("leader_policy" in data && data.leader_policy != undefined) {
                    this.leader_policy = data.leader_policy;
                }
                if ("previous_membership" in data && data.previous_membership != undefined) {
                    this.previous_membership = data.previous_membership;
                }
            }
        }
        get epoch_config() {
            return pb_1.Message.getWrapperField(this, EpochConfig, 1) as EpochConfig;
        }
        set epoch_config(value: EpochConfig) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_epoch_config() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get client_progress() {
            return pb_1.Message.getWrapperField(this, ClientProgress, 2) as ClientProgress;
        }
        set client_progress(value: ClientProgress) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_client_progress() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get leader_policy() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set leader_policy(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get previous_membership() {
            return pb_1.Message.getWrapperField(this, Membership, 4) as Membership;
        }
        set previous_membership(value: Membership) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_previous_membership() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            epoch_config?: ReturnType<typeof EpochConfig.prototype.toObject>;
            client_progress?: ReturnType<typeof ClientProgress.prototype.toObject>;
            leader_policy?: Uint8Array;
            previous_membership?: ReturnType<typeof Membership.prototype.toObject>;
        }): EpochData {
            const message = new EpochData({});
            if (data.epoch_config != null) {
                message.epoch_config = EpochConfig.fromObject(data.epoch_config);
            }
            if (data.client_progress != null) {
                message.client_progress = ClientProgress.fromObject(data.client_progress);
            }
            if (data.leader_policy != null) {
                message.leader_policy = data.leader_policy;
            }
            if (data.previous_membership != null) {
                message.previous_membership = Membership.fromObject(data.previous_membership);
            }
            return message;
        }
        toObject() {
            const data: {
                epoch_config?: ReturnType<typeof EpochConfig.prototype.toObject>;
                client_progress?: ReturnType<typeof ClientProgress.prototype.toObject>;
                leader_policy?: Uint8Array;
                previous_membership?: ReturnType<typeof Membership.prototype.toObject>;
            } = {};
            if (this.epoch_config != null) {
                data.epoch_config = this.epoch_config.toObject();
            }
            if (this.client_progress != null) {
                data.client_progress = this.client_progress.toObject();
            }
            if (this.leader_policy != null) {
                data.leader_policy = this.leader_policy;
            }
            if (this.previous_membership != null) {
                data.previous_membership = this.previous_membership.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_epoch_config)
                writer.writeMessage(1, this.epoch_config, () => this.epoch_config.serialize(writer));
            if (this.has_client_progress)
                writer.writeMessage(2, this.client_progress, () => this.client_progress.serialize(writer));
            if (this.leader_policy.length)
                writer.writeBytes(3, this.leader_policy);
            if (this.has_previous_membership)
                writer.writeMessage(4, this.previous_membership, () => this.previous_membership.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EpochData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EpochData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.epoch_config, () => message.epoch_config = EpochConfig.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.client_progress, () => message.client_progress = ClientProgress.deserialize(reader));
                        break;
                    case 3:
                        message.leader_policy = reader.readBytes();
                        break;
                    case 4:
                        reader.readMessage(message.previous_membership, () => message.previous_membership = Membership.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EpochData {
            return EpochData.deserialize(bytes);
        }
    }
    export class EpochConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            epoch_nr?: number;
            first_sn?: number;
            length?: number;
            memberships?: Membership[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("epoch_nr" in data && data.epoch_nr != undefined) {
                    this.epoch_nr = data.epoch_nr;
                }
                if ("first_sn" in data && data.first_sn != undefined) {
                    this.first_sn = data.first_sn;
                }
                if ("length" in data && data.length != undefined) {
                    this.length = data.length;
                }
                if ("memberships" in data && data.memberships != undefined) {
                    this.memberships = data.memberships;
                }
            }
        }
        get epoch_nr() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set epoch_nr(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get first_sn() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set first_sn(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get length() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set length(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get memberships() {
            return pb_1.Message.getRepeatedWrapperField(this, Membership, 4) as Membership[];
        }
        set memberships(value: Membership[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            epoch_nr?: number;
            first_sn?: number;
            length?: number;
            memberships?: ReturnType<typeof Membership.prototype.toObject>[];
        }): EpochConfig {
            const message = new EpochConfig({});
            if (data.epoch_nr != null) {
                message.epoch_nr = data.epoch_nr;
            }
            if (data.first_sn != null) {
                message.first_sn = data.first_sn;
            }
            if (data.length != null) {
                message.length = data.length;
            }
            if (data.memberships != null) {
                message.memberships = data.memberships.map(item => Membership.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                epoch_nr?: number;
                first_sn?: number;
                length?: number;
                memberships?: ReturnType<typeof Membership.prototype.toObject>[];
            } = {};
            if (this.epoch_nr != null) {
                data.epoch_nr = this.epoch_nr;
            }
            if (this.first_sn != null) {
                data.first_sn = this.first_sn;
            }
            if (this.length != null) {
                data.length = this.length;
            }
            if (this.memberships != null) {
                data.memberships = this.memberships.map((item: Membership) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.epoch_nr != 0)
                writer.writeUint64(1, this.epoch_nr);
            if (this.first_sn != 0)
                writer.writeUint64(2, this.first_sn);
            if (this.length != 0)
                writer.writeUint64(3, this.length);
            if (this.memberships.length)
                writer.writeRepeatedMessage(4, this.memberships, (item: Membership) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EpochConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EpochConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.epoch_nr = reader.readUint64();
                        break;
                    case 2:
                        message.first_sn = reader.readUint64();
                        break;
                    case 3:
                        message.length = reader.readUint64();
                        break;
                    case 4:
                        reader.readMessage(message.memberships, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Membership.deserialize(reader), Membership));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EpochConfig {
            return EpochConfig.deserialize(bytes);
        }
    }
    export class Membership extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nodes?: Map<string, NodeIdentity>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nodes" in data && data.nodes != undefined) {
                    this.nodes = data.nodes;
                }
            }
            if (!this.nodes)
                this.nodes = new Map();
        }
        get nodes() {
            return pb_1.Message.getField(this, 1) as any as Map<string, NodeIdentity>;
        }
        set nodes(value: Map<string, NodeIdentity>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            nodes?: {
                [key: string]: ReturnType<typeof NodeIdentity.prototype.toObject>;
            };
        }): Membership {
            const message = new Membership({});
            if (typeof data.nodes == "object") {
                message.nodes = new Map(Object.entries(data.nodes).map(([key, value]) => [key, NodeIdentity.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                nodes?: {
                    [key: string]: ReturnType<typeof NodeIdentity.prototype.toObject>;
                };
            } = {};
            if (this.nodes != null) {
                data.nodes = (Object.fromEntries)((Array.from)(this.nodes).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.nodes) {
                writer.writeMessage(1, this.nodes, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Membership {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Membership();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.nodes as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = NodeIdentity.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Membership {
            return Membership.deserialize(bytes);
        }
    }
    export class NodeIdentity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            addr?: string;
            key?: Uint8Array;
            weight?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("addr" in data && data.addr != undefined) {
                    this.addr = data.addr;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("weight" in data && data.weight != undefined) {
                    this.weight = data.weight;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get addr() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set addr(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set key(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get weight() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set weight(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            addr?: string;
            key?: Uint8Array;
            weight?: string;
        }): NodeIdentity {
            const message = new NodeIdentity({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.addr != null) {
                message.addr = data.addr;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.weight != null) {
                message.weight = data.weight;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                addr?: string;
                key?: Uint8Array;
                weight?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.addr != null) {
                data.addr = this.addr;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.weight != null) {
                data.weight = this.weight;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.addr.length)
                writer.writeString(2, this.addr);
            if (this.key.length)
                writer.writeBytes(3, this.key);
            if (this.weight.length)
                writer.writeString(4, this.weight);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NodeIdentity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NodeIdentity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.addr = reader.readString();
                        break;
                    case 3:
                        message.key = reader.readBytes();
                        break;
                    case 4:
                        message.weight = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NodeIdentity {
            return NodeIdentity.deserialize(bytes);
        }
    }
    export class ClientProgress extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            progress?: Map<string, DeliveredTXs>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("progress" in data && data.progress != undefined) {
                    this.progress = data.progress;
                }
            }
            if (!this.progress)
                this.progress = new Map();
        }
        get progress() {
            return pb_1.Message.getField(this, 1) as any as Map<string, DeliveredTXs>;
        }
        set progress(value: Map<string, DeliveredTXs>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            progress?: {
                [key: string]: ReturnType<typeof DeliveredTXs.prototype.toObject>;
            };
        }): ClientProgress {
            const message = new ClientProgress({});
            if (typeof data.progress == "object") {
                message.progress = new Map(Object.entries(data.progress).map(([key, value]) => [key, DeliveredTXs.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                progress?: {
                    [key: string]: ReturnType<typeof DeliveredTXs.prototype.toObject>;
                };
            } = {};
            if (this.progress != null) {
                data.progress = (Object.fromEntries)((Array.from)(this.progress).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.progress) {
                writer.writeMessage(1, this.progress, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientProgress {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientProgress();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.progress as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = DeliveredTXs.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClientProgress {
            return ClientProgress.deserialize(bytes);
        }
    }
    export class DeliveredTXs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            low_wm?: number;
            delivered?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("low_wm" in data && data.low_wm != undefined) {
                    this.low_wm = data.low_wm;
                }
                if ("delivered" in data && data.delivered != undefined) {
                    this.delivered = data.delivered;
                }
            }
        }
        get low_wm() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set low_wm(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get delivered() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set delivered(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            low_wm?: number;
            delivered?: number[];
        }): DeliveredTXs {
            const message = new DeliveredTXs({});
            if (data.low_wm != null) {
                message.low_wm = data.low_wm;
            }
            if (data.delivered != null) {
                message.delivered = data.delivered;
            }
            return message;
        }
        toObject() {
            const data: {
                low_wm?: number;
                delivered?: number[];
            } = {};
            if (this.low_wm != null) {
                data.low_wm = this.low_wm;
            }
            if (this.delivered != null) {
                data.delivered = this.delivered;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.low_wm != 0)
                writer.writeUint64(1, this.low_wm);
            if (this.delivered.length)
                writer.writePackedUint64(2, this.delivered);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeliveredTXs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeliveredTXs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.low_wm = reader.readUint64();
                        break;
                    case 2:
                        message.delivered = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeliveredTXs {
            return DeliveredTXs.deserialize(bytes);
        }
    }
}
